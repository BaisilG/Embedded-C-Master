
ADD-TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077f4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800797c  0800797c  0001797c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007998  08007998  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007998  08007998  00017998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079a0  080079a0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079a0  080079a0  000179a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079a4  080079a4  000179a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080079a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007c8  20000090  08007a38  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000858  08007a38  00020858  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000185a6  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003553  00000000  00000000  00038666  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010f8  00000000  00000000  0003bbc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f90  00000000  00000000  0003ccb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023884  00000000  00000000  0003dc48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010f9d  00000000  00000000  000614cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca864  00000000  00000000  00072469  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013cccd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000477c  00000000  00000000  0013cd48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007964 	.word	0x08007964

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08007964 	.word	0x08007964

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fbf0 	bl	8000cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f80e 	bl	80004f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f922 	bl	800071c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d8:	f000 f88c 	bl	80005f4 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004dc:	f000 f8b8 	bl	8000650 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e0:	f000 f8e6 	bl	80006b0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e4:	f006 fe3a 	bl	800715c <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004e8:	f006 fe5e 	bl	80071a8 <MX_USB_HOST_Process>
 80004ec:	e7fc      	b.n	80004e8 <main+0x20>
	...

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b098      	sub	sp, #96	; 0x60
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004fa:	2230      	movs	r2, #48	; 0x30
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f007 f96e 	bl	80077e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000504:	f107 031c 	add.w	r3, r7, #28
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	60bb      	str	r3, [r7, #8]
 8000526:	4b31      	ldr	r3, [pc, #196]	; (80005ec <SystemClock_Config+0xfc>)
 8000528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052a:	4a30      	ldr	r2, [pc, #192]	; (80005ec <SystemClock_Config+0xfc>)
 800052c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000530:	6413      	str	r3, [r2, #64]	; 0x40
 8000532:	4b2e      	ldr	r3, [pc, #184]	; (80005ec <SystemClock_Config+0xfc>)
 8000534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800053e:	2300      	movs	r3, #0
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	4b2b      	ldr	r3, [pc, #172]	; (80005f0 <SystemClock_Config+0x100>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a2a      	ldr	r2, [pc, #168]	; (80005f0 <SystemClock_Config+0x100>)
 8000548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800054c:	6013      	str	r3, [r2, #0]
 800054e:	4b28      	ldr	r3, [pc, #160]	; (80005f0 <SystemClock_Config+0x100>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800055a:	2301      	movs	r3, #1
 800055c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800055e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000562:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000564:	2302      	movs	r3, #2
 8000566:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000568:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800056c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800056e:	2308      	movs	r3, #8
 8000570:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000572:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000576:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000578:	2302      	movs	r3, #2
 800057a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800057c:	2307      	movs	r3, #7
 800057e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000584:	4618      	mov	r0, r3
 8000586:	f003 f9b5 	bl	80038f4 <HAL_RCC_OscConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000590:	f000 f9c2 	bl	8000918 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000594:	230f      	movs	r3, #15
 8000596:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000598:	2302      	movs	r3, #2
 800059a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ac:	f107 031c 	add.w	r3, r7, #28
 80005b0:	2105      	movs	r1, #5
 80005b2:	4618      	mov	r0, r3
 80005b4:	f003 fc0e 	bl	8003dd4 <HAL_RCC_ClockConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005be:	f000 f9ab 	bl	8000918 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80005c2:	2301      	movs	r3, #1
 80005c4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80005c6:	23c0      	movs	r3, #192	; 0xc0
 80005c8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80005ca:	2302      	movs	r3, #2
 80005cc:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005ce:	f107 030c 	add.w	r3, r7, #12
 80005d2:	4618      	mov	r0, r3
 80005d4:	f003 fddc 	bl	8004190 <HAL_RCCEx_PeriphCLKConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80005de:	f000 f99b 	bl	8000918 <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3760      	adds	r7, #96	; 0x60
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40007000 	.word	0x40007000

080005f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <MX_I2C1_Init+0x50>)
 80005fa:	4a13      	ldr	r2, [pc, #76]	; (8000648 <MX_I2C1_Init+0x54>)
 80005fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <MX_I2C1_Init+0x50>)
 8000600:	4a12      	ldr	r2, [pc, #72]	; (800064c <MX_I2C1_Init+0x58>)
 8000602:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <MX_I2C1_Init+0x50>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <MX_I2C1_Init+0x50>)
 800060c:	2200      	movs	r2, #0
 800060e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <MX_I2C1_Init+0x50>)
 8000612:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000616:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <MX_I2C1_Init+0x50>)
 800061a:	2200      	movs	r2, #0
 800061c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <MX_I2C1_Init+0x50>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <MX_I2C1_Init+0x50>)
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <MX_I2C1_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000630:	4804      	ldr	r0, [pc, #16]	; (8000644 <MX_I2C1_Init+0x50>)
 8000632:	f002 fb87 	bl	8002d44 <HAL_I2C_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800063c:	f000 f96c 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	200000c0 	.word	0x200000c0
 8000648:	40005400 	.word	0x40005400
 800064c:	000186a0 	.word	0x000186a0

08000650 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000654:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <MX_I2S3_Init+0x54>)
 8000656:	4a14      	ldr	r2, [pc, #80]	; (80006a8 <MX_I2S3_Init+0x58>)
 8000658:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800065a:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_I2S3_Init+0x54>)
 800065c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000660:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <MX_I2S3_Init+0x54>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000668:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_I2S3_Init+0x54>)
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800066e:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <MX_I2S3_Init+0x54>)
 8000670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000674:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <MX_I2S3_Init+0x54>)
 8000678:	4a0c      	ldr	r2, [pc, #48]	; (80006ac <MX_I2S3_Init+0x5c>)
 800067a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_I2S3_Init+0x54>)
 800067e:	2200      	movs	r2, #0
 8000680:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <MX_I2S3_Init+0x54>)
 8000684:	2200      	movs	r2, #0
 8000686:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_I2S3_Init+0x54>)
 800068a:	2200      	movs	r2, #0
 800068c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_I2S3_Init+0x54>)
 8000690:	f002 fc90 	bl	8002fb4 <HAL_I2S_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800069a:	f000 f93d 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	2000016c 	.word	0x2000016c
 80006a8:	40003c00 	.word	0x40003c00
 80006ac:	00017700 	.word	0x00017700

080006b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006b4:	4b17      	ldr	r3, [pc, #92]	; (8000714 <MX_SPI1_Init+0x64>)
 80006b6:	4a18      	ldr	r2, [pc, #96]	; (8000718 <MX_SPI1_Init+0x68>)
 80006b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ba:	4b16      	ldr	r3, [pc, #88]	; (8000714 <MX_SPI1_Init+0x64>)
 80006bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006c2:	4b14      	ldr	r3, [pc, #80]	; (8000714 <MX_SPI1_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <MX_SPI1_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_SPI1_Init+0x64>)
 80006dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_SPI1_Init+0x64>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <MX_SPI1_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_SPI1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_SPI1_Init+0x64>)
 80006fc:	220a      	movs	r2, #10
 80006fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000700:	4804      	ldr	r0, [pc, #16]	; (8000714 <MX_SPI1_Init+0x64>)
 8000702:	f003 fe83 	bl	800440c <HAL_SPI_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800070c:	f000 f904 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000114 	.word	0x20000114
 8000718:	40013000 	.word	0x40013000

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08c      	sub	sp, #48	; 0x30
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	61bb      	str	r3, [r7, #24]
 8000736:	4b71      	ldr	r3, [pc, #452]	; (80008fc <MX_GPIO_Init+0x1e0>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a70      	ldr	r2, [pc, #448]	; (80008fc <MX_GPIO_Init+0x1e0>)
 800073c:	f043 0310 	orr.w	r3, r3, #16
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b6e      	ldr	r3, [pc, #440]	; (80008fc <MX_GPIO_Init+0x1e0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0310 	and.w	r3, r3, #16
 800074a:	61bb      	str	r3, [r7, #24]
 800074c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]
 8000752:	4b6a      	ldr	r3, [pc, #424]	; (80008fc <MX_GPIO_Init+0x1e0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a69      	ldr	r2, [pc, #420]	; (80008fc <MX_GPIO_Init+0x1e0>)
 8000758:	f043 0304 	orr.w	r3, r3, #4
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b67      	ldr	r3, [pc, #412]	; (80008fc <MX_GPIO_Init+0x1e0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0304 	and.w	r3, r3, #4
 8000766:	617b      	str	r3, [r7, #20]
 8000768:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	4b63      	ldr	r3, [pc, #396]	; (80008fc <MX_GPIO_Init+0x1e0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a62      	ldr	r2, [pc, #392]	; (80008fc <MX_GPIO_Init+0x1e0>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b60      	ldr	r3, [pc, #384]	; (80008fc <MX_GPIO_Init+0x1e0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	4b5c      	ldr	r3, [pc, #368]	; (80008fc <MX_GPIO_Init+0x1e0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a5b      	ldr	r2, [pc, #364]	; (80008fc <MX_GPIO_Init+0x1e0>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b59      	ldr	r3, [pc, #356]	; (80008fc <MX_GPIO_Init+0x1e0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	4b55      	ldr	r3, [pc, #340]	; (80008fc <MX_GPIO_Init+0x1e0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a54      	ldr	r2, [pc, #336]	; (80008fc <MX_GPIO_Init+0x1e0>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b52      	ldr	r3, [pc, #328]	; (80008fc <MX_GPIO_Init+0x1e0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b4e      	ldr	r3, [pc, #312]	; (80008fc <MX_GPIO_Init+0x1e0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a4d      	ldr	r2, [pc, #308]	; (80008fc <MX_GPIO_Init+0x1e0>)
 80007c8:	f043 0308 	orr.w	r3, r3, #8
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b4b      	ldr	r3, [pc, #300]	; (80008fc <MX_GPIO_Init+0x1e0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0308 	and.w	r3, r3, #8
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2108      	movs	r1, #8
 80007de:	4848      	ldr	r0, [pc, #288]	; (8000900 <MX_GPIO_Init+0x1e4>)
 80007e0:	f000 fda6 	bl	8001330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	2101      	movs	r1, #1
 80007e8:	4846      	ldr	r0, [pc, #280]	; (8000904 <MX_GPIO_Init+0x1e8>)
 80007ea:	f000 fda1 	bl	8001330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80007ee:	2200      	movs	r2, #0
 80007f0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007f4:	4844      	ldr	r0, [pc, #272]	; (8000908 <MX_GPIO_Init+0x1ec>)
 80007f6:	f000 fd9b 	bl	8001330 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007fa:	2308      	movs	r3, #8
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	4619      	mov	r1, r3
 8000810:	483b      	ldr	r0, [pc, #236]	; (8000900 <MX_GPIO_Init+0x1e4>)
 8000812:	f000 fbf3 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000816:	2301      	movs	r3, #1
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081a:	2301      	movs	r3, #1
 800081c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	4619      	mov	r1, r3
 800082c:	4835      	ldr	r0, [pc, #212]	; (8000904 <MX_GPIO_Init+0x1e8>)
 800082e:	f000 fbe5 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000832:	2308      	movs	r3, #8
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	2302      	movs	r3, #2
 8000838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000842:	2305      	movs	r3, #5
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	482d      	ldr	r0, [pc, #180]	; (8000904 <MX_GPIO_Init+0x1e8>)
 800084e:	f000 fbd5 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000852:	2301      	movs	r3, #1
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000856:	4b2d      	ldr	r3, [pc, #180]	; (800090c <MX_GPIO_Init+0x1f0>)
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	482a      	ldr	r0, [pc, #168]	; (8000910 <MX_GPIO_Init+0x1f4>)
 8000866:	f000 fbc9 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800086a:	2304      	movs	r3, #4
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086e:	2300      	movs	r3, #0
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4825      	ldr	r0, [pc, #148]	; (8000914 <MX_GPIO_Init+0x1f8>)
 800087e:	f000 fbbd 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000894:	2305      	movs	r3, #5
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	481d      	ldr	r0, [pc, #116]	; (8000914 <MX_GPIO_Init+0x1f8>)
 80008a0:	f000 fbac 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80008a4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008a8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4812      	ldr	r0, [pc, #72]	; (8000908 <MX_GPIO_Init+0x1ec>)
 80008be:	f000 fb9d 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008c2:	2320      	movs	r3, #32
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	480c      	ldr	r0, [pc, #48]	; (8000908 <MX_GPIO_Init+0x1ec>)
 80008d6:	f000 fb91 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008da:	2302      	movs	r3, #2
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <MX_GPIO_Init+0x1f0>)
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <MX_GPIO_Init+0x1e4>)
 80008ee:	f000 fb85 	bl	8000ffc <HAL_GPIO_Init>

}
 80008f2:	bf00      	nop
 80008f4:	3730      	adds	r7, #48	; 0x30
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800
 8000900:	40021000 	.word	0x40021000
 8000904:	40020800 	.word	0x40020800
 8000908:	40020c00 	.word	0x40020c00
 800090c:	10120000 	.word	0x10120000
 8000910:	40020000 	.word	0x40020000
 8000914:	40020400 	.word	0x40020400

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
	...

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <HAL_MspInit+0x4c>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	4a0f      	ldr	r2, [pc, #60]	; (8000974 <HAL_MspInit+0x4c>)
 8000938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093c:	6453      	str	r3, [r2, #68]	; 0x44
 800093e:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <HAL_MspInit+0x4c>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	4a08      	ldr	r2, [pc, #32]	; (8000974 <HAL_MspInit+0x4c>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000958:	6413      	str	r3, [r2, #64]	; 0x40
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <HAL_MspInit+0x4c>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000966:	2007      	movs	r0, #7
 8000968:	f000 fb06 	bl	8000f78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40023800 	.word	0x40023800

08000978 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a19      	ldr	r2, [pc, #100]	; (80009fc <HAL_I2C_MspInit+0x84>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d12c      	bne.n	80009f4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <HAL_I2C_MspInit+0x88>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a17      	ldr	r2, [pc, #92]	; (8000a00 <HAL_I2C_MspInit+0x88>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <HAL_I2C_MspInit+0x88>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009b6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009bc:	2312      	movs	r3, #18
 80009be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009c8:	2304      	movs	r3, #4
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4619      	mov	r1, r3
 80009d2:	480c      	ldr	r0, [pc, #48]	; (8000a04 <HAL_I2C_MspInit+0x8c>)
 80009d4:	f000 fb12 	bl	8000ffc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009d8:	2300      	movs	r3, #0
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <HAL_I2C_MspInit+0x88>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e0:	4a07      	ldr	r2, [pc, #28]	; (8000a00 <HAL_I2C_MspInit+0x88>)
 80009e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009e6:	6413      	str	r3, [r2, #64]	; 0x40
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <HAL_I2C_MspInit+0x88>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009f4:	bf00      	nop
 80009f6:	3728      	adds	r7, #40	; 0x28
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40005400 	.word	0x40005400
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40020400 	.word	0x40020400

08000a08 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	; 0x28
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a28      	ldr	r2, [pc, #160]	; (8000ac8 <HAL_I2S_MspInit+0xc0>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d14a      	bne.n	8000ac0 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	4b27      	ldr	r3, [pc, #156]	; (8000acc <HAL_I2S_MspInit+0xc4>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	4a26      	ldr	r2, [pc, #152]	; (8000acc <HAL_I2S_MspInit+0xc4>)
 8000a34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a38:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3a:	4b24      	ldr	r3, [pc, #144]	; (8000acc <HAL_I2S_MspInit+0xc4>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	4b20      	ldr	r3, [pc, #128]	; (8000acc <HAL_I2S_MspInit+0xc4>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a1f      	ldr	r2, [pc, #124]	; (8000acc <HAL_I2S_MspInit+0xc4>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <HAL_I2S_MspInit+0xc4>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	4b19      	ldr	r3, [pc, #100]	; (8000acc <HAL_I2S_MspInit+0xc4>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a18      	ldr	r2, [pc, #96]	; (8000acc <HAL_I2S_MspInit+0xc4>)
 8000a6c:	f043 0304 	orr.w	r3, r3, #4
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b16      	ldr	r3, [pc, #88]	; (8000acc <HAL_I2S_MspInit+0xc4>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0304 	and.w	r3, r3, #4
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a7e:	2310      	movs	r3, #16
 8000a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a8e:	2306      	movs	r3, #6
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <HAL_I2S_MspInit+0xc8>)
 8000a9a:	f000 faaf 	bl	8000ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a9e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ab0:	2306      	movs	r3, #6
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4806      	ldr	r0, [pc, #24]	; (8000ad4 <HAL_I2S_MspInit+0xcc>)
 8000abc:	f000 fa9e 	bl	8000ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ac0:	bf00      	nop
 8000ac2:	3728      	adds	r7, #40	; 0x28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40003c00 	.word	0x40003c00
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020000 	.word	0x40020000
 8000ad4:	40020800 	.word	0x40020800

08000ad8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a19      	ldr	r2, [pc, #100]	; (8000b5c <HAL_SPI_MspInit+0x84>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d12b      	bne.n	8000b52 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <HAL_SPI_MspInit+0x88>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	4a17      	ldr	r2, [pc, #92]	; (8000b60 <HAL_SPI_MspInit+0x88>)
 8000b04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b08:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <HAL_SPI_MspInit+0x88>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <HAL_SPI_MspInit+0x88>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a10      	ldr	r2, [pc, #64]	; (8000b60 <HAL_SPI_MspInit+0x88>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <HAL_SPI_MspInit+0x88>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b32:	23e0      	movs	r3, #224	; 0xe0
 8000b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b42:	2305      	movs	r3, #5
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4805      	ldr	r0, [pc, #20]	; (8000b64 <HAL_SPI_MspInit+0x8c>)
 8000b4e:	f000 fa55 	bl	8000ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b52:	bf00      	nop
 8000b54:	3728      	adds	r7, #40	; 0x28
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40013000 	.word	0x40013000
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40020000 	.word	0x40020000

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <MemManage_Handler+0x4>

08000b82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bbc:	f000 f8ca 	bl	8000d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <OTG_FS_IRQHandler+0x10>)
 8000bca:	f000 fe59 	bl	8001880 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000590 	.word	0x20000590

08000bd8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <_sbrk+0x50>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d102      	bne.n	8000bee <_sbrk+0x16>
		heap_end = &end;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <_sbrk+0x50>)
 8000bea:	4a10      	ldr	r2, [pc, #64]	; (8000c2c <_sbrk+0x54>)
 8000bec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <_sbrk+0x50>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <_sbrk+0x50>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	466a      	mov	r2, sp
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d907      	bls.n	8000c12 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000c02:	f006 fdb3 	bl	800776c <__errno>
 8000c06:	4602      	mov	r2, r0
 8000c08:	230c      	movs	r3, #12
 8000c0a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c10:	e006      	b.n	8000c20 <_sbrk+0x48>
	}

	heap_end += incr;
 8000c12:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <_sbrk+0x50>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	4a03      	ldr	r2, [pc, #12]	; (8000c28 <_sbrk+0x50>)
 8000c1c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200000ac 	.word	0x200000ac
 8000c2c:	20000858 	.word	0x20000858

08000c30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <SystemInit+0x28>)
 8000c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3a:	4a07      	ldr	r2, [pc, #28]	; (8000c58 <SystemInit+0x28>)
 8000c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <SystemInit+0x28>)
 8000c46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c4a:	609a      	str	r2, [r3, #8]
#endif
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c94 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c62:	e003      	b.n	8000c6c <LoopCopyDataInit>

08000c64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c6a:	3104      	adds	r1, #4

08000c6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c6c:	480b      	ldr	r0, [pc, #44]	; (8000c9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c74:	d3f6      	bcc.n	8000c64 <CopyDataInit>
  ldr  r2, =_sbss
 8000c76:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c78:	e002      	b.n	8000c80 <LoopFillZerobss>

08000c7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c7c:	f842 3b04 	str.w	r3, [r2], #4

08000c80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c80:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c84:	d3f9      	bcc.n	8000c7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c86:	f7ff ffd3 	bl	8000c30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c8a:	f006 fd75 	bl	8007778 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c8e:	f7ff fc1b 	bl	80004c8 <main>
  bx  lr    
 8000c92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c94:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c98:	080079a8 	.word	0x080079a8
  ldr  r0, =_sdata
 8000c9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ca0:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000ca4:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000ca8:	20000858 	.word	0x20000858

08000cac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cac:	e7fe      	b.n	8000cac <ADC_IRQHandler>
	...

08000cb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0d      	ldr	r2, [pc, #52]	; (8000cf0 <HAL_Init+0x40>)
 8000cba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <HAL_Init+0x40>)
 8000cc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <HAL_Init+0x40>)
 8000cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd8:	2003      	movs	r0, #3
 8000cda:	f000 f94d 	bl	8000f78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f000 f808 	bl	8000cf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce4:	f7ff fe20 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40023c00 	.word	0x40023c00

08000cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <HAL_InitTick+0x54>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <HAL_InitTick+0x58>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	4619      	mov	r1, r3
 8000d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 f965 	bl	8000fe2 <HAL_SYSTICK_Config>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e00e      	b.n	8000d40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b0f      	cmp	r3, #15
 8000d26:	d80a      	bhi.n	8000d3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	f000 f92d 	bl	8000f8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d34:	4a06      	ldr	r2, [pc, #24]	; (8000d50 <HAL_InitTick+0x5c>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e000      	b.n	8000d40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	20000004 	.word	0x20000004

08000d54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_IncTick+0x20>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_IncTick+0x24>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4413      	add	r3, r2
 8000d64:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <HAL_IncTick+0x24>)
 8000d66:	6013      	str	r3, [r2, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20000008 	.word	0x20000008
 8000d78:	200001b4 	.word	0x200001b4

08000d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <HAL_GetTick+0x14>)
 8000d82:	681b      	ldr	r3, [r3, #0]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	200001b4 	.word	0x200001b4

08000d94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d9c:	f7ff ffee 	bl	8000d7c <HAL_GetTick>
 8000da0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dac:	d005      	beq.n	8000dba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <HAL_Delay+0x40>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	4413      	add	r3, r2
 8000db8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dba:	bf00      	nop
 8000dbc:	f7ff ffde 	bl	8000d7c <HAL_GetTick>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d8f7      	bhi.n	8000dbc <HAL_Delay+0x28>
  {
  }
}
 8000dcc:	bf00      	nop
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000008 	.word	0x20000008

08000dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000df4:	4013      	ands	r3, r2
 8000df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0a:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	60d3      	str	r3, [r2, #12]
}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e24:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <__NVIC_GetPriorityGrouping+0x18>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	0a1b      	lsrs	r3, r3, #8
 8000e2a:	f003 0307 	and.w	r3, r3, #7
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	db0b      	blt.n	8000e66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	f003 021f 	and.w	r2, r3, #31
 8000e54:	4907      	ldr	r1, [pc, #28]	; (8000e74 <__NVIC_EnableIRQ+0x38>)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	095b      	lsrs	r3, r3, #5
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000e100 	.word	0xe000e100

08000e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	6039      	str	r1, [r7, #0]
 8000e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	db0a      	blt.n	8000ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	490c      	ldr	r1, [pc, #48]	; (8000ec4 <__NVIC_SetPriority+0x4c>)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	0112      	lsls	r2, r2, #4
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	440b      	add	r3, r1
 8000e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea0:	e00a      	b.n	8000eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4908      	ldr	r1, [pc, #32]	; (8000ec8 <__NVIC_SetPriority+0x50>)
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	f003 030f 	and.w	r3, r3, #15
 8000eae:	3b04      	subs	r3, #4
 8000eb0:	0112      	lsls	r2, r2, #4
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	440b      	add	r3, r1
 8000eb6:	761a      	strb	r2, [r3, #24]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000e100 	.word	0xe000e100
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	; 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f1c3 0307 	rsb	r3, r3, #7
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	bf28      	it	cs
 8000eea:	2304      	movcs	r3, #4
 8000eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	2b06      	cmp	r3, #6
 8000ef4:	d902      	bls.n	8000efc <NVIC_EncodePriority+0x30>
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3b03      	subs	r3, #3
 8000efa:	e000      	b.n	8000efe <NVIC_EncodePriority+0x32>
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	f04f 32ff 	mov.w	r2, #4294967295
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43da      	mvns	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	401a      	ands	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f14:	f04f 31ff 	mov.w	r1, #4294967295
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1e:	43d9      	mvns	r1, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	4313      	orrs	r3, r2
         );
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3724      	adds	r7, #36	; 0x24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
	...

08000f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f44:	d301      	bcc.n	8000f4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f46:	2301      	movs	r3, #1
 8000f48:	e00f      	b.n	8000f6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <SysTick_Config+0x40>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f52:	210f      	movs	r1, #15
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295
 8000f58:	f7ff ff8e 	bl	8000e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <SysTick_Config+0x40>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f62:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <SysTick_Config+0x40>)
 8000f64:	2207      	movs	r2, #7
 8000f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	e000e010 	.word	0xe000e010

08000f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff ff29 	bl	8000dd8 <__NVIC_SetPriorityGrouping>
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b086      	sub	sp, #24
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	4603      	mov	r3, r0
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	607a      	str	r2, [r7, #4]
 8000f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa0:	f7ff ff3e 	bl	8000e20 <__NVIC_GetPriorityGrouping>
 8000fa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	68b9      	ldr	r1, [r7, #8]
 8000faa:	6978      	ldr	r0, [r7, #20]
 8000fac:	f7ff ff8e 	bl	8000ecc <NVIC_EncodePriority>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff5d 	bl	8000e78 <__NVIC_SetPriority>
}
 8000fbe:	bf00      	nop
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	4603      	mov	r3, r0
 8000fce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff31 	bl	8000e3c <__NVIC_EnableIRQ>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff ffa2 	bl	8000f34 <SysTick_Config>
 8000ff0:	4603      	mov	r3, r0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800100e:	2300      	movs	r3, #0
 8001010:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
 8001016:	e16b      	b.n	80012f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001018:	2201      	movs	r2, #1
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	697a      	ldr	r2, [r7, #20]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	429a      	cmp	r2, r3
 8001032:	f040 815a 	bne.w	80012ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d00b      	beq.n	8001056 <HAL_GPIO_Init+0x5a>
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	2b02      	cmp	r3, #2
 8001044:	d007      	beq.n	8001056 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800104a:	2b11      	cmp	r3, #17
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	2b12      	cmp	r3, #18
 8001054:	d130      	bne.n	80010b8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	2203      	movs	r2, #3
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	68da      	ldr	r2, [r3, #12]
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800108c:	2201      	movs	r2, #1
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	091b      	lsrs	r3, r3, #4
 80010a2:	f003 0201 	and.w	r2, r3, #1
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	2203      	movs	r2, #3
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	689a      	ldr	r2, [r3, #8]
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d003      	beq.n	80010f8 <HAL_GPIO_Init+0xfc>
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b12      	cmp	r3, #18
 80010f6:	d123      	bne.n	8001140 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	08da      	lsrs	r2, r3, #3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3208      	adds	r2, #8
 8001100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	f003 0307 	and.w	r3, r3, #7
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	220f      	movs	r2, #15
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	691a      	ldr	r2, [r3, #16]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	08da      	lsrs	r2, r3, #3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3208      	adds	r2, #8
 800113a:	69b9      	ldr	r1, [r7, #24]
 800113c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	2203      	movs	r2, #3
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0203 	and.w	r2, r3, #3
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117c:	2b00      	cmp	r3, #0
 800117e:	f000 80b4 	beq.w	80012ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b5f      	ldr	r3, [pc, #380]	; (8001304 <HAL_GPIO_Init+0x308>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	4a5e      	ldr	r2, [pc, #376]	; (8001304 <HAL_GPIO_Init+0x308>)
 800118c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001190:	6453      	str	r3, [r2, #68]	; 0x44
 8001192:	4b5c      	ldr	r3, [pc, #368]	; (8001304 <HAL_GPIO_Init+0x308>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800119e:	4a5a      	ldr	r2, [pc, #360]	; (8001308 <HAL_GPIO_Init+0x30c>)
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	3302      	adds	r3, #2
 80011a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	220f      	movs	r2, #15
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a51      	ldr	r2, [pc, #324]	; (800130c <HAL_GPIO_Init+0x310>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d02b      	beq.n	8001222 <HAL_GPIO_Init+0x226>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a50      	ldr	r2, [pc, #320]	; (8001310 <HAL_GPIO_Init+0x314>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d025      	beq.n	800121e <HAL_GPIO_Init+0x222>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a4f      	ldr	r2, [pc, #316]	; (8001314 <HAL_GPIO_Init+0x318>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d01f      	beq.n	800121a <HAL_GPIO_Init+0x21e>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4e      	ldr	r2, [pc, #312]	; (8001318 <HAL_GPIO_Init+0x31c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d019      	beq.n	8001216 <HAL_GPIO_Init+0x21a>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4d      	ldr	r2, [pc, #308]	; (800131c <HAL_GPIO_Init+0x320>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d013      	beq.n	8001212 <HAL_GPIO_Init+0x216>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4c      	ldr	r2, [pc, #304]	; (8001320 <HAL_GPIO_Init+0x324>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d00d      	beq.n	800120e <HAL_GPIO_Init+0x212>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4b      	ldr	r2, [pc, #300]	; (8001324 <HAL_GPIO_Init+0x328>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d007      	beq.n	800120a <HAL_GPIO_Init+0x20e>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4a      	ldr	r2, [pc, #296]	; (8001328 <HAL_GPIO_Init+0x32c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d101      	bne.n	8001206 <HAL_GPIO_Init+0x20a>
 8001202:	2307      	movs	r3, #7
 8001204:	e00e      	b.n	8001224 <HAL_GPIO_Init+0x228>
 8001206:	2308      	movs	r3, #8
 8001208:	e00c      	b.n	8001224 <HAL_GPIO_Init+0x228>
 800120a:	2306      	movs	r3, #6
 800120c:	e00a      	b.n	8001224 <HAL_GPIO_Init+0x228>
 800120e:	2305      	movs	r3, #5
 8001210:	e008      	b.n	8001224 <HAL_GPIO_Init+0x228>
 8001212:	2304      	movs	r3, #4
 8001214:	e006      	b.n	8001224 <HAL_GPIO_Init+0x228>
 8001216:	2303      	movs	r3, #3
 8001218:	e004      	b.n	8001224 <HAL_GPIO_Init+0x228>
 800121a:	2302      	movs	r3, #2
 800121c:	e002      	b.n	8001224 <HAL_GPIO_Init+0x228>
 800121e:	2301      	movs	r3, #1
 8001220:	e000      	b.n	8001224 <HAL_GPIO_Init+0x228>
 8001222:	2300      	movs	r3, #0
 8001224:	69fa      	ldr	r2, [r7, #28]
 8001226:	f002 0203 	and.w	r2, r2, #3
 800122a:	0092      	lsls	r2, r2, #2
 800122c:	4093      	lsls	r3, r2
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001234:	4934      	ldr	r1, [pc, #208]	; (8001308 <HAL_GPIO_Init+0x30c>)
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	089b      	lsrs	r3, r3, #2
 800123a:	3302      	adds	r3, #2
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001242:	4b3a      	ldr	r3, [pc, #232]	; (800132c <HAL_GPIO_Init+0x330>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001266:	4a31      	ldr	r2, [pc, #196]	; (800132c <HAL_GPIO_Init+0x330>)
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800126c:	4b2f      	ldr	r3, [pc, #188]	; (800132c <HAL_GPIO_Init+0x330>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001290:	4a26      	ldr	r2, [pc, #152]	; (800132c <HAL_GPIO_Init+0x330>)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001296:	4b25      	ldr	r3, [pc, #148]	; (800132c <HAL_GPIO_Init+0x330>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ba:	4a1c      	ldr	r2, [pc, #112]	; (800132c <HAL_GPIO_Init+0x330>)
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c0:	4b1a      	ldr	r3, [pc, #104]	; (800132c <HAL_GPIO_Init+0x330>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012e4:	4a11      	ldr	r2, [pc, #68]	; (800132c <HAL_GPIO_Init+0x330>)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3301      	adds	r3, #1
 80012ee:	61fb      	str	r3, [r7, #28]
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	2b0f      	cmp	r3, #15
 80012f4:	f67f ae90 	bls.w	8001018 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012f8:	bf00      	nop
 80012fa:	3724      	adds	r7, #36	; 0x24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	40023800 	.word	0x40023800
 8001308:	40013800 	.word	0x40013800
 800130c:	40020000 	.word	0x40020000
 8001310:	40020400 	.word	0x40020400
 8001314:	40020800 	.word	0x40020800
 8001318:	40020c00 	.word	0x40020c00
 800131c:	40021000 	.word	0x40021000
 8001320:	40021400 	.word	0x40021400
 8001324:	40021800 	.word	0x40021800
 8001328:	40021c00 	.word	0x40021c00
 800132c:	40013c00 	.word	0x40013c00

08001330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	807b      	strh	r3, [r7, #2]
 800133c:	4613      	mov	r3, r2
 800133e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001340:	787b      	ldrb	r3, [r7, #1]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001346:	887a      	ldrh	r2, [r7, #2]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800134c:	e003      	b.n	8001356 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800134e:	887b      	ldrh	r3, [r7, #2]
 8001350:	041a      	lsls	r2, r3, #16
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	619a      	str	r2, [r3, #24]
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001362:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001364:	b08f      	sub	sp, #60	; 0x3c
 8001366:	af0a      	add	r7, sp, #40	; 0x28
 8001368:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d101      	bne.n	8001374 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e054      	b.n	800141e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d106      	bne.n	8001394 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f005 ff42 	bl	8007218 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2203      	movs	r2, #3
 8001398:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d102      	bne.n	80013ae <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f003 f900 	bl	80045b8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	603b      	str	r3, [r7, #0]
 80013be:	687e      	ldr	r6, [r7, #4]
 80013c0:	466d      	mov	r5, sp
 80013c2:	f106 0410 	add.w	r4, r6, #16
 80013c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80013d6:	1d33      	adds	r3, r6, #4
 80013d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013da:	6838      	ldr	r0, [r7, #0]
 80013dc:	f003 f87a 	bl	80044d4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2101      	movs	r1, #1
 80013e6:	4618      	mov	r0, r3
 80013e8:	f003 f8f7 	bl	80045da <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	603b      	str	r3, [r7, #0]
 80013f2:	687e      	ldr	r6, [r7, #4]
 80013f4:	466d      	mov	r5, sp
 80013f6:	f106 0410 	add.w	r4, r6, #16
 80013fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001402:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001406:	e885 0003 	stmia.w	r5, {r0, r1}
 800140a:	1d33      	adds	r3, r6, #4
 800140c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800140e:	6838      	ldr	r0, [r7, #0]
 8001410:	f003 fa0a 	bl	8004828 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001426 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001426:	b590      	push	{r4, r7, lr}
 8001428:	b089      	sub	sp, #36	; 0x24
 800142a:	af04      	add	r7, sp, #16
 800142c:	6078      	str	r0, [r7, #4]
 800142e:	4608      	mov	r0, r1
 8001430:	4611      	mov	r1, r2
 8001432:	461a      	mov	r2, r3
 8001434:	4603      	mov	r3, r0
 8001436:	70fb      	strb	r3, [r7, #3]
 8001438:	460b      	mov	r3, r1
 800143a:	70bb      	strb	r3, [r7, #2]
 800143c:	4613      	mov	r3, r2
 800143e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001446:	2b01      	cmp	r3, #1
 8001448:	d101      	bne.n	800144e <HAL_HCD_HC_Init+0x28>
 800144a:	2302      	movs	r3, #2
 800144c:	e07f      	b.n	800154e <HAL_HCD_HC_Init+0x128>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2201      	movs	r2, #1
 8001452:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001456:	78fa      	ldrb	r2, [r7, #3]
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	4613      	mov	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	440b      	add	r3, r1
 8001464:	333d      	adds	r3, #61	; 0x3d
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800146a:	78fa      	ldrb	r2, [r7, #3]
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	440b      	add	r3, r1
 8001478:	3338      	adds	r3, #56	; 0x38
 800147a:	787a      	ldrb	r2, [r7, #1]
 800147c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800147e:	78fa      	ldrb	r2, [r7, #3]
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	4613      	mov	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4413      	add	r3, r2
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	440b      	add	r3, r1
 800148c:	3340      	adds	r3, #64	; 0x40
 800148e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001490:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001492:	78fa      	ldrb	r2, [r7, #3]
 8001494:	6879      	ldr	r1, [r7, #4]
 8001496:	4613      	mov	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4413      	add	r3, r2
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	440b      	add	r3, r1
 80014a0:	3339      	adds	r3, #57	; 0x39
 80014a2:	78fa      	ldrb	r2, [r7, #3]
 80014a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80014a6:	78fa      	ldrb	r2, [r7, #3]
 80014a8:	6879      	ldr	r1, [r7, #4]
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	440b      	add	r3, r1
 80014b4:	333f      	adds	r3, #63	; 0x3f
 80014b6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80014ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80014bc:	78fa      	ldrb	r2, [r7, #3]
 80014be:	78bb      	ldrb	r3, [r7, #2]
 80014c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014c4:	b2d8      	uxtb	r0, r3
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	440b      	add	r3, r1
 80014d2:	333a      	adds	r3, #58	; 0x3a
 80014d4:	4602      	mov	r2, r0
 80014d6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80014d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	da0a      	bge.n	80014f6 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80014e0:	78fa      	ldrb	r2, [r7, #3]
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	440b      	add	r3, r1
 80014ee:	333b      	adds	r3, #59	; 0x3b
 80014f0:	2201      	movs	r2, #1
 80014f2:	701a      	strb	r2, [r3, #0]
 80014f4:	e009      	b.n	800150a <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80014f6:	78fa      	ldrb	r2, [r7, #3]
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	4613      	mov	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	440b      	add	r3, r1
 8001504:	333b      	adds	r3, #59	; 0x3b
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800150a:	78fa      	ldrb	r2, [r7, #3]
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	440b      	add	r3, r1
 8001518:	333c      	adds	r3, #60	; 0x3c
 800151a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800151e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6818      	ldr	r0, [r3, #0]
 8001524:	787c      	ldrb	r4, [r7, #1]
 8001526:	78ba      	ldrb	r2, [r7, #2]
 8001528:	78f9      	ldrb	r1, [r7, #3]
 800152a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800152c:	9302      	str	r3, [sp, #8]
 800152e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001532:	9301      	str	r3, [sp, #4]
 8001534:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	4623      	mov	r3, r4
 800153c:	f003 faf6 	bl	8004b2c <USB_HC_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800154c:	7bfb      	ldrb	r3, [r7, #15]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	bd90      	pop	{r4, r7, pc}

08001556 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b084      	sub	sp, #16
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
 800155e:	460b      	mov	r3, r1
 8001560:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001562:	2300      	movs	r3, #0
 8001564:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800156c:	2b01      	cmp	r3, #1
 800156e:	d101      	bne.n	8001574 <HAL_HCD_HC_Halt+0x1e>
 8001570:	2302      	movs	r3, #2
 8001572:	e00f      	b.n	8001594 <HAL_HCD_HC_Halt+0x3e>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	78fa      	ldrb	r2, [r7, #3]
 8001582:	4611      	mov	r1, r2
 8001584:	4618      	mov	r0, r3
 8001586:	f003 fd30 	bl	8004fea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001592:	7bfb      	ldrb	r3, [r7, #15]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	4608      	mov	r0, r1
 80015a6:	4611      	mov	r1, r2
 80015a8:	461a      	mov	r2, r3
 80015aa:	4603      	mov	r3, r0
 80015ac:	70fb      	strb	r3, [r7, #3]
 80015ae:	460b      	mov	r3, r1
 80015b0:	70bb      	strb	r3, [r7, #2]
 80015b2:	4613      	mov	r3, r2
 80015b4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80015b6:	78fa      	ldrb	r2, [r7, #3]
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	4613      	mov	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	440b      	add	r3, r1
 80015c4:	333b      	adds	r3, #59	; 0x3b
 80015c6:	78ba      	ldrb	r2, [r7, #2]
 80015c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80015ca:	78fa      	ldrb	r2, [r7, #3]
 80015cc:	6879      	ldr	r1, [r7, #4]
 80015ce:	4613      	mov	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	440b      	add	r3, r1
 80015d8:	333f      	adds	r3, #63	; 0x3f
 80015da:	787a      	ldrb	r2, [r7, #1]
 80015dc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80015de:	7c3b      	ldrb	r3, [r7, #16]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d114      	bne.n	800160e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80015e4:	78fa      	ldrb	r2, [r7, #3]
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	440b      	add	r3, r1
 80015f2:	3342      	adds	r3, #66	; 0x42
 80015f4:	2203      	movs	r2, #3
 80015f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80015f8:	78fa      	ldrb	r2, [r7, #3]
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	440b      	add	r3, r1
 8001606:	333d      	adds	r3, #61	; 0x3d
 8001608:	7f3a      	ldrb	r2, [r7, #28]
 800160a:	701a      	strb	r2, [r3, #0]
 800160c:	e009      	b.n	8001622 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800160e:	78fa      	ldrb	r2, [r7, #3]
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	4613      	mov	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	440b      	add	r3, r1
 800161c:	3342      	adds	r3, #66	; 0x42
 800161e:	2202      	movs	r2, #2
 8001620:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001622:	787b      	ldrb	r3, [r7, #1]
 8001624:	2b03      	cmp	r3, #3
 8001626:	f200 80d6 	bhi.w	80017d6 <HAL_HCD_HC_SubmitRequest+0x23a>
 800162a:	a201      	add	r2, pc, #4	; (adr r2, 8001630 <HAL_HCD_HC_SubmitRequest+0x94>)
 800162c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001630:	08001641 	.word	0x08001641
 8001634:	080017c1 	.word	0x080017c1
 8001638:	080016ad 	.word	0x080016ad
 800163c:	08001737 	.word	0x08001737
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001640:	7c3b      	ldrb	r3, [r7, #16]
 8001642:	2b01      	cmp	r3, #1
 8001644:	f040 80c9 	bne.w	80017da <HAL_HCD_HC_SubmitRequest+0x23e>
 8001648:	78bb      	ldrb	r3, [r7, #2]
 800164a:	2b00      	cmp	r3, #0
 800164c:	f040 80c5 	bne.w	80017da <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001650:	8b3b      	ldrh	r3, [r7, #24]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d109      	bne.n	800166a <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001656:	78fa      	ldrb	r2, [r7, #3]
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	440b      	add	r3, r1
 8001664:	3351      	adds	r3, #81	; 0x51
 8001666:	2201      	movs	r2, #1
 8001668:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800166a:	78fa      	ldrb	r2, [r7, #3]
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	4613      	mov	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	440b      	add	r3, r1
 8001678:	3351      	adds	r3, #81	; 0x51
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d10a      	bne.n	8001696 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001680:	78fa      	ldrb	r2, [r7, #3]
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	4613      	mov	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4413      	add	r3, r2
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	440b      	add	r3, r1
 800168e:	3342      	adds	r3, #66	; 0x42
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001694:	e0a1      	b.n	80017da <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001696:	78fa      	ldrb	r2, [r7, #3]
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	440b      	add	r3, r1
 80016a4:	3342      	adds	r3, #66	; 0x42
 80016a6:	2202      	movs	r2, #2
 80016a8:	701a      	strb	r2, [r3, #0]
      break;
 80016aa:	e096      	b.n	80017da <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80016ac:	78bb      	ldrb	r3, [r7, #2]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d120      	bne.n	80016f4 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016b2:	78fa      	ldrb	r2, [r7, #3]
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	440b      	add	r3, r1
 80016c0:	3351      	adds	r3, #81	; 0x51
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d10a      	bne.n	80016de <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016c8:	78fa      	ldrb	r2, [r7, #3]
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	4613      	mov	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	440b      	add	r3, r1
 80016d6:	3342      	adds	r3, #66	; 0x42
 80016d8:	2200      	movs	r2, #0
 80016da:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80016dc:	e07e      	b.n	80017dc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016de:	78fa      	ldrb	r2, [r7, #3]
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	440b      	add	r3, r1
 80016ec:	3342      	adds	r3, #66	; 0x42
 80016ee:	2202      	movs	r2, #2
 80016f0:	701a      	strb	r2, [r3, #0]
      break;
 80016f2:	e073      	b.n	80017dc <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80016f4:	78fa      	ldrb	r2, [r7, #3]
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	440b      	add	r3, r1
 8001702:	3350      	adds	r3, #80	; 0x50
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d10a      	bne.n	8001720 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800170a:	78fa      	ldrb	r2, [r7, #3]
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	440b      	add	r3, r1
 8001718:	3342      	adds	r3, #66	; 0x42
 800171a:	2200      	movs	r2, #0
 800171c:	701a      	strb	r2, [r3, #0]
      break;
 800171e:	e05d      	b.n	80017dc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001720:	78fa      	ldrb	r2, [r7, #3]
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	4613      	mov	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	440b      	add	r3, r1
 800172e:	3342      	adds	r3, #66	; 0x42
 8001730:	2202      	movs	r2, #2
 8001732:	701a      	strb	r2, [r3, #0]
      break;
 8001734:	e052      	b.n	80017dc <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001736:	78bb      	ldrb	r3, [r7, #2]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d120      	bne.n	800177e <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800173c:	78fa      	ldrb	r2, [r7, #3]
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	4613      	mov	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	440b      	add	r3, r1
 800174a:	3351      	adds	r3, #81	; 0x51
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10a      	bne.n	8001768 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001752:	78fa      	ldrb	r2, [r7, #3]
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	440b      	add	r3, r1
 8001760:	3342      	adds	r3, #66	; 0x42
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001766:	e039      	b.n	80017dc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001768:	78fa      	ldrb	r2, [r7, #3]
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	440b      	add	r3, r1
 8001776:	3342      	adds	r3, #66	; 0x42
 8001778:	2202      	movs	r2, #2
 800177a:	701a      	strb	r2, [r3, #0]
      break;
 800177c:	e02e      	b.n	80017dc <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800177e:	78fa      	ldrb	r2, [r7, #3]
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	440b      	add	r3, r1
 800178c:	3350      	adds	r3, #80	; 0x50
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d10a      	bne.n	80017aa <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001794:	78fa      	ldrb	r2, [r7, #3]
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	440b      	add	r3, r1
 80017a2:	3342      	adds	r3, #66	; 0x42
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]
      break;
 80017a8:	e018      	b.n	80017dc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017aa:	78fa      	ldrb	r2, [r7, #3]
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	440b      	add	r3, r1
 80017b8:	3342      	adds	r3, #66	; 0x42
 80017ba:	2202      	movs	r2, #2
 80017bc:	701a      	strb	r2, [r3, #0]
      break;
 80017be:	e00d      	b.n	80017dc <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017c0:	78fa      	ldrb	r2, [r7, #3]
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	440b      	add	r3, r1
 80017ce:	3342      	adds	r3, #66	; 0x42
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
      break;
 80017d4:	e002      	b.n	80017dc <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80017d6:	bf00      	nop
 80017d8:	e000      	b.n	80017dc <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80017da:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80017dc:	78fa      	ldrb	r2, [r7, #3]
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	440b      	add	r3, r1
 80017ea:	3344      	adds	r3, #68	; 0x44
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80017f0:	78fa      	ldrb	r2, [r7, #3]
 80017f2:	8b39      	ldrh	r1, [r7, #24]
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	4403      	add	r3, r0
 8001800:	3348      	adds	r3, #72	; 0x48
 8001802:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001804:	78fa      	ldrb	r2, [r7, #3]
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	4613      	mov	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	440b      	add	r3, r1
 8001812:	335c      	adds	r3, #92	; 0x5c
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001818:	78fa      	ldrb	r2, [r7, #3]
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	440b      	add	r3, r1
 8001826:	334c      	adds	r3, #76	; 0x4c
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800182c:	78fa      	ldrb	r2, [r7, #3]
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	440b      	add	r3, r1
 800183a:	3339      	adds	r3, #57	; 0x39
 800183c:	78fa      	ldrb	r2, [r7, #3]
 800183e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001840:	78fa      	ldrb	r2, [r7, #3]
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	4613      	mov	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	440b      	add	r3, r1
 800184e:	335d      	adds	r3, #93	; 0x5d
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6818      	ldr	r0, [r3, #0]
 8001858:	78fa      	ldrb	r2, [r7, #3]
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	3338      	adds	r3, #56	; 0x38
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	18d1      	adds	r1, r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	461a      	mov	r2, r3
 8001870:	f003 fa66 	bl	8004d40 <USB_HC_StartXfer>
 8001874:	4603      	mov	r3, r0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop

08001880 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f002 ff83 	bl	80047a2 <USB_GetMode>
 800189c:	4603      	mov	r3, r0
 800189e:	2b01      	cmp	r3, #1
 80018a0:	f040 80ef 	bne.w	8001a82 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f002 ff67 	bl	800477c <USB_ReadInterrupts>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 80e5 	beq.w	8001a80 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f002 ff5e 	bl	800477c <USB_ReadInterrupts>
 80018c0:	4603      	mov	r3, r0
 80018c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018ca:	d104      	bne.n	80018d6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80018d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f002 ff4e 	bl	800477c <USB_ReadInterrupts>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018ea:	d104      	bne.n	80018f6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f002 ff3e 	bl	800477c <USB_ReadInterrupts>
 8001900:	4603      	mov	r3, r0
 8001902:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001906:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800190a:	d104      	bne.n	8001916 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001914:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f002 ff2e 	bl	800477c <USB_ReadInterrupts>
 8001920:	4603      	mov	r3, r0
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b02      	cmp	r3, #2
 8001928:	d103      	bne.n	8001932 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2202      	movs	r2, #2
 8001930:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f002 ff20 	bl	800477c <USB_ReadInterrupts>
 800193c:	4603      	mov	r3, r0
 800193e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001942:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001946:	d115      	bne.n	8001974 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001950:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d108      	bne.n	8001974 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f005 fcd6 	bl	8007314 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2101      	movs	r1, #1
 800196e:	4618      	mov	r0, r3
 8001970:	f003 f816 	bl	80049a0 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f002 feff 	bl	800477c <USB_ReadInterrupts>
 800197e:	4603      	mov	r3, r0
 8001980:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001984:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001988:	d102      	bne.n	8001990 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f001 f966 	bl	8002c5c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f002 fef1 	bl	800477c <USB_ReadInterrupts>
 800199a:	4603      	mov	r3, r0
 800199c:	f003 0308 	and.w	r3, r3, #8
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	d106      	bne.n	80019b2 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f005 fc99 	bl	80072dc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2208      	movs	r2, #8
 80019b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f002 fee0 	bl	800477c <USB_ReadInterrupts>
 80019bc:	4603      	mov	r3, r0
 80019be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019c6:	d138      	bne.n	8001a3a <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f003 fafb 	bl	8004fc8 <USB_HC_ReadInterrupt>
 80019d2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	e025      	b.n	8001a26 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f003 030f 	and.w	r3, r3, #15
 80019e0:	68ba      	ldr	r2, [r7, #8]
 80019e2:	fa22 f303 	lsr.w	r3, r2, r3
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d018      	beq.n	8001a20 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	015a      	lsls	r2, r3, #5
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	4413      	add	r3, r2
 80019f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a04:	d106      	bne.n	8001a14 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 f8cf 	bl	8001bb0 <HCD_HC_IN_IRQHandler>
 8001a12:	e005      	b.n	8001a20 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	4619      	mov	r1, r3
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 fcfd 	bl	800241a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	3301      	adds	r3, #1
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d3d4      	bcc.n	80019da <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f002 fe9c 	bl	800477c <USB_ReadInterrupts>
 8001a44:	4603      	mov	r3, r0
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	2b10      	cmp	r3, #16
 8001a4c:	d101      	bne.n	8001a52 <HAL_HCD_IRQHandler+0x1d2>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <HAL_HCD_IRQHandler+0x1d4>
 8001a52:	2300      	movs	r3, #0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d014      	beq.n	8001a82 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	699a      	ldr	r2, [r3, #24]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f022 0210 	bic.w	r2, r2, #16
 8001a66:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f001 f84b 	bl	8002b04 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	699a      	ldr	r2, [r3, #24]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f042 0210 	orr.w	r2, r2, #16
 8001a7c:	619a      	str	r2, [r3, #24]
 8001a7e:	e000      	b.n	8001a82 <HAL_HCD_IRQHandler+0x202>
      return;
 8001a80:	bf00      	nop
    }
  }
}
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d101      	bne.n	8001a9e <HAL_HCD_Start+0x16>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e013      	b.n	8001ac6 <HAL_HCD_Start+0x3e>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f002 fd73 	bl	8004596 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f002 ffd6 	bl	8004a68 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d101      	bne.n	8001ae4 <HAL_HCD_Stop+0x16>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	e00d      	b.n	8001b00 <HAL_HCD_Stop+0x32>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f003 fbb5 	bl	8005260 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f002 ff7d 	bl	8004a14 <USB_ResetPort>
 8001b1a:	4603      	mov	r3, r0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001b30:	78fa      	ldrb	r2, [r7, #3]
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	4613      	mov	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4413      	add	r3, r2
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	440b      	add	r3, r1
 8001b3e:	335c      	adds	r3, #92	; 0x5c
 8001b40:	781b      	ldrb	r3, [r3, #0]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	460b      	mov	r3, r1
 8001b58:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001b5a:	78fa      	ldrb	r2, [r7, #3]
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	440b      	add	r3, r1
 8001b68:	334c      	adds	r3, #76	; 0x4c
 8001b6a:	681b      	ldr	r3, [r3, #0]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f002 ffbf 	bl	8004b08 <USB_GetCurrentFrame>
 8001b8a:	4603      	mov	r3, r0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f002 ff9a 	bl	8004ada <USB_GetHostSpeed>
 8001ba6:	4603      	mov	r3, r0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001bc6:	78fb      	ldrb	r3, [r7, #3]
 8001bc8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	015a      	lsls	r2, r3, #5
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d119      	bne.n	8001c14 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	015a      	lsls	r2, r3, #5
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	4413      	add	r3, r2
 8001be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bec:	461a      	mov	r2, r3
 8001bee:	2304      	movs	r3, #4
 8001bf0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	015a      	lsls	r2, r3, #5
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	0151      	lsls	r1, r2, #5
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	440a      	add	r2, r1
 8001c08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c0c:	f043 0302 	orr.w	r3, r3, #2
 8001c10:	60d3      	str	r3, [r2, #12]
 8001c12:	e0ce      	b.n	8001db2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	015a      	lsls	r2, r3, #5
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c2a:	d12c      	bne.n	8001c86 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	015a      	lsls	r2, r3, #5
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4413      	add	r3, r2
 8001c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c38:	461a      	mov	r2, r3
 8001c3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001c40:	6879      	ldr	r1, [r7, #4]
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	4613      	mov	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	440b      	add	r3, r1
 8001c4e:	335d      	adds	r3, #93	; 0x5d
 8001c50:	2207      	movs	r2, #7
 8001c52:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	015a      	lsls	r2, r3, #5
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	0151      	lsls	r1, r2, #5
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	440a      	add	r2, r1
 8001c6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c6e:	f043 0302 	orr.w	r3, r3, #2
 8001c72:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	4611      	mov	r1, r2
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f003 f9b3 	bl	8004fea <USB_HC_Halt>
 8001c84:	e095      	b.n	8001db2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	015a      	lsls	r2, r3, #5
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 0320 	and.w	r3, r3, #32
 8001c98:	2b20      	cmp	r3, #32
 8001c9a:	d109      	bne.n	8001cb0 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	015a      	lsls	r2, r3, #5
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca8:	461a      	mov	r2, r3
 8001caa:	2320      	movs	r3, #32
 8001cac:	6093      	str	r3, [r2, #8]
 8001cae:	e080      	b.n	8001db2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	015a      	lsls	r2, r3, #5
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	2b08      	cmp	r3, #8
 8001cc4:	d134      	bne.n	8001d30 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	015a      	lsls	r2, r3, #5
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4413      	add	r3, r2
 8001cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	0151      	lsls	r1, r2, #5
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	440a      	add	r2, r1
 8001cdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ce0:	f043 0302 	orr.w	r3, r3, #2
 8001ce4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	4613      	mov	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	440b      	add	r3, r1
 8001cf4:	335d      	adds	r3, #93	; 0x5d
 8001cf6:	2205      	movs	r2, #5
 8001cf8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	015a      	lsls	r2, r3, #5
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4413      	add	r3, r2
 8001d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d06:	461a      	mov	r2, r3
 8001d08:	2310      	movs	r3, #16
 8001d0a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	015a      	lsls	r2, r3, #5
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4413      	add	r3, r2
 8001d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d18:	461a      	mov	r2, r3
 8001d1a:	2308      	movs	r3, #8
 8001d1c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f003 f95e 	bl	8004fea <USB_HC_Halt>
 8001d2e:	e040      	b.n	8001db2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	015a      	lsls	r2, r3, #5
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4413      	add	r3, r2
 8001d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d46:	d134      	bne.n	8001db2 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	015a      	lsls	r2, r3, #5
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	4413      	add	r3, r2
 8001d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	0151      	lsls	r1, r2, #5
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	440a      	add	r2, r1
 8001d5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d62:	f043 0302 	orr.w	r3, r3, #2
 8001d66:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	4611      	mov	r1, r2
 8001d72:	4618      	mov	r0, r3
 8001d74:	f003 f939 	bl	8004fea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	015a      	lsls	r2, r3, #5
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	4413      	add	r3, r2
 8001d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d84:	461a      	mov	r2, r3
 8001d86:	2310      	movs	r3, #16
 8001d88:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	440b      	add	r3, r1
 8001d98:	335d      	adds	r3, #93	; 0x5d
 8001d9a:	2208      	movs	r2, #8
 8001d9c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	015a      	lsls	r2, r3, #5
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	4413      	add	r3, r2
 8001da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001daa:	461a      	mov	r2, r3
 8001dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001db0:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	015a      	lsls	r2, r3, #5
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4413      	add	r3, r2
 8001dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dc8:	d122      	bne.n	8001e10 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	015a      	lsls	r2, r3, #5
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	0151      	lsls	r1, r2, #5
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	440a      	add	r2, r1
 8001de0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001de4:	f043 0302 	orr.w	r3, r3, #2
 8001de8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	4611      	mov	r1, r2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f003 f8f8 	bl	8004fea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	015a      	lsls	r2, r3, #5
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	4413      	add	r3, r2
 8001e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e06:	461a      	mov	r2, r3
 8001e08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e0c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001e0e:	e300      	b.n	8002412 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	015a      	lsls	r2, r3, #5
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	4413      	add	r3, r2
 8001e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	f040 80fd 	bne.w	8002022 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d01b      	beq.n	8001e68 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	440b      	add	r3, r1
 8001e3e:	3348      	adds	r3, #72	; 0x48
 8001e40:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	0159      	lsls	r1, r3, #5
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	440b      	add	r3, r1
 8001e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001e54:	1ad1      	subs	r1, r2, r3
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	4403      	add	r3, r0
 8001e64:	334c      	adds	r3, #76	; 0x4c
 8001e66:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	440b      	add	r3, r1
 8001e76:	335d      	adds	r3, #93	; 0x5d
 8001e78:	2201      	movs	r2, #1
 8001e7a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	4613      	mov	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	440b      	add	r3, r1
 8001e8a:	3358      	adds	r3, #88	; 0x58
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	015a      	lsls	r2, r3, #5
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	4413      	add	r3, r2
 8001e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	440b      	add	r3, r1
 8001eb0:	333f      	adds	r3, #63	; 0x3f
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00a      	beq.n	8001ece <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	440b      	add	r3, r1
 8001ec6:	333f      	adds	r3, #63	; 0x3f
 8001ec8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d121      	bne.n	8001f12 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	015a      	lsls	r2, r3, #5
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	0151      	lsls	r1, r2, #5
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	440a      	add	r2, r1
 8001ee4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ee8:	f043 0302 	orr.w	r3, r3, #2
 8001eec:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f003 f876 	bl	8004fea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	015a      	lsls	r2, r3, #5
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4413      	add	r3, r2
 8001f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	2310      	movs	r3, #16
 8001f0e:	6093      	str	r3, [r2, #8]
 8001f10:	e070      	b.n	8001ff4 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	440b      	add	r3, r1
 8001f20:	333f      	adds	r3, #63	; 0x3f
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d12a      	bne.n	8001f7e <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	015a      	lsls	r2, r3, #5
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4413      	add	r3, r2
 8001f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	0151      	lsls	r1, r2, #5
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	440a      	add	r2, r1
 8001f3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f46:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	440b      	add	r3, r1
 8001f56:	335c      	adds	r3, #92	; 0x5c
 8001f58:	2201      	movs	r2, #1
 8001f5a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	b2d8      	uxtb	r0, r3
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	4613      	mov	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	440b      	add	r3, r1
 8001f6e:	335c      	adds	r3, #92	; 0x5c
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	4601      	mov	r1, r0
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f005 f9da 	bl	8007330 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001f7c:	e03a      	b.n	8001ff4 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	440b      	add	r3, r1
 8001f8c:	333f      	adds	r3, #63	; 0x3f
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d12f      	bne.n	8001ff4 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	440b      	add	r3, r1
 8001fa2:	335c      	adds	r3, #92	; 0x5c
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	440b      	add	r3, r1
 8001fb6:	3350      	adds	r3, #80	; 0x50
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	f083 0301 	eor.w	r3, r3, #1
 8001fbe:	b2d8      	uxtb	r0, r3
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4413      	add	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	440b      	add	r3, r1
 8001fce:	3350      	adds	r3, #80	; 0x50
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	b2d8      	uxtb	r0, r3
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	440b      	add	r3, r1
 8001fe6:	335c      	adds	r3, #92	; 0x5c
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	4601      	mov	r1, r0
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f005 f99e 	bl	8007330 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	440b      	add	r3, r1
 8002002:	3350      	adds	r3, #80	; 0x50
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	f083 0301 	eor.w	r3, r3, #1
 800200a:	b2d8      	uxtb	r0, r3
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	440b      	add	r3, r1
 800201a:	3350      	adds	r3, #80	; 0x50
 800201c:	4602      	mov	r2, r0
 800201e:	701a      	strb	r2, [r3, #0]
}
 8002020:	e1f7      	b.n	8002412 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	015a      	lsls	r2, r3, #5
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4413      	add	r3, r2
 800202a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b02      	cmp	r3, #2
 8002036:	f040 811a 	bne.w	800226e <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	015a      	lsls	r2, r3, #5
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4413      	add	r3, r2
 8002042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	0151      	lsls	r1, r2, #5
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	440a      	add	r2, r1
 8002050:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002054:	f023 0302 	bic.w	r3, r3, #2
 8002058:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	440b      	add	r3, r1
 8002068:	335d      	adds	r3, #93	; 0x5d
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d10a      	bne.n	8002086 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	4613      	mov	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	440b      	add	r3, r1
 800207e:	335c      	adds	r3, #92	; 0x5c
 8002080:	2201      	movs	r2, #1
 8002082:	701a      	strb	r2, [r3, #0]
 8002084:	e0d9      	b.n	800223a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	440b      	add	r3, r1
 8002094:	335d      	adds	r3, #93	; 0x5d
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b05      	cmp	r3, #5
 800209a:	d10a      	bne.n	80020b2 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	440b      	add	r3, r1
 80020aa:	335c      	adds	r3, #92	; 0x5c
 80020ac:	2205      	movs	r2, #5
 80020ae:	701a      	strb	r2, [r3, #0]
 80020b0:	e0c3      	b.n	800223a <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	4613      	mov	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	440b      	add	r3, r1
 80020c0:	335d      	adds	r3, #93	; 0x5d
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b06      	cmp	r3, #6
 80020c6:	d00a      	beq.n	80020de <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	4613      	mov	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	440b      	add	r3, r1
 80020d6:	335d      	adds	r3, #93	; 0x5d
 80020d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80020da:	2b08      	cmp	r3, #8
 80020dc:	d156      	bne.n	800218c <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	440b      	add	r3, r1
 80020ec:	3358      	adds	r3, #88	; 0x58
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	1c59      	adds	r1, r3, #1
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4403      	add	r3, r0
 8002100:	3358      	adds	r3, #88	; 0x58
 8002102:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	440b      	add	r3, r1
 8002112:	3358      	adds	r3, #88	; 0x58
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2b03      	cmp	r3, #3
 8002118:	d914      	bls.n	8002144 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	440b      	add	r3, r1
 8002128:	3358      	adds	r3, #88	; 0x58
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	440b      	add	r3, r1
 800213c:	335c      	adds	r3, #92	; 0x5c
 800213e:	2204      	movs	r2, #4
 8002140:	701a      	strb	r2, [r3, #0]
 8002142:	e009      	b.n	8002158 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	440b      	add	r3, r1
 8002152:	335c      	adds	r3, #92	; 0x5c
 8002154:	2202      	movs	r2, #2
 8002156:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4413      	add	r3, r2
 8002160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800216e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002176:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	015a      	lsls	r2, r3, #5
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	4413      	add	r3, r2
 8002180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002184:	461a      	mov	r2, r3
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	e056      	b.n	800223a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	4613      	mov	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	440b      	add	r3, r1
 800219a:	335d      	adds	r3, #93	; 0x5d
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b03      	cmp	r3, #3
 80021a0:	d123      	bne.n	80021ea <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	440b      	add	r3, r1
 80021b0:	335c      	adds	r3, #92	; 0x5c
 80021b2:	2202      	movs	r2, #2
 80021b4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	015a      	lsls	r2, r3, #5
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4413      	add	r3, r2
 80021be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021cc:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021d4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e2:	461a      	mov	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	e027      	b.n	800223a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	440b      	add	r3, r1
 80021f8:	335d      	adds	r3, #93	; 0x5d
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b07      	cmp	r3, #7
 80021fe:	d11c      	bne.n	800223a <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	4613      	mov	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	440b      	add	r3, r1
 800220e:	3358      	adds	r3, #88	; 0x58
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	1c59      	adds	r1, r3, #1
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	4403      	add	r3, r0
 8002222:	3358      	adds	r3, #88	; 0x58
 8002224:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	440b      	add	r3, r1
 8002234:	335c      	adds	r3, #92	; 0x5c
 8002236:	2204      	movs	r2, #4
 8002238:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	015a      	lsls	r2, r3, #5
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4413      	add	r3, r2
 8002242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002246:	461a      	mov	r2, r3
 8002248:	2302      	movs	r3, #2
 800224a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	b2d8      	uxtb	r0, r3
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	4613      	mov	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	440b      	add	r3, r1
 800225e:	335c      	adds	r3, #92	; 0x5c
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	461a      	mov	r2, r3
 8002264:	4601      	mov	r1, r0
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f005 f862 	bl	8007330 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800226c:	e0d1      	b.n	8002412 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	015a      	lsls	r2, r3, #5
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4413      	add	r3, r2
 8002276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002280:	2b80      	cmp	r3, #128	; 0x80
 8002282:	d13e      	bne.n	8002302 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	015a      	lsls	r2, r3, #5
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	4413      	add	r3, r2
 800228c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	0151      	lsls	r1, r2, #5
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	440a      	add	r2, r1
 800229a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800229e:	f043 0302 	orr.w	r3, r3, #2
 80022a2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	440b      	add	r3, r1
 80022b2:	3358      	adds	r3, #88	; 0x58
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	1c59      	adds	r1, r3, #1
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	4403      	add	r3, r0
 80022c6:	3358      	adds	r3, #88	; 0x58
 80022c8:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	440b      	add	r3, r1
 80022d8:	335d      	adds	r3, #93	; 0x5d
 80022da:	2206      	movs	r2, #6
 80022dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f002 fe7e 	bl	8004fea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	015a      	lsls	r2, r3, #5
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fa:	461a      	mov	r2, r3
 80022fc:	2380      	movs	r3, #128	; 0x80
 80022fe:	6093      	str	r3, [r2, #8]
}
 8002300:	e087      	b.n	8002412 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	015a      	lsls	r2, r3, #5
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	4413      	add	r3, r2
 800230a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 0310 	and.w	r3, r3, #16
 8002314:	2b10      	cmp	r3, #16
 8002316:	d17c      	bne.n	8002412 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	4613      	mov	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	440b      	add	r3, r1
 8002326:	333f      	adds	r3, #63	; 0x3f
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b03      	cmp	r3, #3
 800232c:	d122      	bne.n	8002374 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	440b      	add	r3, r1
 800233c:	3358      	adds	r3, #88	; 0x58
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	015a      	lsls	r2, r3, #5
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	4413      	add	r3, r2
 800234a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	0151      	lsls	r1, r2, #5
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	440a      	add	r2, r1
 8002358:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800235c:	f043 0302 	orr.w	r3, r3, #2
 8002360:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	4611      	mov	r1, r2
 800236c:	4618      	mov	r0, r3
 800236e:	f002 fe3c 	bl	8004fea <USB_HC_Halt>
 8002372:	e045      	b.n	8002400 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	440b      	add	r3, r1
 8002382:	333f      	adds	r3, #63	; 0x3f
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00a      	beq.n	80023a0 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	4613      	mov	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	440b      	add	r3, r1
 8002398:	333f      	adds	r3, #63	; 0x3f
 800239a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800239c:	2b02      	cmp	r3, #2
 800239e:	d12f      	bne.n	8002400 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	4613      	mov	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	440b      	add	r3, r1
 80023ae:	3358      	adds	r3, #88	; 0x58
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d121      	bne.n	8002400 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	440b      	add	r3, r1
 80023ca:	335d      	adds	r3, #93	; 0x5d
 80023cc:	2203      	movs	r2, #3
 80023ce:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	015a      	lsls	r2, r3, #5
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	4413      	add	r3, r2
 80023d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	0151      	lsls	r1, r2, #5
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	440a      	add	r2, r1
 80023e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023ea:	f043 0302 	orr.w	r3, r3, #2
 80023ee:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	4611      	mov	r1, r2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f002 fdf5 	bl	8004fea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	015a      	lsls	r2, r3, #5
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4413      	add	r3, r2
 8002408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240c:	461a      	mov	r2, r3
 800240e:	2310      	movs	r3, #16
 8002410:	6093      	str	r3, [r2, #8]
}
 8002412:	bf00      	nop
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b086      	sub	sp, #24
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	460b      	mov	r3, r1
 8002424:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002430:	78fb      	ldrb	r3, [r7, #3]
 8002432:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	015a      	lsls	r2, r3, #5
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	4413      	add	r3, r2
 800243c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 0304 	and.w	r3, r3, #4
 8002446:	2b04      	cmp	r3, #4
 8002448:	d119      	bne.n	800247e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	015a      	lsls	r2, r3, #5
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4413      	add	r3, r2
 8002452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002456:	461a      	mov	r2, r3
 8002458:	2304      	movs	r3, #4
 800245a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	015a      	lsls	r2, r3, #5
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	4413      	add	r3, r2
 8002464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	0151      	lsls	r1, r2, #5
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	440a      	add	r2, r1
 8002472:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002476:	f043 0302 	orr.w	r3, r3, #2
 800247a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800247c:	e33e      	b.n	8002afc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	015a      	lsls	r2, r3, #5
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4413      	add	r3, r2
 8002486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 0320 	and.w	r3, r3, #32
 8002490:	2b20      	cmp	r3, #32
 8002492:	d141      	bne.n	8002518 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	015a      	lsls	r2, r3, #5
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4413      	add	r3, r2
 800249c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a0:	461a      	mov	r2, r3
 80024a2:	2320      	movs	r3, #32
 80024a4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	440b      	add	r3, r1
 80024b4:	333d      	adds	r3, #61	; 0x3d
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	f040 831f 	bne.w	8002afc <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	440b      	add	r3, r1
 80024cc:	333d      	adds	r3, #61	; 0x3d
 80024ce:	2200      	movs	r2, #0
 80024d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	440b      	add	r3, r1
 80024e0:	335c      	adds	r3, #92	; 0x5c
 80024e2:	2202      	movs	r2, #2
 80024e4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	015a      	lsls	r2, r3, #5
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4413      	add	r3, r2
 80024ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	0151      	lsls	r1, r2, #5
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	440a      	add	r2, r1
 80024fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002500:	f043 0302 	orr.w	r3, r3, #2
 8002504:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	4611      	mov	r1, r2
 8002510:	4618      	mov	r0, r3
 8002512:	f002 fd6a 	bl	8004fea <USB_HC_Halt>
}
 8002516:	e2f1      	b.n	8002afc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	015a      	lsls	r2, r3, #5
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4413      	add	r3, r2
 8002520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252a:	2b40      	cmp	r3, #64	; 0x40
 800252c:	d13f      	bne.n	80025ae <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	4613      	mov	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	440b      	add	r3, r1
 800253c:	335d      	adds	r3, #93	; 0x5d
 800253e:	2204      	movs	r2, #4
 8002540:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	4613      	mov	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	440b      	add	r3, r1
 8002550:	333d      	adds	r3, #61	; 0x3d
 8002552:	2201      	movs	r2, #1
 8002554:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	4613      	mov	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	440b      	add	r3, r1
 8002564:	3358      	adds	r3, #88	; 0x58
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	015a      	lsls	r2, r3, #5
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4413      	add	r3, r2
 8002572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	0151      	lsls	r1, r2, #5
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	440a      	add	r2, r1
 8002580:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002584:	f043 0302 	orr.w	r3, r3, #2
 8002588:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	4611      	mov	r1, r2
 8002594:	4618      	mov	r0, r3
 8002596:	f002 fd28 	bl	8004fea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	015a      	lsls	r2, r3, #5
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4413      	add	r3, r2
 80025a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a6:	461a      	mov	r2, r3
 80025a8:	2340      	movs	r3, #64	; 0x40
 80025aa:	6093      	str	r3, [r2, #8]
}
 80025ac:	e2a6      	b.n	8002afc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	015a      	lsls	r2, r3, #5
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025c4:	d122      	bne.n	800260c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	015a      	lsls	r2, r3, #5
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	4413      	add	r3, r2
 80025ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	0151      	lsls	r1, r2, #5
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	440a      	add	r2, r1
 80025dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025e0:	f043 0302 	orr.w	r3, r3, #2
 80025e4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	4611      	mov	r1, r2
 80025f0:	4618      	mov	r0, r3
 80025f2:	f002 fcfa 	bl	8004fea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	015a      	lsls	r2, r3, #5
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	4413      	add	r3, r2
 80025fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002602:	461a      	mov	r2, r3
 8002604:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002608:	6093      	str	r3, [r2, #8]
}
 800260a:	e277      	b.n	8002afc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	015a      	lsls	r2, r3, #5
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4413      	add	r3, r2
 8002614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b01      	cmp	r3, #1
 8002620:	d135      	bne.n	800268e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	4613      	mov	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	440b      	add	r3, r1
 8002630:	3358      	adds	r3, #88	; 0x58
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	015a      	lsls	r2, r3, #5
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4413      	add	r3, r2
 800263e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	0151      	lsls	r1, r2, #5
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	440a      	add	r2, r1
 800264c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002650:	f043 0302 	orr.w	r3, r3, #2
 8002654:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	4611      	mov	r1, r2
 8002660:	4618      	mov	r0, r3
 8002662:	f002 fcc2 	bl	8004fea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4413      	add	r3, r2
 800266e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002672:	461a      	mov	r2, r3
 8002674:	2301      	movs	r3, #1
 8002676:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4613      	mov	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	440b      	add	r3, r1
 8002686:	335d      	adds	r3, #93	; 0x5d
 8002688:	2201      	movs	r2, #1
 800268a:	701a      	strb	r2, [r3, #0]
}
 800268c:	e236      	b.n	8002afc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	015a      	lsls	r2, r3, #5
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4413      	add	r3, r2
 8002696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 0308 	and.w	r3, r3, #8
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	d12b      	bne.n	80026fc <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	015a      	lsls	r2, r3, #5
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b0:	461a      	mov	r2, r3
 80026b2:	2308      	movs	r3, #8
 80026b4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	015a      	lsls	r2, r3, #5
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	4413      	add	r3, r2
 80026be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	0151      	lsls	r1, r2, #5
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	440a      	add	r2, r1
 80026cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026d0:	f043 0302 	orr.w	r3, r3, #2
 80026d4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	4611      	mov	r1, r2
 80026e0:	4618      	mov	r0, r3
 80026e2:	f002 fc82 	bl	8004fea <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	440b      	add	r3, r1
 80026f4:	335d      	adds	r3, #93	; 0x5d
 80026f6:	2205      	movs	r2, #5
 80026f8:	701a      	strb	r2, [r3, #0]
}
 80026fa:	e1ff      	b.n	8002afc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4413      	add	r3, r2
 8002704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 0310 	and.w	r3, r3, #16
 800270e:	2b10      	cmp	r3, #16
 8002710:	d155      	bne.n	80027be <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	440b      	add	r3, r1
 8002720:	3358      	adds	r3, #88	; 0x58
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	440b      	add	r3, r1
 8002734:	335d      	adds	r3, #93	; 0x5d
 8002736:	2203      	movs	r2, #3
 8002738:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	440b      	add	r3, r1
 8002748:	333d      	adds	r3, #61	; 0x3d
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d114      	bne.n	800277a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	4613      	mov	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	440b      	add	r3, r1
 800275e:	333c      	adds	r3, #60	; 0x3c
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d109      	bne.n	800277a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	440b      	add	r3, r1
 8002774:	333d      	adds	r3, #61	; 0x3d
 8002776:	2201      	movs	r2, #1
 8002778:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	015a      	lsls	r2, r3, #5
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	4413      	add	r3, r2
 8002782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	0151      	lsls	r1, r2, #5
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	440a      	add	r2, r1
 8002790:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002794:	f043 0302 	orr.w	r3, r3, #2
 8002798:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	4611      	mov	r1, r2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f002 fc20 	bl	8004fea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	015a      	lsls	r2, r3, #5
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4413      	add	r3, r2
 80027b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b6:	461a      	mov	r2, r3
 80027b8:	2310      	movs	r3, #16
 80027ba:	6093      	str	r3, [r2, #8]
}
 80027bc:	e19e      	b.n	8002afc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	015a      	lsls	r2, r3, #5
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	4413      	add	r3, r2
 80027c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d0:	2b80      	cmp	r3, #128	; 0x80
 80027d2:	d12b      	bne.n	800282c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	015a      	lsls	r2, r3, #5
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4413      	add	r3, r2
 80027dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	0151      	lsls	r1, r2, #5
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	440a      	add	r2, r1
 80027ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027ee:	f043 0302 	orr.w	r3, r3, #2
 80027f2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	4611      	mov	r1, r2
 80027fe:	4618      	mov	r0, r3
 8002800:	f002 fbf3 	bl	8004fea <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	440b      	add	r3, r1
 8002812:	335d      	adds	r3, #93	; 0x5d
 8002814:	2206      	movs	r2, #6
 8002816:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4413      	add	r3, r2
 8002820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002824:	461a      	mov	r2, r3
 8002826:	2380      	movs	r3, #128	; 0x80
 8002828:	6093      	str	r3, [r2, #8]
}
 800282a:	e167      	b.n	8002afc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	4413      	add	r3, r2
 8002834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002842:	d135      	bne.n	80028b0 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	015a      	lsls	r2, r3, #5
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4413      	add	r3, r2
 800284c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	0151      	lsls	r1, r2, #5
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	440a      	add	r2, r1
 800285a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800285e:	f043 0302 	orr.w	r3, r3, #2
 8002862:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	4611      	mov	r1, r2
 800286e:	4618      	mov	r0, r3
 8002870:	f002 fbbb 	bl	8004fea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	015a      	lsls	r2, r3, #5
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	4413      	add	r3, r2
 800287c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002880:	461a      	mov	r2, r3
 8002882:	2310      	movs	r3, #16
 8002884:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	015a      	lsls	r2, r3, #5
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	4413      	add	r3, r2
 800288e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002892:	461a      	mov	r2, r3
 8002894:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002898:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	440b      	add	r3, r1
 80028a8:	335d      	adds	r3, #93	; 0x5d
 80028aa:	2208      	movs	r2, #8
 80028ac:	701a      	strb	r2, [r3, #0]
}
 80028ae:	e125      	b.n	8002afc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	f040 811a 	bne.w	8002afc <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	015a      	lsls	r2, r3, #5
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	4413      	add	r3, r2
 80028d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	0151      	lsls	r1, r2, #5
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	440a      	add	r2, r1
 80028de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028e2:	f023 0302 	bic.w	r3, r3, #2
 80028e6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	440b      	add	r3, r1
 80028f6:	335d      	adds	r3, #93	; 0x5d
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d137      	bne.n	800296e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	440b      	add	r3, r1
 800290c:	335c      	adds	r3, #92	; 0x5c
 800290e:	2201      	movs	r2, #1
 8002910:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	440b      	add	r3, r1
 8002920:	333f      	adds	r3, #63	; 0x3f
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b02      	cmp	r3, #2
 8002926:	d00b      	beq.n	8002940 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	4613      	mov	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	440b      	add	r3, r1
 8002936:	333f      	adds	r3, #63	; 0x3f
 8002938:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800293a:	2b03      	cmp	r3, #3
 800293c:	f040 80c5 	bne.w	8002aca <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	4613      	mov	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	440b      	add	r3, r1
 800294e:	3351      	adds	r3, #81	; 0x51
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	f083 0301 	eor.w	r3, r3, #1
 8002956:	b2d8      	uxtb	r0, r3
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	440b      	add	r3, r1
 8002966:	3351      	adds	r3, #81	; 0x51
 8002968:	4602      	mov	r2, r0
 800296a:	701a      	strb	r2, [r3, #0]
 800296c:	e0ad      	b.n	8002aca <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	4613      	mov	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	440b      	add	r3, r1
 800297c:	335d      	adds	r3, #93	; 0x5d
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b03      	cmp	r3, #3
 8002982:	d10a      	bne.n	800299a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	4613      	mov	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	440b      	add	r3, r1
 8002992:	335c      	adds	r3, #92	; 0x5c
 8002994:	2202      	movs	r2, #2
 8002996:	701a      	strb	r2, [r3, #0]
 8002998:	e097      	b.n	8002aca <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	4613      	mov	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	440b      	add	r3, r1
 80029a8:	335d      	adds	r3, #93	; 0x5d
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	d10a      	bne.n	80029c6 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	4613      	mov	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	440b      	add	r3, r1
 80029be:	335c      	adds	r3, #92	; 0x5c
 80029c0:	2202      	movs	r2, #2
 80029c2:	701a      	strb	r2, [r3, #0]
 80029c4:	e081      	b.n	8002aca <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	440b      	add	r3, r1
 80029d4:	335d      	adds	r3, #93	; 0x5d
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b05      	cmp	r3, #5
 80029da:	d10a      	bne.n	80029f2 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	4613      	mov	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	440b      	add	r3, r1
 80029ea:	335c      	adds	r3, #92	; 0x5c
 80029ec:	2205      	movs	r2, #5
 80029ee:	701a      	strb	r2, [r3, #0]
 80029f0:	e06b      	b.n	8002aca <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	4613      	mov	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	440b      	add	r3, r1
 8002a00:	335d      	adds	r3, #93	; 0x5d
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b06      	cmp	r3, #6
 8002a06:	d00a      	beq.n	8002a1e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	440b      	add	r3, r1
 8002a16:	335d      	adds	r3, #93	; 0x5d
 8002a18:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a1a:	2b08      	cmp	r3, #8
 8002a1c:	d155      	bne.n	8002aca <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	440b      	add	r3, r1
 8002a2c:	3358      	adds	r3, #88	; 0x58
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	1c59      	adds	r1, r3, #1
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	4613      	mov	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	4403      	add	r3, r0
 8002a40:	3358      	adds	r3, #88	; 0x58
 8002a42:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	440b      	add	r3, r1
 8002a52:	3358      	adds	r3, #88	; 0x58
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d914      	bls.n	8002a84 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	440b      	add	r3, r1
 8002a68:	3358      	adds	r3, #88	; 0x58
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	4613      	mov	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	440b      	add	r3, r1
 8002a7c:	335c      	adds	r3, #92	; 0x5c
 8002a7e:	2204      	movs	r2, #4
 8002a80:	701a      	strb	r2, [r3, #0]
 8002a82:	e009      	b.n	8002a98 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	440b      	add	r3, r1
 8002a92:	335c      	adds	r3, #92	; 0x5c
 8002a94:	2202      	movs	r2, #2
 8002a96:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	015a      	lsls	r2, r3, #5
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002aae:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ab6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	015a      	lsls	r2, r3, #5
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	4413      	add	r3, r2
 8002ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	015a      	lsls	r2, r3, #5
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	2302      	movs	r3, #2
 8002ada:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	b2d8      	uxtb	r0, r3
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	440b      	add	r3, r1
 8002aee:	335c      	adds	r3, #92	; 0x5c
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	4601      	mov	r1, r0
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f004 fc1a 	bl	8007330 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002afc:	bf00      	nop
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08a      	sub	sp, #40	; 0x28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	f003 030f 	and.w	r3, r3, #15
 8002b24:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	0c5b      	lsrs	r3, r3, #17
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	091b      	lsrs	r3, r3, #4
 8002b34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b38:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d003      	beq.n	8002b48 <HCD_RXQLVL_IRQHandler+0x44>
 8002b40:	2b05      	cmp	r3, #5
 8002b42:	f000 8082 	beq.w	8002c4a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002b46:	e083      	b.n	8002c50 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d07f      	beq.n	8002c4e <HCD_RXQLVL_IRQHandler+0x14a>
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4613      	mov	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	440b      	add	r3, r1
 8002b5c:	3344      	adds	r3, #68	; 0x44
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d074      	beq.n	8002c4e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6818      	ldr	r0, [r3, #0]
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	440b      	add	r3, r1
 8002b76:	3344      	adds	r3, #68	; 0x44
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	b292      	uxth	r2, r2
 8002b7e:	4619      	mov	r1, r3
 8002b80:	f001 fdd3 	bl	800472a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	440b      	add	r3, r1
 8002b92:	3344      	adds	r3, #68	; 0x44
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	18d1      	adds	r1, r2, r3
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	4403      	add	r3, r0
 8002ba8:	3344      	adds	r3, #68	; 0x44
 8002baa:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	440b      	add	r3, r1
 8002bba:	334c      	adds	r3, #76	; 0x4c
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	18d1      	adds	r1, r2, r3
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	4403      	add	r3, r0
 8002bd0:	334c      	adds	r3, #76	; 0x4c
 8002bd2:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	015a      	lsls	r2, r3, #5
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	4413      	add	r3, r2
 8002bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be0:	691a      	ldr	r2, [r3, #16]
 8002be2:	4b1d      	ldr	r3, [pc, #116]	; (8002c58 <HCD_RXQLVL_IRQHandler+0x154>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d031      	beq.n	8002c4e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	015a      	lsls	r2, r3, #5
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c00:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c08:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	015a      	lsls	r2, r3, #5
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	4413      	add	r3, r2
 8002c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c16:	461a      	mov	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	440b      	add	r3, r1
 8002c2a:	3350      	adds	r3, #80	; 0x50
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	f083 0301 	eor.w	r3, r3, #1
 8002c32:	b2d8      	uxtb	r0, r3
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	440b      	add	r3, r1
 8002c42:	3350      	adds	r3, #80	; 0x50
 8002c44:	4602      	mov	r2, r0
 8002c46:	701a      	strb	r2, [r3, #0]
      break;
 8002c48:	e001      	b.n	8002c4e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002c4a:	bf00      	nop
 8002c4c:	e000      	b.n	8002c50 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002c4e:	bf00      	nop
  }
}
 8002c50:	bf00      	nop
 8002c52:	3728      	adds	r7, #40	; 0x28
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	1ff80000 	.word	0x1ff80000

08002c5c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c88:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d10b      	bne.n	8002cac <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d102      	bne.n	8002ca4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f004 fb2a 	bl	80072f8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	f043 0302 	orr.w	r3, r3, #2
 8002caa:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f003 0308 	and.w	r3, r3, #8
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d132      	bne.n	8002d1c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	f043 0308 	orr.w	r3, r3, #8
 8002cbc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d126      	bne.n	8002d16 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d113      	bne.n	8002cf8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002cd6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cda:	d106      	bne.n	8002cea <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2102      	movs	r1, #2
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f001 fe5c 	bl	80049a0 <USB_InitFSLSPClkSel>
 8002ce8:	e011      	b.n	8002d0e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2101      	movs	r1, #1
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f001 fe55 	bl	80049a0 <USB_InitFSLSPClkSel>
 8002cf6:	e00a      	b.n	8002d0e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d106      	bne.n	8002d0e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d06:	461a      	mov	r2, r3
 8002d08:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002d0c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f004 fb1c 	bl	800734c <HAL_HCD_PortEnabled_Callback>
 8002d14:	e002      	b.n	8002d1c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f004 fb26 	bl	8007368 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f003 0320 	and.w	r3, r3, #32
 8002d22:	2b20      	cmp	r3, #32
 8002d24:	d103      	bne.n	8002d2e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	f043 0320 	orr.w	r3, r3, #32
 8002d2c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d34:	461a      	mov	r2, r3
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	6013      	str	r3, [r2, #0]
}
 8002d3a:	bf00      	nop
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e11f      	b.n	8002f96 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d106      	bne.n	8002d70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7fd fe04 	bl	8000978 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2224      	movs	r2, #36	; 0x24
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0201 	bic.w	r2, r2, #1
 8002d86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002da6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002da8:	f001 f9de 	bl	8004168 <HAL_RCC_GetPCLK1Freq>
 8002dac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	4a7b      	ldr	r2, [pc, #492]	; (8002fa0 <HAL_I2C_Init+0x25c>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d807      	bhi.n	8002dc8 <HAL_I2C_Init+0x84>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4a7a      	ldr	r2, [pc, #488]	; (8002fa4 <HAL_I2C_Init+0x260>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	bf94      	ite	ls
 8002dc0:	2301      	movls	r3, #1
 8002dc2:	2300      	movhi	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	e006      	b.n	8002dd6 <HAL_I2C_Init+0x92>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4a77      	ldr	r2, [pc, #476]	; (8002fa8 <HAL_I2C_Init+0x264>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	bf94      	ite	ls
 8002dd0:	2301      	movls	r3, #1
 8002dd2:	2300      	movhi	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e0db      	b.n	8002f96 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	4a72      	ldr	r2, [pc, #456]	; (8002fac <HAL_I2C_Init+0x268>)
 8002de2:	fba2 2303 	umull	r2, r3, r2, r3
 8002de6:	0c9b      	lsrs	r3, r3, #18
 8002de8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	4a64      	ldr	r2, [pc, #400]	; (8002fa0 <HAL_I2C_Init+0x25c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d802      	bhi.n	8002e18 <HAL_I2C_Init+0xd4>
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	3301      	adds	r3, #1
 8002e16:	e009      	b.n	8002e2c <HAL_I2C_Init+0xe8>
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e1e:	fb02 f303 	mul.w	r3, r2, r3
 8002e22:	4a63      	ldr	r2, [pc, #396]	; (8002fb0 <HAL_I2C_Init+0x26c>)
 8002e24:	fba2 2303 	umull	r2, r3, r2, r3
 8002e28:	099b      	lsrs	r3, r3, #6
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6812      	ldr	r2, [r2, #0]
 8002e30:	430b      	orrs	r3, r1
 8002e32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	4956      	ldr	r1, [pc, #344]	; (8002fa0 <HAL_I2C_Init+0x25c>)
 8002e48:	428b      	cmp	r3, r1
 8002e4a:	d80d      	bhi.n	8002e68 <HAL_I2C_Init+0x124>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	1e59      	subs	r1, r3, #1
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	bf38      	it	cc
 8002e64:	2304      	movcc	r3, #4
 8002e66:	e04f      	b.n	8002f08 <HAL_I2C_Init+0x1c4>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d111      	bne.n	8002e94 <HAL_I2C_Init+0x150>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	1e58      	subs	r0, r3, #1
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6859      	ldr	r1, [r3, #4]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	440b      	add	r3, r1
 8002e7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e82:	3301      	adds	r3, #1
 8002e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	bf0c      	ite	eq
 8002e8c:	2301      	moveq	r3, #1
 8002e8e:	2300      	movne	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	e012      	b.n	8002eba <HAL_I2C_Init+0x176>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	1e58      	subs	r0, r3, #1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6859      	ldr	r1, [r3, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	0099      	lsls	r1, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eaa:	3301      	adds	r3, #1
 8002eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	bf0c      	ite	eq
 8002eb4:	2301      	moveq	r3, #1
 8002eb6:	2300      	movne	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_I2C_Init+0x17e>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e022      	b.n	8002f08 <HAL_I2C_Init+0x1c4>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10e      	bne.n	8002ee8 <HAL_I2C_Init+0x1a4>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	1e58      	subs	r0, r3, #1
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6859      	ldr	r1, [r3, #4]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	440b      	add	r3, r1
 8002ed8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002edc:	3301      	adds	r3, #1
 8002ede:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ee6:	e00f      	b.n	8002f08 <HAL_I2C_Init+0x1c4>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	1e58      	subs	r0, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6859      	ldr	r1, [r3, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	0099      	lsls	r1, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002efe:	3301      	adds	r3, #1
 8002f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	6809      	ldr	r1, [r1, #0]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69da      	ldr	r2, [r3, #28]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	6911      	ldr	r1, [r2, #16]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	68d2      	ldr	r2, [r2, #12]
 8002f42:	4311      	orrs	r1, r2
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6812      	ldr	r2, [r2, #0]
 8002f48:	430b      	orrs	r3, r1
 8002f4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695a      	ldr	r2, [r3, #20]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0201 	orr.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2220      	movs	r2, #32
 8002f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	000186a0 	.word	0x000186a0
 8002fa4:	001e847f 	.word	0x001e847f
 8002fa8:	003d08ff 	.word	0x003d08ff
 8002fac:	431bde83 	.word	0x431bde83
 8002fb0:	10624dd3 	.word	0x10624dd3

08002fb4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b088      	sub	sp, #32
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e128      	b.n	8003218 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d109      	bne.n	8002fe6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a90      	ldr	r2, [pc, #576]	; (8003220 <HAL_I2S_Init+0x26c>)
 8002fde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7fd fd11 	bl	8000a08 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2202      	movs	r2, #2
 8002fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002ffc:	f023 030f 	bic.w	r3, r3, #15
 8003000:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2202      	movs	r2, #2
 8003008:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	2b02      	cmp	r3, #2
 8003010:	d060      	beq.n	80030d4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d102      	bne.n	8003020 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800301a:	2310      	movs	r3, #16
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	e001      	b.n	8003024 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003020:	2320      	movs	r3, #32
 8003022:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	2b20      	cmp	r3, #32
 800302a:	d802      	bhi.n	8003032 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003032:	2001      	movs	r0, #1
 8003034:	f001 f98e 	bl	8004354 <HAL_RCCEx_GetPeriphCLKFreq>
 8003038:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003042:	d125      	bne.n	8003090 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d010      	beq.n	800306e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	fbb2 f2f3 	udiv	r2, r2, r3
 8003056:	4613      	mov	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	461a      	mov	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	fbb2 f3f3 	udiv	r3, r2, r3
 8003068:	3305      	adds	r3, #5
 800306a:	613b      	str	r3, [r7, #16]
 800306c:	e01f      	b.n	80030ae <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	fbb2 f2f3 	udiv	r2, r2, r3
 8003078:	4613      	mov	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	461a      	mov	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	fbb2 f3f3 	udiv	r3, r2, r3
 800308a:	3305      	adds	r3, #5
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	e00e      	b.n	80030ae <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	fbb2 f2f3 	udiv	r2, r2, r3
 8003098:	4613      	mov	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	461a      	mov	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030aa:	3305      	adds	r3, #5
 80030ac:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	4a5c      	ldr	r2, [pc, #368]	; (8003224 <HAL_I2S_Init+0x270>)
 80030b2:	fba2 2303 	umull	r2, r3, r2, r3
 80030b6:	08db      	lsrs	r3, r3, #3
 80030b8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	085b      	lsrs	r3, r3, #1
 80030ca:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	021b      	lsls	r3, r3, #8
 80030d0:	61bb      	str	r3, [r7, #24]
 80030d2:	e003      	b.n	80030dc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80030d4:	2302      	movs	r3, #2
 80030d6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d902      	bls.n	80030e8 <HAL_I2S_Init+0x134>
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	2bff      	cmp	r3, #255	; 0xff
 80030e6:	d907      	bls.n	80030f8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ec:	f043 0210 	orr.w	r2, r3, #16
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e08f      	b.n	8003218 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	691a      	ldr	r2, [r3, #16]
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	ea42 0103 	orr.w	r1, r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	69fa      	ldr	r2, [r7, #28]
 8003108:	430a      	orrs	r2, r1
 800310a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003116:	f023 030f 	bic.w	r3, r3, #15
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6851      	ldr	r1, [r2, #4]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	6892      	ldr	r2, [r2, #8]
 8003122:	4311      	orrs	r1, r2
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	68d2      	ldr	r2, [r2, #12]
 8003128:	4311      	orrs	r1, r2
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6992      	ldr	r2, [r2, #24]
 800312e:	430a      	orrs	r2, r1
 8003130:	431a      	orrs	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800313a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d161      	bne.n	8003208 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a38      	ldr	r2, [pc, #224]	; (8003228 <HAL_I2S_Init+0x274>)
 8003148:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a37      	ldr	r2, [pc, #220]	; (800322c <HAL_I2S_Init+0x278>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d101      	bne.n	8003158 <HAL_I2S_Init+0x1a4>
 8003154:	4b36      	ldr	r3, [pc, #216]	; (8003230 <HAL_I2S_Init+0x27c>)
 8003156:	e001      	b.n	800315c <HAL_I2S_Init+0x1a8>
 8003158:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6812      	ldr	r2, [r2, #0]
 8003162:	4932      	ldr	r1, [pc, #200]	; (800322c <HAL_I2S_Init+0x278>)
 8003164:	428a      	cmp	r2, r1
 8003166:	d101      	bne.n	800316c <HAL_I2S_Init+0x1b8>
 8003168:	4a31      	ldr	r2, [pc, #196]	; (8003230 <HAL_I2S_Init+0x27c>)
 800316a:	e001      	b.n	8003170 <HAL_I2S_Init+0x1bc>
 800316c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003170:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003174:	f023 030f 	bic.w	r3, r3, #15
 8003178:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a2b      	ldr	r2, [pc, #172]	; (800322c <HAL_I2S_Init+0x278>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d101      	bne.n	8003188 <HAL_I2S_Init+0x1d4>
 8003184:	4b2a      	ldr	r3, [pc, #168]	; (8003230 <HAL_I2S_Init+0x27c>)
 8003186:	e001      	b.n	800318c <HAL_I2S_Init+0x1d8>
 8003188:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800318c:	2202      	movs	r2, #2
 800318e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a25      	ldr	r2, [pc, #148]	; (800322c <HAL_I2S_Init+0x278>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d101      	bne.n	800319e <HAL_I2S_Init+0x1ea>
 800319a:	4b25      	ldr	r3, [pc, #148]	; (8003230 <HAL_I2S_Init+0x27c>)
 800319c:	e001      	b.n	80031a2 <HAL_I2S_Init+0x1ee>
 800319e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031ae:	d003      	beq.n	80031b8 <HAL_I2S_Init+0x204>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d103      	bne.n	80031c0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80031b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	e001      	b.n	80031c4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80031c0:	2300      	movs	r3, #0
 80031c2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	b299      	uxth	r1, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80031da:	4303      	orrs	r3, r0
 80031dc:	b29b      	uxth	r3, r3
 80031de:	430b      	orrs	r3, r1
 80031e0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80031e2:	4313      	orrs	r3, r2
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	897b      	ldrh	r3, [r7, #10]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031f0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a0d      	ldr	r2, [pc, #52]	; (800322c <HAL_I2S_Init+0x278>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d101      	bne.n	8003200 <HAL_I2S_Init+0x24c>
 80031fc:	4b0c      	ldr	r3, [pc, #48]	; (8003230 <HAL_I2S_Init+0x27c>)
 80031fe:	e001      	b.n	8003204 <HAL_I2S_Init+0x250>
 8003200:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003204:	897a      	ldrh	r2, [r7, #10]
 8003206:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3720      	adds	r7, #32
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	0800332b 	.word	0x0800332b
 8003224:	cccccccd 	.word	0xcccccccd
 8003228:	08003441 	.word	0x08003441
 800322c:	40003800 	.word	0x40003800
 8003230:	40003400 	.word	0x40003400

08003234 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	881a      	ldrh	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	1c9a      	adds	r2, r3, #2
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003292:	b29b      	uxth	r3, r3
 8003294:	3b01      	subs	r3, #1
 8003296:	b29a      	uxth	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10e      	bne.n	80032c4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032b4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7ff ffb8 	bl	8003234 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80032c4:	bf00      	nop
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032de:	b292      	uxth	r2, r2
 80032e0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e6:	1c9a      	adds	r2, r3, #2
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	3b01      	subs	r3, #1
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032fe:	b29b      	uxth	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10e      	bne.n	8003322 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003312:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7ff ff93 	bl	8003248 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003322:	bf00      	nop
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b086      	sub	sp, #24
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b04      	cmp	r3, #4
 8003344:	d13a      	bne.n	80033bc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b01      	cmp	r3, #1
 800334e:	d109      	bne.n	8003364 <I2S_IRQHandler+0x3a>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335a:	2b40      	cmp	r3, #64	; 0x40
 800335c:	d102      	bne.n	8003364 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7ff ffb4 	bl	80032cc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336a:	2b40      	cmp	r3, #64	; 0x40
 800336c:	d126      	bne.n	80033bc <I2S_IRQHandler+0x92>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f003 0320 	and.w	r3, r3, #32
 8003378:	2b20      	cmp	r3, #32
 800337a:	d11f      	bne.n	80033bc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800338a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800338c:	2300      	movs	r3, #0
 800338e:	613b      	str	r3, [r7, #16]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	613b      	str	r3, [r7, #16]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	613b      	str	r3, [r7, #16]
 80033a0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ae:	f043 0202 	orr.w	r2, r3, #2
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7ff ff50 	bl	800325c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d136      	bne.n	8003436 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d109      	bne.n	80033e6 <I2S_IRQHandler+0xbc>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033dc:	2b80      	cmp	r3, #128	; 0x80
 80033de:	d102      	bne.n	80033e6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7ff ff45 	bl	8003270 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d122      	bne.n	8003436 <I2S_IRQHandler+0x10c>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f003 0320 	and.w	r3, r3, #32
 80033fa:	2b20      	cmp	r3, #32
 80033fc:	d11b      	bne.n	8003436 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800340c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800340e:	2300      	movs	r3, #0
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	60fb      	str	r3, [r7, #12]
 800341a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003428:	f043 0204 	orr.w	r2, r3, #4
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7ff ff13 	bl	800325c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003436:	bf00      	nop
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
	...

08003440 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b088      	sub	sp, #32
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4aa2      	ldr	r2, [pc, #648]	; (80036e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d101      	bne.n	800345e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800345a:	4ba2      	ldr	r3, [pc, #648]	; (80036e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800345c:	e001      	b.n	8003462 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800345e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a9b      	ldr	r2, [pc, #620]	; (80036e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d101      	bne.n	800347c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003478:	4b9a      	ldr	r3, [pc, #616]	; (80036e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800347a:	e001      	b.n	8003480 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800347c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800348c:	d004      	beq.n	8003498 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	f040 8099 	bne.w	80035ca <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d107      	bne.n	80034b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d002      	beq.n	80034b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 f925 	bl	80036fc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d107      	bne.n	80034cc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d002      	beq.n	80034cc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f9c8 	bl	800385c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d2:	2b40      	cmp	r3, #64	; 0x40
 80034d4:	d13a      	bne.n	800354c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f003 0320 	and.w	r3, r3, #32
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d035      	beq.n	800354c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a7e      	ldr	r2, [pc, #504]	; (80036e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d101      	bne.n	80034ee <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80034ea:	4b7e      	ldr	r3, [pc, #504]	; (80036e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80034ec:	e001      	b.n	80034f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80034ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4979      	ldr	r1, [pc, #484]	; (80036e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80034fa:	428b      	cmp	r3, r1
 80034fc:	d101      	bne.n	8003502 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80034fe:	4b79      	ldr	r3, [pc, #484]	; (80036e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003500:	e001      	b.n	8003506 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003502:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003506:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800350a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800351a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800351c:	2300      	movs	r3, #0
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353e:	f043 0202 	orr.w	r2, r3, #2
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7ff fe88 	bl	800325c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f003 0308 	and.w	r3, r3, #8
 8003552:	2b08      	cmp	r3, #8
 8003554:	f040 80be 	bne.w	80036d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f003 0320 	and.w	r3, r3, #32
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 80b8 	beq.w	80036d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003572:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a59      	ldr	r2, [pc, #356]	; (80036e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d101      	bne.n	8003582 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800357e:	4b59      	ldr	r3, [pc, #356]	; (80036e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003580:	e001      	b.n	8003586 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003582:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4954      	ldr	r1, [pc, #336]	; (80036e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800358e:	428b      	cmp	r3, r1
 8003590:	d101      	bne.n	8003596 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003592:	4b54      	ldr	r3, [pc, #336]	; (80036e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003594:	e001      	b.n	800359a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003596:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800359a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800359e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80035a0:	2300      	movs	r3, #0
 80035a2:	60bb      	str	r3, [r7, #8]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	60bb      	str	r3, [r7, #8]
 80035ac:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ba:	f043 0204 	orr.w	r2, r3, #4
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7ff fe4a 	bl	800325c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035c8:	e084      	b.n	80036d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d107      	bne.n	80035e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d002      	beq.n	80035e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f8be 	bl	8003760 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d107      	bne.n	80035fe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d002      	beq.n	80035fe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f8fd 	bl	80037f8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003604:	2b40      	cmp	r3, #64	; 0x40
 8003606:	d12f      	bne.n	8003668 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f003 0320 	and.w	r3, r3, #32
 800360e:	2b00      	cmp	r3, #0
 8003610:	d02a      	beq.n	8003668 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003620:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a2e      	ldr	r2, [pc, #184]	; (80036e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d101      	bne.n	8003630 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800362c:	4b2d      	ldr	r3, [pc, #180]	; (80036e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800362e:	e001      	b.n	8003634 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003630:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4929      	ldr	r1, [pc, #164]	; (80036e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800363c:	428b      	cmp	r3, r1
 800363e:	d101      	bne.n	8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003640:	4b28      	ldr	r3, [pc, #160]	; (80036e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003642:	e001      	b.n	8003648 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003644:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003648:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800364c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365a:	f043 0202 	orr.w	r2, r3, #2
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7ff fdfa 	bl	800325c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b08      	cmp	r3, #8
 8003670:	d131      	bne.n	80036d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f003 0320 	and.w	r3, r3, #32
 8003678:	2b00      	cmp	r3, #0
 800367a:	d02c      	beq.n	80036d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a17      	ldr	r2, [pc, #92]	; (80036e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d101      	bne.n	800368a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003686:	4b17      	ldr	r3, [pc, #92]	; (80036e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003688:	e001      	b.n	800368e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800368a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4912      	ldr	r1, [pc, #72]	; (80036e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003696:	428b      	cmp	r3, r1
 8003698:	d101      	bne.n	800369e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800369a:	4b12      	ldr	r3, [pc, #72]	; (80036e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800369c:	e001      	b.n	80036a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800369e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036a6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036b6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c4:	f043 0204 	orr.w	r2, r3, #4
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff fdc5 	bl	800325c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036d2:	e000      	b.n	80036d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036d4:	bf00      	nop
}
 80036d6:	bf00      	nop
 80036d8:	3720      	adds	r7, #32
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40003800 	.word	0x40003800
 80036e4:	40003400 	.word	0x40003400

080036e8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	1c99      	adds	r1, r3, #2
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6251      	str	r1, [r2, #36]	; 0x24
 800370e:	881a      	ldrh	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371a:	b29b      	uxth	r3, r3
 800371c:	3b01      	subs	r3, #1
 800371e:	b29a      	uxth	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003728:	b29b      	uxth	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d113      	bne.n	8003756 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800373c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003742:	b29b      	uxth	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	d106      	bne.n	8003756 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7ff ffc9 	bl	80036e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003756:	bf00      	nop
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	1c99      	adds	r1, r3, #2
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6251      	str	r1, [r2, #36]	; 0x24
 8003772:	8819      	ldrh	r1, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a1d      	ldr	r2, [pc, #116]	; (80037f0 <I2SEx_TxISR_I2SExt+0x90>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d101      	bne.n	8003782 <I2SEx_TxISR_I2SExt+0x22>
 800377e:	4b1d      	ldr	r3, [pc, #116]	; (80037f4 <I2SEx_TxISR_I2SExt+0x94>)
 8003780:	e001      	b.n	8003786 <I2SEx_TxISR_I2SExt+0x26>
 8003782:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003786:	460a      	mov	r2, r1
 8003788:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378e:	b29b      	uxth	r3, r3
 8003790:	3b01      	subs	r3, #1
 8003792:	b29a      	uxth	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379c:	b29b      	uxth	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d121      	bne.n	80037e6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a12      	ldr	r2, [pc, #72]	; (80037f0 <I2SEx_TxISR_I2SExt+0x90>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d101      	bne.n	80037b0 <I2SEx_TxISR_I2SExt+0x50>
 80037ac:	4b11      	ldr	r3, [pc, #68]	; (80037f4 <I2SEx_TxISR_I2SExt+0x94>)
 80037ae:	e001      	b.n	80037b4 <I2SEx_TxISR_I2SExt+0x54>
 80037b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	490d      	ldr	r1, [pc, #52]	; (80037f0 <I2SEx_TxISR_I2SExt+0x90>)
 80037bc:	428b      	cmp	r3, r1
 80037be:	d101      	bne.n	80037c4 <I2SEx_TxISR_I2SExt+0x64>
 80037c0:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <I2SEx_TxISR_I2SExt+0x94>)
 80037c2:	e001      	b.n	80037c8 <I2SEx_TxISR_I2SExt+0x68>
 80037c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037cc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d106      	bne.n	80037e6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7ff ff81 	bl	80036e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037e6:	bf00      	nop
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40003800 	.word	0x40003800
 80037f4:	40003400 	.word	0x40003400

080037f8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68d8      	ldr	r0, [r3, #12]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380a:	1c99      	adds	r1, r3, #2
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003810:	b282      	uxth	r2, r0
 8003812:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003818:	b29b      	uxth	r3, r3
 800381a:	3b01      	subs	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003826:	b29b      	uxth	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d113      	bne.n	8003854 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800383a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003840:	b29b      	uxth	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d106      	bne.n	8003854 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7ff ff4a 	bl	80036e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003854:	bf00      	nop
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a20      	ldr	r2, [pc, #128]	; (80038ec <I2SEx_RxISR_I2SExt+0x90>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d101      	bne.n	8003872 <I2SEx_RxISR_I2SExt+0x16>
 800386e:	4b20      	ldr	r3, [pc, #128]	; (80038f0 <I2SEx_RxISR_I2SExt+0x94>)
 8003870:	e001      	b.n	8003876 <I2SEx_RxISR_I2SExt+0x1a>
 8003872:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003876:	68d8      	ldr	r0, [r3, #12]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387c:	1c99      	adds	r1, r3, #2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003882:	b282      	uxth	r2, r0
 8003884:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800388a:	b29b      	uxth	r3, r3
 800388c:	3b01      	subs	r3, #1
 800388e:	b29a      	uxth	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003898:	b29b      	uxth	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d121      	bne.n	80038e2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a12      	ldr	r2, [pc, #72]	; (80038ec <I2SEx_RxISR_I2SExt+0x90>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d101      	bne.n	80038ac <I2SEx_RxISR_I2SExt+0x50>
 80038a8:	4b11      	ldr	r3, [pc, #68]	; (80038f0 <I2SEx_RxISR_I2SExt+0x94>)
 80038aa:	e001      	b.n	80038b0 <I2SEx_RxISR_I2SExt+0x54>
 80038ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	490d      	ldr	r1, [pc, #52]	; (80038ec <I2SEx_RxISR_I2SExt+0x90>)
 80038b8:	428b      	cmp	r3, r1
 80038ba:	d101      	bne.n	80038c0 <I2SEx_RxISR_I2SExt+0x64>
 80038bc:	4b0c      	ldr	r3, [pc, #48]	; (80038f0 <I2SEx_RxISR_I2SExt+0x94>)
 80038be:	e001      	b.n	80038c4 <I2SEx_RxISR_I2SExt+0x68>
 80038c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038c8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d106      	bne.n	80038e2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f7ff ff03 	bl	80036e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038e2:	bf00      	nop
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40003800 	.word	0x40003800
 80038f0:	40003400 	.word	0x40003400

080038f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e25b      	b.n	8003dbe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d075      	beq.n	80039fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003912:	4ba3      	ldr	r3, [pc, #652]	; (8003ba0 <HAL_RCC_OscConfig+0x2ac>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 030c 	and.w	r3, r3, #12
 800391a:	2b04      	cmp	r3, #4
 800391c:	d00c      	beq.n	8003938 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800391e:	4ba0      	ldr	r3, [pc, #640]	; (8003ba0 <HAL_RCC_OscConfig+0x2ac>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003926:	2b08      	cmp	r3, #8
 8003928:	d112      	bne.n	8003950 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800392a:	4b9d      	ldr	r3, [pc, #628]	; (8003ba0 <HAL_RCC_OscConfig+0x2ac>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003932:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003936:	d10b      	bne.n	8003950 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003938:	4b99      	ldr	r3, [pc, #612]	; (8003ba0 <HAL_RCC_OscConfig+0x2ac>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d05b      	beq.n	80039fc <HAL_RCC_OscConfig+0x108>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d157      	bne.n	80039fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e236      	b.n	8003dbe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003958:	d106      	bne.n	8003968 <HAL_RCC_OscConfig+0x74>
 800395a:	4b91      	ldr	r3, [pc, #580]	; (8003ba0 <HAL_RCC_OscConfig+0x2ac>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a90      	ldr	r2, [pc, #576]	; (8003ba0 <HAL_RCC_OscConfig+0x2ac>)
 8003960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	e01d      	b.n	80039a4 <HAL_RCC_OscConfig+0xb0>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003970:	d10c      	bne.n	800398c <HAL_RCC_OscConfig+0x98>
 8003972:	4b8b      	ldr	r3, [pc, #556]	; (8003ba0 <HAL_RCC_OscConfig+0x2ac>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a8a      	ldr	r2, [pc, #552]	; (8003ba0 <HAL_RCC_OscConfig+0x2ac>)
 8003978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	4b88      	ldr	r3, [pc, #544]	; (8003ba0 <HAL_RCC_OscConfig+0x2ac>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a87      	ldr	r2, [pc, #540]	; (8003ba0 <HAL_RCC_OscConfig+0x2ac>)
 8003984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	e00b      	b.n	80039a4 <HAL_RCC_OscConfig+0xb0>
 800398c:	4b84      	ldr	r3, [pc, #528]	; (8003ba0 <HAL_RCC_OscConfig+0x2ac>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a83      	ldr	r2, [pc, #524]	; (8003ba0 <HAL_RCC_OscConfig+0x2ac>)
 8003992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003996:	6013      	str	r3, [r2, #0]
 8003998:	4b81      	ldr	r3, [pc, #516]	; (8003ba0 <HAL_RCC_OscConfig+0x2ac>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a80      	ldr	r2, [pc, #512]	; (8003ba0 <HAL_RCC_OscConfig+0x2ac>)
 800399e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d013      	beq.n	80039d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ac:	f7fd f9e6 	bl	8000d7c <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039b4:	f7fd f9e2 	bl	8000d7c <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b64      	cmp	r3, #100	; 0x64
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e1fb      	b.n	8003dbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c6:	4b76      	ldr	r3, [pc, #472]	; (8003ba0 <HAL_RCC_OscConfig+0x2ac>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0f0      	beq.n	80039b4 <HAL_RCC_OscConfig+0xc0>
 80039d2:	e014      	b.n	80039fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d4:	f7fd f9d2 	bl	8000d7c <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039dc:	f7fd f9ce 	bl	8000d7c <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b64      	cmp	r3, #100	; 0x64
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e1e7      	b.n	8003dbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ee:	4b6c      	ldr	r3, [pc, #432]	; (8003ba0 <HAL_RCC_OscConfig+0x2ac>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1f0      	bne.n	80039dc <HAL_RCC_OscConfig+0xe8>
 80039fa:	e000      	b.n	80039fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d063      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a0a:	4b65      	ldr	r3, [pc, #404]	; (8003ba0 <HAL_RCC_OscConfig+0x2ac>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 030c 	and.w	r3, r3, #12
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00b      	beq.n	8003a2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a16:	4b62      	ldr	r3, [pc, #392]	; (8003ba0 <HAL_RCC_OscConfig+0x2ac>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	d11c      	bne.n	8003a5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a22:	4b5f      	ldr	r3, [pc, #380]	; (8003ba0 <HAL_RCC_OscConfig+0x2ac>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d116      	bne.n	8003a5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a2e:	4b5c      	ldr	r3, [pc, #368]	; (8003ba0 <HAL_RCC_OscConfig+0x2ac>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d005      	beq.n	8003a46 <HAL_RCC_OscConfig+0x152>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d001      	beq.n	8003a46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e1bb      	b.n	8003dbe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a46:	4b56      	ldr	r3, [pc, #344]	; (8003ba0 <HAL_RCC_OscConfig+0x2ac>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	4952      	ldr	r1, [pc, #328]	; (8003ba0 <HAL_RCC_OscConfig+0x2ac>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a5a:	e03a      	b.n	8003ad2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d020      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a64:	4b4f      	ldr	r3, [pc, #316]	; (8003ba4 <HAL_RCC_OscConfig+0x2b0>)
 8003a66:	2201      	movs	r2, #1
 8003a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6a:	f7fd f987 	bl	8000d7c <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a72:	f7fd f983 	bl	8000d7c <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e19c      	b.n	8003dbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a84:	4b46      	ldr	r3, [pc, #280]	; (8003ba0 <HAL_RCC_OscConfig+0x2ac>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0f0      	beq.n	8003a72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a90:	4b43      	ldr	r3, [pc, #268]	; (8003ba0 <HAL_RCC_OscConfig+0x2ac>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	4940      	ldr	r1, [pc, #256]	; (8003ba0 <HAL_RCC_OscConfig+0x2ac>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	600b      	str	r3, [r1, #0]
 8003aa4:	e015      	b.n	8003ad2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aa6:	4b3f      	ldr	r3, [pc, #252]	; (8003ba4 <HAL_RCC_OscConfig+0x2b0>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aac:	f7fd f966 	bl	8000d7c <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ab4:	f7fd f962 	bl	8000d7c <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e17b      	b.n	8003dbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ac6:	4b36      	ldr	r3, [pc, #216]	; (8003ba0 <HAL_RCC_OscConfig+0x2ac>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f0      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d030      	beq.n	8003b40 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d016      	beq.n	8003b14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ae6:	4b30      	ldr	r3, [pc, #192]	; (8003ba8 <HAL_RCC_OscConfig+0x2b4>)
 8003ae8:	2201      	movs	r2, #1
 8003aea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aec:	f7fd f946 	bl	8000d7c <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003af4:	f7fd f942 	bl	8000d7c <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e15b      	b.n	8003dbe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b06:	4b26      	ldr	r3, [pc, #152]	; (8003ba0 <HAL_RCC_OscConfig+0x2ac>)
 8003b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f0      	beq.n	8003af4 <HAL_RCC_OscConfig+0x200>
 8003b12:	e015      	b.n	8003b40 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b14:	4b24      	ldr	r3, [pc, #144]	; (8003ba8 <HAL_RCC_OscConfig+0x2b4>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b1a:	f7fd f92f 	bl	8000d7c <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b20:	e008      	b.n	8003b34 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b22:	f7fd f92b 	bl	8000d7c <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e144      	b.n	8003dbe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b34:	4b1a      	ldr	r3, [pc, #104]	; (8003ba0 <HAL_RCC_OscConfig+0x2ac>)
 8003b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1f0      	bne.n	8003b22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 80a0 	beq.w	8003c8e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b52:	4b13      	ldr	r3, [pc, #76]	; (8003ba0 <HAL_RCC_OscConfig+0x2ac>)
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10f      	bne.n	8003b7e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60bb      	str	r3, [r7, #8]
 8003b62:	4b0f      	ldr	r3, [pc, #60]	; (8003ba0 <HAL_RCC_OscConfig+0x2ac>)
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	4a0e      	ldr	r2, [pc, #56]	; (8003ba0 <HAL_RCC_OscConfig+0x2ac>)
 8003b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ba0 <HAL_RCC_OscConfig+0x2ac>)
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b76:	60bb      	str	r3, [r7, #8]
 8003b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7e:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <HAL_RCC_OscConfig+0x2b8>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d121      	bne.n	8003bce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b8a:	4b08      	ldr	r3, [pc, #32]	; (8003bac <HAL_RCC_OscConfig+0x2b8>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a07      	ldr	r2, [pc, #28]	; (8003bac <HAL_RCC_OscConfig+0x2b8>)
 8003b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b96:	f7fd f8f1 	bl	8000d7c <HAL_GetTick>
 8003b9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b9c:	e011      	b.n	8003bc2 <HAL_RCC_OscConfig+0x2ce>
 8003b9e:	bf00      	nop
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	42470000 	.word	0x42470000
 8003ba8:	42470e80 	.word	0x42470e80
 8003bac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb0:	f7fd f8e4 	bl	8000d7c <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e0fd      	b.n	8003dbe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc2:	4b81      	ldr	r3, [pc, #516]	; (8003dc8 <HAL_RCC_OscConfig+0x4d4>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0f0      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d106      	bne.n	8003be4 <HAL_RCC_OscConfig+0x2f0>
 8003bd6:	4b7d      	ldr	r3, [pc, #500]	; (8003dcc <HAL_RCC_OscConfig+0x4d8>)
 8003bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bda:	4a7c      	ldr	r2, [pc, #496]	; (8003dcc <HAL_RCC_OscConfig+0x4d8>)
 8003bdc:	f043 0301 	orr.w	r3, r3, #1
 8003be0:	6713      	str	r3, [r2, #112]	; 0x70
 8003be2:	e01c      	b.n	8003c1e <HAL_RCC_OscConfig+0x32a>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	2b05      	cmp	r3, #5
 8003bea:	d10c      	bne.n	8003c06 <HAL_RCC_OscConfig+0x312>
 8003bec:	4b77      	ldr	r3, [pc, #476]	; (8003dcc <HAL_RCC_OscConfig+0x4d8>)
 8003bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf0:	4a76      	ldr	r2, [pc, #472]	; (8003dcc <HAL_RCC_OscConfig+0x4d8>)
 8003bf2:	f043 0304 	orr.w	r3, r3, #4
 8003bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf8:	4b74      	ldr	r3, [pc, #464]	; (8003dcc <HAL_RCC_OscConfig+0x4d8>)
 8003bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfc:	4a73      	ldr	r2, [pc, #460]	; (8003dcc <HAL_RCC_OscConfig+0x4d8>)
 8003bfe:	f043 0301 	orr.w	r3, r3, #1
 8003c02:	6713      	str	r3, [r2, #112]	; 0x70
 8003c04:	e00b      	b.n	8003c1e <HAL_RCC_OscConfig+0x32a>
 8003c06:	4b71      	ldr	r3, [pc, #452]	; (8003dcc <HAL_RCC_OscConfig+0x4d8>)
 8003c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0a:	4a70      	ldr	r2, [pc, #448]	; (8003dcc <HAL_RCC_OscConfig+0x4d8>)
 8003c0c:	f023 0301 	bic.w	r3, r3, #1
 8003c10:	6713      	str	r3, [r2, #112]	; 0x70
 8003c12:	4b6e      	ldr	r3, [pc, #440]	; (8003dcc <HAL_RCC_OscConfig+0x4d8>)
 8003c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c16:	4a6d      	ldr	r2, [pc, #436]	; (8003dcc <HAL_RCC_OscConfig+0x4d8>)
 8003c18:	f023 0304 	bic.w	r3, r3, #4
 8003c1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d015      	beq.n	8003c52 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c26:	f7fd f8a9 	bl	8000d7c <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c2c:	e00a      	b.n	8003c44 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c2e:	f7fd f8a5 	bl	8000d7c <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e0bc      	b.n	8003dbe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c44:	4b61      	ldr	r3, [pc, #388]	; (8003dcc <HAL_RCC_OscConfig+0x4d8>)
 8003c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0ee      	beq.n	8003c2e <HAL_RCC_OscConfig+0x33a>
 8003c50:	e014      	b.n	8003c7c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c52:	f7fd f893 	bl	8000d7c <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c58:	e00a      	b.n	8003c70 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c5a:	f7fd f88f 	bl	8000d7c <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e0a6      	b.n	8003dbe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c70:	4b56      	ldr	r3, [pc, #344]	; (8003dcc <HAL_RCC_OscConfig+0x4d8>)
 8003c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1ee      	bne.n	8003c5a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c7c:	7dfb      	ldrb	r3, [r7, #23]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d105      	bne.n	8003c8e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c82:	4b52      	ldr	r3, [pc, #328]	; (8003dcc <HAL_RCC_OscConfig+0x4d8>)
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	4a51      	ldr	r2, [pc, #324]	; (8003dcc <HAL_RCC_OscConfig+0x4d8>)
 8003c88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 8092 	beq.w	8003dbc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c98:	4b4c      	ldr	r3, [pc, #304]	; (8003dcc <HAL_RCC_OscConfig+0x4d8>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 030c 	and.w	r3, r3, #12
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	d05c      	beq.n	8003d5e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d141      	bne.n	8003d30 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cac:	4b48      	ldr	r3, [pc, #288]	; (8003dd0 <HAL_RCC_OscConfig+0x4dc>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb2:	f7fd f863 	bl	8000d7c <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cba:	f7fd f85f 	bl	8000d7c <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e078      	b.n	8003dbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ccc:	4b3f      	ldr	r3, [pc, #252]	; (8003dcc <HAL_RCC_OscConfig+0x4d8>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1f0      	bne.n	8003cba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	69da      	ldr	r2, [r3, #28]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	019b      	lsls	r3, r3, #6
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cee:	085b      	lsrs	r3, r3, #1
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	041b      	lsls	r3, r3, #16
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfa:	061b      	lsls	r3, r3, #24
 8003cfc:	4933      	ldr	r1, [pc, #204]	; (8003dcc <HAL_RCC_OscConfig+0x4d8>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d02:	4b33      	ldr	r3, [pc, #204]	; (8003dd0 <HAL_RCC_OscConfig+0x4dc>)
 8003d04:	2201      	movs	r2, #1
 8003d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d08:	f7fd f838 	bl	8000d7c <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d10:	f7fd f834 	bl	8000d7c <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e04d      	b.n	8003dbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d22:	4b2a      	ldr	r3, [pc, #168]	; (8003dcc <HAL_RCC_OscConfig+0x4d8>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0f0      	beq.n	8003d10 <HAL_RCC_OscConfig+0x41c>
 8003d2e:	e045      	b.n	8003dbc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d30:	4b27      	ldr	r3, [pc, #156]	; (8003dd0 <HAL_RCC_OscConfig+0x4dc>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d36:	f7fd f821 	bl	8000d7c <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d3e:	f7fd f81d 	bl	8000d7c <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e036      	b.n	8003dbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d50:	4b1e      	ldr	r3, [pc, #120]	; (8003dcc <HAL_RCC_OscConfig+0x4d8>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1f0      	bne.n	8003d3e <HAL_RCC_OscConfig+0x44a>
 8003d5c:	e02e      	b.n	8003dbc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d101      	bne.n	8003d6a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e029      	b.n	8003dbe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d6a:	4b18      	ldr	r3, [pc, #96]	; (8003dcc <HAL_RCC_OscConfig+0x4d8>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d11c      	bne.n	8003db8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d115      	bne.n	8003db8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d92:	4013      	ands	r3, r2
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d10d      	bne.n	8003db8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d106      	bne.n	8003db8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d001      	beq.n	8003dbc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e000      	b.n	8003dbe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40007000 	.word	0x40007000
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	42470060 	.word	0x42470060

08003dd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e0cc      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003de8:	4b68      	ldr	r3, [pc, #416]	; (8003f8c <HAL_RCC_ClockConfig+0x1b8>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 030f 	and.w	r3, r3, #15
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d90c      	bls.n	8003e10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df6:	4b65      	ldr	r3, [pc, #404]	; (8003f8c <HAL_RCC_ClockConfig+0x1b8>)
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	b2d2      	uxtb	r2, r2
 8003dfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dfe:	4b63      	ldr	r3, [pc, #396]	; (8003f8c <HAL_RCC_ClockConfig+0x1b8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d001      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e0b8      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d020      	beq.n	8003e5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d005      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e28:	4b59      	ldr	r3, [pc, #356]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	4a58      	ldr	r2, [pc, #352]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0308 	and.w	r3, r3, #8
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d005      	beq.n	8003e4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e40:	4b53      	ldr	r3, [pc, #332]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	4a52      	ldr	r2, [pc, #328]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e4c:	4b50      	ldr	r3, [pc, #320]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	494d      	ldr	r1, [pc, #308]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d044      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d107      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e72:	4b47      	ldr	r3, [pc, #284]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d119      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e07f      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d003      	beq.n	8003e92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e8e:	2b03      	cmp	r3, #3
 8003e90:	d107      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e92:	4b3f      	ldr	r3, [pc, #252]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d109      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e06f      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea2:	4b3b      	ldr	r3, [pc, #236]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e067      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eb2:	4b37      	ldr	r3, [pc, #220]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f023 0203 	bic.w	r2, r3, #3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	4934      	ldr	r1, [pc, #208]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ec4:	f7fc ff5a 	bl	8000d7c <HAL_GetTick>
 8003ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eca:	e00a      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ecc:	f7fc ff56 	bl	8000d7c <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e04f      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ee2:	4b2b      	ldr	r3, [pc, #172]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 020c 	and.w	r2, r3, #12
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d1eb      	bne.n	8003ecc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ef4:	4b25      	ldr	r3, [pc, #148]	; (8003f8c <HAL_RCC_ClockConfig+0x1b8>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 030f 	and.w	r3, r3, #15
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d20c      	bcs.n	8003f1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f02:	4b22      	ldr	r3, [pc, #136]	; (8003f8c <HAL_RCC_ClockConfig+0x1b8>)
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	b2d2      	uxtb	r2, r2
 8003f08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f0a:	4b20      	ldr	r3, [pc, #128]	; (8003f8c <HAL_RCC_ClockConfig+0x1b8>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d001      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e032      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d008      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f28:	4b19      	ldr	r3, [pc, #100]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	4916      	ldr	r1, [pc, #88]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0308 	and.w	r3, r3, #8
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d009      	beq.n	8003f5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f46:	4b12      	ldr	r3, [pc, #72]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	490e      	ldr	r1, [pc, #56]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f5a:	f000 f821 	bl	8003fa0 <HAL_RCC_GetSysClockFreq>
 8003f5e:	4601      	mov	r1, r0
 8003f60:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <HAL_RCC_ClockConfig+0x1bc>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	091b      	lsrs	r3, r3, #4
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	4a0a      	ldr	r2, [pc, #40]	; (8003f94 <HAL_RCC_ClockConfig+0x1c0>)
 8003f6c:	5cd3      	ldrb	r3, [r2, r3]
 8003f6e:	fa21 f303 	lsr.w	r3, r1, r3
 8003f72:	4a09      	ldr	r2, [pc, #36]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003f74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f76:	4b09      	ldr	r3, [pc, #36]	; (8003f9c <HAL_RCC_ClockConfig+0x1c8>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fc feba 	bl	8000cf4 <HAL_InitTick>

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	40023c00 	.word	0x40023c00
 8003f90:	40023800 	.word	0x40023800
 8003f94:	08007980 	.word	0x08007980
 8003f98:	20000000 	.word	0x20000000
 8003f9c:	20000004 	.word	0x20000004

08003fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	607b      	str	r3, [r7, #4]
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
 8003fae:	2300      	movs	r3, #0
 8003fb0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fb6:	4b63      	ldr	r3, [pc, #396]	; (8004144 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 030c 	and.w	r3, r3, #12
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d007      	beq.n	8003fd2 <HAL_RCC_GetSysClockFreq+0x32>
 8003fc2:	2b08      	cmp	r3, #8
 8003fc4:	d008      	beq.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x38>
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f040 80b4 	bne.w	8004134 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fcc:	4b5e      	ldr	r3, [pc, #376]	; (8004148 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003fce:	60bb      	str	r3, [r7, #8]
       break;
 8003fd0:	e0b3      	b.n	800413a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fd2:	4b5e      	ldr	r3, [pc, #376]	; (800414c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003fd4:	60bb      	str	r3, [r7, #8]
      break;
 8003fd6:	e0b0      	b.n	800413a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fd8:	4b5a      	ldr	r3, [pc, #360]	; (8004144 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fe0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fe2:	4b58      	ldr	r3, [pc, #352]	; (8004144 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d04a      	beq.n	8004084 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fee:	4b55      	ldr	r3, [pc, #340]	; (8004144 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	099b      	lsrs	r3, r3, #6
 8003ff4:	f04f 0400 	mov.w	r4, #0
 8003ff8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	ea03 0501 	and.w	r5, r3, r1
 8004004:	ea04 0602 	and.w	r6, r4, r2
 8004008:	4629      	mov	r1, r5
 800400a:	4632      	mov	r2, r6
 800400c:	f04f 0300 	mov.w	r3, #0
 8004010:	f04f 0400 	mov.w	r4, #0
 8004014:	0154      	lsls	r4, r2, #5
 8004016:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800401a:	014b      	lsls	r3, r1, #5
 800401c:	4619      	mov	r1, r3
 800401e:	4622      	mov	r2, r4
 8004020:	1b49      	subs	r1, r1, r5
 8004022:	eb62 0206 	sbc.w	r2, r2, r6
 8004026:	f04f 0300 	mov.w	r3, #0
 800402a:	f04f 0400 	mov.w	r4, #0
 800402e:	0194      	lsls	r4, r2, #6
 8004030:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004034:	018b      	lsls	r3, r1, #6
 8004036:	1a5b      	subs	r3, r3, r1
 8004038:	eb64 0402 	sbc.w	r4, r4, r2
 800403c:	f04f 0100 	mov.w	r1, #0
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	00e2      	lsls	r2, r4, #3
 8004046:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800404a:	00d9      	lsls	r1, r3, #3
 800404c:	460b      	mov	r3, r1
 800404e:	4614      	mov	r4, r2
 8004050:	195b      	adds	r3, r3, r5
 8004052:	eb44 0406 	adc.w	r4, r4, r6
 8004056:	f04f 0100 	mov.w	r1, #0
 800405a:	f04f 0200 	mov.w	r2, #0
 800405e:	0262      	lsls	r2, r4, #9
 8004060:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004064:	0259      	lsls	r1, r3, #9
 8004066:	460b      	mov	r3, r1
 8004068:	4614      	mov	r4, r2
 800406a:	4618      	mov	r0, r3
 800406c:	4621      	mov	r1, r4
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f04f 0400 	mov.w	r4, #0
 8004074:	461a      	mov	r2, r3
 8004076:	4623      	mov	r3, r4
 8004078:	f7fc f8a6 	bl	80001c8 <__aeabi_uldivmod>
 800407c:	4603      	mov	r3, r0
 800407e:	460c      	mov	r4, r1
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	e049      	b.n	8004118 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004084:	4b2f      	ldr	r3, [pc, #188]	; (8004144 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	099b      	lsrs	r3, r3, #6
 800408a:	f04f 0400 	mov.w	r4, #0
 800408e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004092:	f04f 0200 	mov.w	r2, #0
 8004096:	ea03 0501 	and.w	r5, r3, r1
 800409a:	ea04 0602 	and.w	r6, r4, r2
 800409e:	4629      	mov	r1, r5
 80040a0:	4632      	mov	r2, r6
 80040a2:	f04f 0300 	mov.w	r3, #0
 80040a6:	f04f 0400 	mov.w	r4, #0
 80040aa:	0154      	lsls	r4, r2, #5
 80040ac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80040b0:	014b      	lsls	r3, r1, #5
 80040b2:	4619      	mov	r1, r3
 80040b4:	4622      	mov	r2, r4
 80040b6:	1b49      	subs	r1, r1, r5
 80040b8:	eb62 0206 	sbc.w	r2, r2, r6
 80040bc:	f04f 0300 	mov.w	r3, #0
 80040c0:	f04f 0400 	mov.w	r4, #0
 80040c4:	0194      	lsls	r4, r2, #6
 80040c6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80040ca:	018b      	lsls	r3, r1, #6
 80040cc:	1a5b      	subs	r3, r3, r1
 80040ce:	eb64 0402 	sbc.w	r4, r4, r2
 80040d2:	f04f 0100 	mov.w	r1, #0
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	00e2      	lsls	r2, r4, #3
 80040dc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80040e0:	00d9      	lsls	r1, r3, #3
 80040e2:	460b      	mov	r3, r1
 80040e4:	4614      	mov	r4, r2
 80040e6:	195b      	adds	r3, r3, r5
 80040e8:	eb44 0406 	adc.w	r4, r4, r6
 80040ec:	f04f 0100 	mov.w	r1, #0
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	02a2      	lsls	r2, r4, #10
 80040f6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80040fa:	0299      	lsls	r1, r3, #10
 80040fc:	460b      	mov	r3, r1
 80040fe:	4614      	mov	r4, r2
 8004100:	4618      	mov	r0, r3
 8004102:	4621      	mov	r1, r4
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f04f 0400 	mov.w	r4, #0
 800410a:	461a      	mov	r2, r3
 800410c:	4623      	mov	r3, r4
 800410e:	f7fc f85b 	bl	80001c8 <__aeabi_uldivmod>
 8004112:	4603      	mov	r3, r0
 8004114:	460c      	mov	r4, r1
 8004116:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004118:	4b0a      	ldr	r3, [pc, #40]	; (8004144 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	0c1b      	lsrs	r3, r3, #16
 800411e:	f003 0303 	and.w	r3, r3, #3
 8004122:	3301      	adds	r3, #1
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004130:	60bb      	str	r3, [r7, #8]
      break;
 8004132:	e002      	b.n	800413a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004134:	4b04      	ldr	r3, [pc, #16]	; (8004148 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004136:	60bb      	str	r3, [r7, #8]
      break;
 8004138:	bf00      	nop
    }
  }
  return sysclockfreq;
 800413a:	68bb      	ldr	r3, [r7, #8]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004144:	40023800 	.word	0x40023800
 8004148:	00f42400 	.word	0x00f42400
 800414c:	007a1200 	.word	0x007a1200

08004150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004154:	4b03      	ldr	r3, [pc, #12]	; (8004164 <HAL_RCC_GetHCLKFreq+0x14>)
 8004156:	681b      	ldr	r3, [r3, #0]
}
 8004158:	4618      	mov	r0, r3
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	20000000 	.word	0x20000000

08004168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800416c:	f7ff fff0 	bl	8004150 <HAL_RCC_GetHCLKFreq>
 8004170:	4601      	mov	r1, r0
 8004172:	4b05      	ldr	r3, [pc, #20]	; (8004188 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	0a9b      	lsrs	r3, r3, #10
 8004178:	f003 0307 	and.w	r3, r3, #7
 800417c:	4a03      	ldr	r2, [pc, #12]	; (800418c <HAL_RCC_GetPCLK1Freq+0x24>)
 800417e:	5cd3      	ldrb	r3, [r2, r3]
 8004180:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004184:	4618      	mov	r0, r3
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40023800 	.word	0x40023800
 800418c:	08007990 	.word	0x08007990

08004190 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004198:	2300      	movs	r3, #0
 800419a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d105      	bne.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d035      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041b8:	4b62      	ldr	r3, [pc, #392]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041be:	f7fc fddd 	bl	8000d7c <HAL_GetTick>
 80041c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041c4:	e008      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80041c6:	f7fc fdd9 	bl	8000d7c <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e0b0      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041d8:	4b5b      	ldr	r3, [pc, #364]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1f0      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	019a      	lsls	r2, r3, #6
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	071b      	lsls	r3, r3, #28
 80041f0:	4955      	ldr	r1, [pc, #340]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80041f8:	4b52      	ldr	r3, [pc, #328]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80041fa:	2201      	movs	r2, #1
 80041fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041fe:	f7fc fdbd 	bl	8000d7c <HAL_GetTick>
 8004202:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004204:	e008      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004206:	f7fc fdb9 	bl	8000d7c <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e090      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004218:	4b4b      	ldr	r3, [pc, #300]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0f0      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 8083 	beq.w	8004338 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004232:	2300      	movs	r3, #0
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	4b44      	ldr	r3, [pc, #272]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	4a43      	ldr	r2, [pc, #268]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800423c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004240:	6413      	str	r3, [r2, #64]	; 0x40
 8004242:	4b41      	ldr	r3, [pc, #260]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800424e:	4b3f      	ldr	r3, [pc, #252]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a3e      	ldr	r2, [pc, #248]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004258:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800425a:	f7fc fd8f 	bl	8000d7c <HAL_GetTick>
 800425e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004260:	e008      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004262:	f7fc fd8b 	bl	8000d7c <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d901      	bls.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e062      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004274:	4b35      	ldr	r3, [pc, #212]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427c:	2b00      	cmp	r3, #0
 800427e:	d0f0      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004280:	4b31      	ldr	r3, [pc, #196]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004284:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004288:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d02f      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	429a      	cmp	r2, r3
 800429c:	d028      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800429e:	4b2a      	ldr	r3, [pc, #168]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042a8:	4b29      	ldr	r3, [pc, #164]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042aa:	2201      	movs	r2, #1
 80042ac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042ae:	4b28      	ldr	r3, [pc, #160]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80042b4:	4a24      	ldr	r2, [pc, #144]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80042ba:	4b23      	ldr	r3, [pc, #140]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d114      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80042c6:	f7fc fd59 	bl	8000d7c <HAL_GetTick>
 80042ca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042cc:	e00a      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ce:	f7fc fd55 	bl	8000d7c <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042dc:	4293      	cmp	r3, r2
 80042de:	d901      	bls.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e02a      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e4:	4b18      	ldr	r3, [pc, #96]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d0ee      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042fc:	d10d      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80042fe:	4b12      	ldr	r3, [pc, #72]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800430e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004312:	490d      	ldr	r1, [pc, #52]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004314:	4313      	orrs	r3, r2
 8004316:	608b      	str	r3, [r1, #8]
 8004318:	e005      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800431a:	4b0b      	ldr	r3, [pc, #44]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	4a0a      	ldr	r2, [pc, #40]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004320:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004324:	6093      	str	r3, [r2, #8]
 8004326:	4b08      	ldr	r3, [pc, #32]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004328:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004332:	4905      	ldr	r1, [pc, #20]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004334:	4313      	orrs	r3, r2
 8004336:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3718      	adds	r7, #24
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	42470068 	.word	0x42470068
 8004348:	40023800 	.word	0x40023800
 800434c:	40007000 	.word	0x40007000
 8004350:	42470e40 	.word	0x42470e40

08004354 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004354:	b480      	push	{r7}
 8004356:	b087      	sub	sp, #28
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800435c:	2300      	movs	r3, #0
 800435e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d13d      	bne.n	80043ee <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004372:	4b22      	ldr	r3, [pc, #136]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800437a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d004      	beq.n	800438c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004382:	2b01      	cmp	r3, #1
 8004384:	d12f      	bne.n	80043e6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004386:	4b1e      	ldr	r3, [pc, #120]	; (8004400 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004388:	617b      	str	r3, [r7, #20]
          break;
 800438a:	e02f      	b.n	80043ec <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800438c:	4b1b      	ldr	r3, [pc, #108]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004394:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004398:	d108      	bne.n	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800439a:	4b18      	ldr	r3, [pc, #96]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043a2:	4a18      	ldr	r2, [pc, #96]	; (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80043a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a8:	613b      	str	r3, [r7, #16]
 80043aa:	e007      	b.n	80043bc <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043ac:	4b13      	ldr	r3, [pc, #76]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043b4:	4a14      	ldr	r2, [pc, #80]	; (8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80043b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ba:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80043bc:	4b0f      	ldr	r3, [pc, #60]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80043be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043c2:	099b      	lsrs	r3, r3, #6
 80043c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	fb02 f303 	mul.w	r3, r2, r3
 80043ce:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80043d0:	4b0a      	ldr	r3, [pc, #40]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80043d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043d6:	0f1b      	lsrs	r3, r3, #28
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e2:	617b      	str	r3, [r7, #20]
          break;
 80043e4:	e002      	b.n	80043ec <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80043e6:	2300      	movs	r3, #0
 80043e8:	617b      	str	r3, [r7, #20]
          break;
 80043ea:	bf00      	nop
        }
      }
      break;
 80043ec:	bf00      	nop
    }
  }
  return frequency;
 80043ee:	697b      	ldr	r3, [r7, #20]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	371c      	adds	r7, #28
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	40023800 	.word	0x40023800
 8004400:	00bb8000 	.word	0x00bb8000
 8004404:	007a1200 	.word	0x007a1200
 8004408:	00f42400 	.word	0x00f42400

0800440c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e056      	b.n	80044cc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d106      	bne.n	800443e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f7fc fb4d 	bl	8000ad8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2202      	movs	r2, #2
 8004442:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004454:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	431a      	orrs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	431a      	orrs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	431a      	orrs	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	431a      	orrs	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	ea42 0103 	orr.w	r1, r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	0c1b      	lsrs	r3, r3, #16
 800449c:	f003 0104 	and.w	r1, r3, #4
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	430a      	orrs	r2, r1
 80044aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	69da      	ldr	r2, [r3, #28]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3708      	adds	r7, #8
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044d4:	b084      	sub	sp, #16
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b084      	sub	sp, #16
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
 80044de:	f107 001c 	add.w	r0, r7, #28
 80044e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d122      	bne.n	8004532 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004516:	2b01      	cmp	r3, #1
 8004518:	d105      	bne.n	8004526 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f94a 	bl	80047c0 <USB_CoreReset>
 800452c:	4603      	mov	r3, r0
 800452e:	73fb      	strb	r3, [r7, #15]
 8004530:	e01a      	b.n	8004568 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f93e 	bl	80047c0 <USB_CoreReset>
 8004544:	4603      	mov	r3, r0
 8004546:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800454a:	2b00      	cmp	r3, #0
 800454c:	d106      	bne.n	800455c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004552:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	639a      	str	r2, [r3, #56]	; 0x38
 800455a:	e005      	b.n	8004568 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004560:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456a:	2b01      	cmp	r3, #1
 800456c:	d10b      	bne.n	8004586 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f043 0206 	orr.w	r2, r3, #6
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f043 0220 	orr.w	r2, r3, #32
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004586:	7bfb      	ldrb	r3, [r7, #15]
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004592:	b004      	add	sp, #16
 8004594:	4770      	bx	lr

08004596 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004596:	b480      	push	{r7}
 8004598:	b083      	sub	sp, #12
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f043 0201 	orr.w	r2, r3, #1
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f023 0201 	bic.w	r2, r3, #1
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b082      	sub	sp, #8
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
 80045e2:	460b      	mov	r3, r1
 80045e4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045f2:	78fb      	ldrb	r3, [r7, #3]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d106      	bne.n	8004606 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	60da      	str	r2, [r3, #12]
 8004604:	e00b      	b.n	800461e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004606:	78fb      	ldrb	r3, [r7, #3]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d106      	bne.n	800461a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	60da      	str	r2, [r3, #12]
 8004618:	e001      	b.n	800461e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e003      	b.n	8004626 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800461e:	2032      	movs	r0, #50	; 0x32
 8004620:	f7fc fbb8 	bl	8000d94 <HAL_Delay>

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
	...

08004630 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800463a:	2300      	movs	r3, #0
 800463c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	019b      	lsls	r3, r3, #6
 8004642:	f043 0220 	orr.w	r2, r3, #32
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	3301      	adds	r3, #1
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4a09      	ldr	r2, [pc, #36]	; (8004678 <USB_FlushTxFifo+0x48>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d901      	bls.n	800465c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e006      	b.n	800466a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	f003 0320 	and.w	r3, r3, #32
 8004664:	2b20      	cmp	r3, #32
 8004666:	d0f0      	beq.n	800464a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	00030d40 	.word	0x00030d40

0800467c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004684:	2300      	movs	r3, #0
 8004686:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2210      	movs	r2, #16
 800468c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	3301      	adds	r3, #1
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4a09      	ldr	r2, [pc, #36]	; (80046bc <USB_FlushRxFifo+0x40>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d901      	bls.n	80046a0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e006      	b.n	80046ae <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	f003 0310 	and.w	r3, r3, #16
 80046a8:	2b10      	cmp	r3, #16
 80046aa:	d0f0      	beq.n	800468e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	00030d40 	.word	0x00030d40

080046c0 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b089      	sub	sp, #36	; 0x24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	4611      	mov	r1, r2
 80046cc:	461a      	mov	r2, r3
 80046ce:	460b      	mov	r3, r1
 80046d0:	71fb      	strb	r3, [r7, #7]
 80046d2:	4613      	mov	r3, r2
 80046d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80046de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d11a      	bne.n	800471c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80046e6:	88bb      	ldrh	r3, [r7, #4]
 80046e8:	3303      	adds	r3, #3
 80046ea:	089b      	lsrs	r3, r3, #2
 80046ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80046ee:	2300      	movs	r3, #0
 80046f0:	61bb      	str	r3, [r7, #24]
 80046f2:	e00f      	b.n	8004714 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80046f4:	79fb      	ldrb	r3, [r7, #7]
 80046f6:	031a      	lsls	r2, r3, #12
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004700:	461a      	mov	r2, r3
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	3304      	adds	r3, #4
 800470c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	3301      	adds	r3, #1
 8004712:	61bb      	str	r3, [r7, #24]
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	429a      	cmp	r2, r3
 800471a:	d3eb      	bcc.n	80046f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3724      	adds	r7, #36	; 0x24
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800472a:	b480      	push	{r7}
 800472c:	b089      	sub	sp, #36	; 0x24
 800472e:	af00      	add	r7, sp, #0
 8004730:	60f8      	str	r0, [r7, #12]
 8004732:	60b9      	str	r1, [r7, #8]
 8004734:	4613      	mov	r3, r2
 8004736:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004740:	88fb      	ldrh	r3, [r7, #6]
 8004742:	3303      	adds	r3, #3
 8004744:	089b      	lsrs	r3, r3, #2
 8004746:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004748:	2300      	movs	r3, #0
 800474a:	61bb      	str	r3, [r7, #24]
 800474c:	e00b      	b.n	8004766 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	601a      	str	r2, [r3, #0]
    pDest++;
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	3304      	adds	r3, #4
 800475e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	3301      	adds	r3, #1
 8004764:	61bb      	str	r3, [r7, #24]
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	429a      	cmp	r2, r3
 800476c:	d3ef      	bcc.n	800474e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800476e:	69fb      	ldr	r3, [r7, #28]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3724      	adds	r7, #36	; 0x24
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	4013      	ands	r3, r2
 8004792:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004794:	68fb      	ldr	r3, [r7, #12]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b083      	sub	sp, #12
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	f003 0301 	and.w	r3, r3, #1
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
	...

080047c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	3301      	adds	r3, #1
 80047d0:	60fb      	str	r3, [r7, #12]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4a13      	ldr	r2, [pc, #76]	; (8004824 <USB_CoreReset+0x64>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d901      	bls.n	80047de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e01b      	b.n	8004816 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	daf2      	bge.n	80047cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80047e6:	2300      	movs	r3, #0
 80047e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	f043 0201 	orr.w	r2, r3, #1
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	3301      	adds	r3, #1
 80047fa:	60fb      	str	r3, [r7, #12]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4a09      	ldr	r2, [pc, #36]	; (8004824 <USB_CoreReset+0x64>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d901      	bls.n	8004808 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e006      	b.n	8004816 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b01      	cmp	r3, #1
 8004812:	d0f0      	beq.n	80047f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	00030d40 	.word	0x00030d40

08004828 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004828:	b084      	sub	sp, #16
 800482a:	b580      	push	{r7, lr}
 800482c:	b084      	sub	sp, #16
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
 8004832:	f107 001c 	add.w	r0, r7, #28
 8004836:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004844:	461a      	mov	r2, r3
 8004846:	2300      	movs	r3, #0
 8004848:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004866:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004876:	2b00      	cmp	r3, #0
 8004878:	d018      	beq.n	80048ac <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	2b01      	cmp	r3, #1
 800487e:	d10a      	bne.n	8004896 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800488e:	f043 0304 	orr.w	r3, r3, #4
 8004892:	6013      	str	r3, [r2, #0]
 8004894:	e014      	b.n	80048c0 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048a4:	f023 0304 	bic.w	r3, r3, #4
 80048a8:	6013      	str	r3, [r2, #0]
 80048aa:	e009      	b.n	80048c0 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048ba:	f023 0304 	bic.w	r3, r3, #4
 80048be:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80048c0:	2110      	movs	r1, #16
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7ff feb4 	bl	8004630 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f7ff fed7 	bl	800467c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80048ce:	2300      	movs	r3, #0
 80048d0:	60fb      	str	r3, [r7, #12]
 80048d2:	e015      	b.n	8004900 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e0:	461a      	mov	r2, r3
 80048e2:	f04f 33ff 	mov.w	r3, #4294967295
 80048e6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	015a      	lsls	r2, r3, #5
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	4413      	add	r3, r2
 80048f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f4:	461a      	mov	r2, r3
 80048f6:	2300      	movs	r3, #0
 80048f8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	3301      	adds	r3, #1
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	429a      	cmp	r2, r3
 8004906:	d3e5      	bcc.n	80048d4 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004908:	2101      	movs	r1, #1
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f8ac 	bl	8004a68 <USB_DriveVbus>

  HAL_Delay(200U);
 8004910:	20c8      	movs	r0, #200	; 0xc8
 8004912:	f7fc fa3f 	bl	8000d94 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f04f 32ff 	mov.w	r2, #4294967295
 8004922:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00b      	beq.n	8004948 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004936:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a14      	ldr	r2, [pc, #80]	; (800498c <USB_HostInit+0x164>)
 800493c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a13      	ldr	r2, [pc, #76]	; (8004990 <USB_HostInit+0x168>)
 8004942:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004946:	e009      	b.n	800495c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2280      	movs	r2, #128	; 0x80
 800494c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a10      	ldr	r2, [pc, #64]	; (8004994 <USB_HostInit+0x16c>)
 8004952:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a10      	ldr	r2, [pc, #64]	; (8004998 <USB_HostInit+0x170>)
 8004958:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800495c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495e:	2b00      	cmp	r3, #0
 8004960:	d105      	bne.n	800496e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	f043 0210 	orr.w	r2, r3, #16
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	699a      	ldr	r2, [r3, #24]
 8004972:	4b0a      	ldr	r3, [pc, #40]	; (800499c <USB_HostInit+0x174>)
 8004974:	4313      	orrs	r3, r2
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004986:	b004      	add	sp, #16
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	01000200 	.word	0x01000200
 8004990:	00e00300 	.word	0x00e00300
 8004994:	00600080 	.word	0x00600080
 8004998:	004000e0 	.word	0x004000e0
 800499c:	a3200008 	.word	0xa3200008

080049a0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	460b      	mov	r3, r1
 80049aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049be:	f023 0303 	bic.w	r3, r3, #3
 80049c2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	78fb      	ldrb	r3, [r7, #3]
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	68f9      	ldr	r1, [r7, #12]
 80049d4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80049d8:	4313      	orrs	r3, r2
 80049da:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80049dc:	78fb      	ldrb	r3, [r7, #3]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d107      	bne.n	80049f2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049e8:	461a      	mov	r2, r3
 80049ea:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80049ee:	6053      	str	r3, [r2, #4]
 80049f0:	e009      	b.n	8004a06 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80049f2:	78fb      	ldrb	r3, [r7, #3]
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d106      	bne.n	8004a06 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049fe:	461a      	mov	r2, r3
 8004a00:	f241 7370 	movw	r3, #6000	; 0x1770
 8004a04:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004a34:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a42:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004a44:	2064      	movs	r0, #100	; 0x64
 8004a46:	f7fc f9a5 	bl	8000d94 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004a52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a56:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004a58:	200a      	movs	r0, #10
 8004a5a:	f7fc f99b 	bl	8000d94 <HAL_Delay>

  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	460b      	mov	r3, r1
 8004a72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004a8c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d109      	bne.n	8004aac <USB_DriveVbus+0x44>
 8004a98:	78fb      	ldrb	r3, [r7, #3]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d106      	bne.n	8004aac <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004aa6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004aaa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ab6:	d109      	bne.n	8004acc <USB_DriveVbus+0x64>
 8004ab8:	78fb      	ldrb	r3, [r7, #3]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d106      	bne.n	8004acc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004ac6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004aca:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b085      	sub	sp, #20
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	0c5b      	lsrs	r3, r3, #17
 8004af8:	f003 0303 	and.w	r3, r3, #3
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3714      	adds	r7, #20
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	b29b      	uxth	r3, r3
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
	...

08004b2c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	4608      	mov	r0, r1
 8004b36:	4611      	mov	r1, r2
 8004b38:	461a      	mov	r2, r3
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	70fb      	strb	r3, [r7, #3]
 8004b3e:	460b      	mov	r3, r1
 8004b40:	70bb      	strb	r3, [r7, #2]
 8004b42:	4613      	mov	r3, r2
 8004b44:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b46:	2300      	movs	r3, #0
 8004b48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004b4e:	78fb      	ldrb	r3, [r7, #3]
 8004b50:	015a      	lsls	r2, r3, #5
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	4413      	add	r3, r2
 8004b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b60:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004b62:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004b66:	2b03      	cmp	r3, #3
 8004b68:	d87e      	bhi.n	8004c68 <USB_HC_Init+0x13c>
 8004b6a:	a201      	add	r2, pc, #4	; (adr r2, 8004b70 <USB_HC_Init+0x44>)
 8004b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b70:	08004b81 	.word	0x08004b81
 8004b74:	08004c2b 	.word	0x08004c2b
 8004b78:	08004b81 	.word	0x08004b81
 8004b7c:	08004bed 	.word	0x08004bed
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004b80:	78fb      	ldrb	r3, [r7, #3]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	f240 439d 	movw	r3, #1181	; 0x49d
 8004b92:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004b94:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	da10      	bge.n	8004bbe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004b9c:	78fb      	ldrb	r3, [r7, #3]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	78fa      	ldrb	r2, [r7, #3]
 8004bac:	0151      	lsls	r1, r2, #5
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	440a      	add	r2, r1
 8004bb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bba:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004bbc:	e057      	b.n	8004c6e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d051      	beq.n	8004c6e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004bca:	78fb      	ldrb	r3, [r7, #3]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	78fa      	ldrb	r2, [r7, #3]
 8004bda:	0151      	lsls	r1, r2, #5
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	440a      	add	r2, r1
 8004be0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004be4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004be8:	60d3      	str	r3, [r2, #12]
      break;
 8004bea:	e040      	b.n	8004c6e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004bec:	78fb      	ldrb	r3, [r7, #3]
 8004bee:	015a      	lsls	r2, r3, #5
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	f240 639d 	movw	r3, #1693	; 0x69d
 8004bfe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004c00:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	da34      	bge.n	8004c72 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004c08:	78fb      	ldrb	r3, [r7, #3]
 8004c0a:	015a      	lsls	r2, r3, #5
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	78fa      	ldrb	r2, [r7, #3]
 8004c18:	0151      	lsls	r1, r2, #5
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	440a      	add	r2, r1
 8004c1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c26:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004c28:	e023      	b.n	8004c72 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004c2a:	78fb      	ldrb	r3, [r7, #3]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c36:	461a      	mov	r2, r3
 8004c38:	f240 2325 	movw	r3, #549	; 0x225
 8004c3c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004c3e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	da17      	bge.n	8004c76 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004c46:	78fb      	ldrb	r3, [r7, #3]
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	78fa      	ldrb	r2, [r7, #3]
 8004c56:	0151      	lsls	r1, r2, #5
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	440a      	add	r2, r1
 8004c5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c60:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004c64:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004c66:	e006      	b.n	8004c76 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c6c:	e004      	b.n	8004c78 <USB_HC_Init+0x14c>
      break;
 8004c6e:	bf00      	nop
 8004c70:	e002      	b.n	8004c78 <USB_HC_Init+0x14c>
      break;
 8004c72:	bf00      	nop
 8004c74:	e000      	b.n	8004c78 <USB_HC_Init+0x14c>
      break;
 8004c76:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c7e:	699a      	ldr	r2, [r3, #24]
 8004c80:	78fb      	ldrb	r3, [r7, #3]
 8004c82:	f003 030f 	and.w	r3, r3, #15
 8004c86:	2101      	movs	r1, #1
 8004c88:	fa01 f303 	lsl.w	r3, r1, r3
 8004c8c:	68b9      	ldr	r1, [r7, #8]
 8004c8e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004c92:	4313      	orrs	r3, r2
 8004c94:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004ca2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	da03      	bge.n	8004cb2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cae:	613b      	str	r3, [r7, #16]
 8004cb0:	e001      	b.n	8004cb6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004cb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d103      	bne.n	8004cc6 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004cbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	e001      	b.n	8004cca <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004cca:	787b      	ldrb	r3, [r7, #1]
 8004ccc:	059b      	lsls	r3, r3, #22
 8004cce:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004cd2:	78bb      	ldrb	r3, [r7, #2]
 8004cd4:	02db      	lsls	r3, r3, #11
 8004cd6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004cda:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004cdc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004ce0:	049b      	lsls	r3, r3, #18
 8004ce2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004ce6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004ce8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004cea:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004cee:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004cf4:	78fb      	ldrb	r3, [r7, #3]
 8004cf6:	0159      	lsls	r1, r3, #5
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	440b      	add	r3, r1
 8004cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d00:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004d06:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004d08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004d0c:	2b03      	cmp	r3, #3
 8004d0e:	d10f      	bne.n	8004d30 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004d10:	78fb      	ldrb	r3, [r7, #3]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	78fa      	ldrb	r2, [r7, #3]
 8004d20:	0151      	lsls	r1, r2, #5
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	440a      	add	r2, r1
 8004d26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d2e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	371c      	adds	r7, #28
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop

08004d40 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08c      	sub	sp, #48	; 0x30
 8004d44:	af02      	add	r7, sp, #8
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	785b      	ldrb	r3, [r3, #1]
 8004d56:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004d58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d5c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d028      	beq.n	8004dbc <USB_HC_StartXfer+0x7c>
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	791b      	ldrb	r3, [r3, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d124      	bne.n	8004dbc <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004d72:	79fb      	ldrb	r3, [r7, #7]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10b      	bne.n	8004d90 <USB_HC_StartXfer+0x50>
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	795b      	ldrb	r3, [r3, #5]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d107      	bne.n	8004d90 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	785b      	ldrb	r3, [r3, #1]
 8004d84:	4619      	mov	r1, r3
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 fa2e 	bl	80051e8 <USB_DoPing>
      return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	e112      	b.n	8004fb6 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8004d90:	79fb      	ldrb	r3, [r7, #7]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d112      	bne.n	8004dbc <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	015a      	lsls	r2, r3, #5
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	69fa      	ldr	r2, [r7, #28]
 8004da6:	0151      	lsls	r1, r2, #5
 8004da8:	6a3a      	ldr	r2, [r7, #32]
 8004daa:	440a      	add	r2, r1
 8004dac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004db0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004db4:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	2200      	movs	r2, #0
 8004dba:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d018      	beq.n	8004df6 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	8912      	ldrh	r2, [r2, #8]
 8004dcc:	4413      	add	r3, r2
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	8912      	ldrh	r2, [r2, #8]
 8004dd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dd8:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004dda:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004ddc:	8b7b      	ldrh	r3, [r7, #26]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d90b      	bls.n	8004dfa <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8004de2:	8b7b      	ldrh	r3, [r7, #26]
 8004de4:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004de6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004de8:	68ba      	ldr	r2, [r7, #8]
 8004dea:	8912      	ldrh	r2, [r2, #8]
 8004dec:	fb02 f203 	mul.w	r2, r2, r3
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	611a      	str	r2, [r3, #16]
 8004df4:	e001      	b.n	8004dfa <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8004df6:	2301      	movs	r3, #1
 8004df8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	78db      	ldrb	r3, [r3, #3]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d006      	beq.n	8004e10 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004e02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	8912      	ldrh	r2, [r2, #8]
 8004e08:	fb02 f203 	mul.w	r2, r2, r3
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004e18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e1a:	04d9      	lsls	r1, r3, #19
 8004e1c:	4b68      	ldr	r3, [pc, #416]	; (8004fc0 <USB_HC_StartXfer+0x280>)
 8004e1e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004e20:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	7a9b      	ldrb	r3, [r3, #10]
 8004e26:	075b      	lsls	r3, r3, #29
 8004e28:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004e2c:	69f9      	ldr	r1, [r7, #28]
 8004e2e:	0148      	lsls	r0, r1, #5
 8004e30:	6a39      	ldr	r1, [r7, #32]
 8004e32:	4401      	add	r1, r0
 8004e34:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004e38:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004e3a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004e3c:	79fb      	ldrb	r3, [r7, #7]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d009      	beq.n	8004e56 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	68d9      	ldr	r1, [r3, #12]
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	015a      	lsls	r2, r3, #5
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e52:	460a      	mov	r2, r1
 8004e54:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004e56:	6a3b      	ldr	r3, [r7, #32]
 8004e58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	bf0c      	ite	eq
 8004e66:	2301      	moveq	r3, #1
 8004e68:	2300      	movne	r3, #0
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	015a      	lsls	r2, r3, #5
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	4413      	add	r3, r2
 8004e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	69fa      	ldr	r2, [r7, #28]
 8004e7e:	0151      	lsls	r1, r2, #5
 8004e80:	6a3a      	ldr	r2, [r7, #32]
 8004e82:	440a      	add	r2, r1
 8004e84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e88:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004e8c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	015a      	lsls	r2, r3, #5
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	4413      	add	r3, r2
 8004e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	7e7b      	ldrb	r3, [r7, #25]
 8004e9e:	075b      	lsls	r3, r3, #29
 8004ea0:	69f9      	ldr	r1, [r7, #28]
 8004ea2:	0148      	lsls	r0, r1, #5
 8004ea4:	6a39      	ldr	r1, [r7, #32]
 8004ea6:	4401      	add	r1, r0
 8004ea8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004eac:	4313      	orrs	r3, r2
 8004eae:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a41      	ldr	r2, [pc, #260]	; (8004fc4 <USB_HC_StartXfer+0x284>)
 8004ec0:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ec2:	4b40      	ldr	r3, [pc, #256]	; (8004fc4 <USB_HC_StartXfer+0x284>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004eca:	4a3e      	ldr	r2, [pc, #248]	; (8004fc4 <USB_HC_StartXfer+0x284>)
 8004ecc:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	78db      	ldrb	r3, [r3, #3]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d006      	beq.n	8004ee4 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004ed6:	4b3b      	ldr	r3, [pc, #236]	; (8004fc4 <USB_HC_StartXfer+0x284>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ede:	4a39      	ldr	r2, [pc, #228]	; (8004fc4 <USB_HC_StartXfer+0x284>)
 8004ee0:	6013      	str	r3, [r2, #0]
 8004ee2:	e005      	b.n	8004ef0 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004ee4:	4b37      	ldr	r3, [pc, #220]	; (8004fc4 <USB_HC_StartXfer+0x284>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004eec:	4a35      	ldr	r2, [pc, #212]	; (8004fc4 <USB_HC_StartXfer+0x284>)
 8004eee:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ef0:	4b34      	ldr	r3, [pc, #208]	; (8004fc4 <USB_HC_StartXfer+0x284>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ef8:	4a32      	ldr	r2, [pc, #200]	; (8004fc4 <USB_HC_StartXfer+0x284>)
 8004efa:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	6a3b      	ldr	r3, [r7, #32]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f08:	461a      	mov	r2, r3
 8004f0a:	4b2e      	ldr	r3, [pc, #184]	; (8004fc4 <USB_HC_StartXfer+0x284>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8004f10:	79fb      	ldrb	r3, [r7, #7]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d14e      	bne.n	8004fb4 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	78db      	ldrb	r3, [r3, #3]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d14a      	bne.n	8004fb4 <USB_HC_StartXfer+0x274>
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d046      	beq.n	8004fb4 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	79db      	ldrb	r3, [r3, #7]
 8004f2a:	2b03      	cmp	r3, #3
 8004f2c:	d830      	bhi.n	8004f90 <USB_HC_StartXfer+0x250>
 8004f2e:	a201      	add	r2, pc, #4	; (adr r2, 8004f34 <USB_HC_StartXfer+0x1f4>)
 8004f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f34:	08004f45 	.word	0x08004f45
 8004f38:	08004f69 	.word	0x08004f69
 8004f3c:	08004f45 	.word	0x08004f45
 8004f40:	08004f69 	.word	0x08004f69
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	3303      	adds	r3, #3
 8004f4a:	089b      	lsrs	r3, r3, #2
 8004f4c:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004f4e:	8afa      	ldrh	r2, [r7, #22]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d91c      	bls.n	8004f94 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	f043 0220 	orr.w	r2, r3, #32
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	619a      	str	r2, [r3, #24]
          }
          break;
 8004f66:	e015      	b.n	8004f94 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	3303      	adds	r3, #3
 8004f6e:	089b      	lsrs	r3, r3, #2
 8004f70:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004f72:	8afa      	ldrh	r2, [r7, #22]
 8004f74:	6a3b      	ldr	r3, [r7, #32]
 8004f76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d90a      	bls.n	8004f98 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	619a      	str	r2, [r3, #24]
          }
          break;
 8004f8e:	e003      	b.n	8004f98 <USB_HC_StartXfer+0x258>

        default:
          break;
 8004f90:	bf00      	nop
 8004f92:	e002      	b.n	8004f9a <USB_HC_StartXfer+0x25a>
          break;
 8004f94:	bf00      	nop
 8004f96:	e000      	b.n	8004f9a <USB_HC_StartXfer+0x25a>
          break;
 8004f98:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	68d9      	ldr	r1, [r3, #12]
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	785a      	ldrb	r2, [r3, #1]
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	b298      	uxth	r0, r3
 8004fa8:	2300      	movs	r3, #0
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	4603      	mov	r3, r0
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f7ff fb86 	bl	80046c0 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3728      	adds	r7, #40	; 0x28
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	1ff80000 	.word	0x1ff80000
 8004fc4:	200000b0 	.word	0x200000b0

08004fc8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	b29b      	uxth	r3, r3
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3714      	adds	r7, #20
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b087      	sub	sp, #28
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8004ffa:	78fb      	ldrb	r3, [r7, #3]
 8004ffc:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004ffe:	2300      	movs	r3, #0
 8005000:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	015a      	lsls	r2, r3, #5
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	4413      	add	r3, r2
 800500a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	0c9b      	lsrs	r3, r3, #18
 8005012:	f003 0303 	and.w	r3, r3, #3
 8005016:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d002      	beq.n	8005024 <USB_HC_Halt+0x3a>
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	2b02      	cmp	r3, #2
 8005022:	d16c      	bne.n	80050fe <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	4413      	add	r3, r2
 800502c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	0151      	lsls	r1, r2, #5
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	440a      	add	r2, r1
 800503a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800503e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005042:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005048:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d143      	bne.n	80050d8 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	4413      	add	r3, r2
 8005058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	0151      	lsls	r1, r2, #5
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	440a      	add	r2, r1
 8005066:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800506a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800506e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	015a      	lsls	r2, r3, #5
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	4413      	add	r3, r2
 8005078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	0151      	lsls	r1, r2, #5
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	440a      	add	r2, r1
 8005086:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800508a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800508e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	4413      	add	r3, r2
 8005098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	0151      	lsls	r1, r2, #5
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	440a      	add	r2, r1
 80050a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050ae:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	3301      	adds	r3, #1
 80050b4:	617b      	str	r3, [r7, #20]
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050bc:	d81d      	bhi.n	80050fa <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050d4:	d0ec      	beq.n	80050b0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80050d6:	e080      	b.n	80051da <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	015a      	lsls	r2, r3, #5
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	4413      	add	r3, r2
 80050e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	0151      	lsls	r1, r2, #5
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	440a      	add	r2, r1
 80050ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050f6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80050f8:	e06f      	b.n	80051da <USB_HC_Halt+0x1f0>
          break;
 80050fa:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80050fc:	e06d      	b.n	80051da <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	4413      	add	r3, r2
 8005106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	0151      	lsls	r1, r2, #5
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	440a      	add	r2, r1
 8005114:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005118:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800511c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d143      	bne.n	80051b6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	4413      	add	r3, r2
 8005136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	0151      	lsls	r1, r2, #5
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	440a      	add	r2, r1
 8005144:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005148:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800514c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	4413      	add	r3, r2
 8005156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	0151      	lsls	r1, r2, #5
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	440a      	add	r2, r1
 8005164:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005168:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800516c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	4413      	add	r3, r2
 8005176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	0151      	lsls	r1, r2, #5
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	440a      	add	r2, r1
 8005184:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005188:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800518c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	3301      	adds	r3, #1
 8005192:	617b      	str	r3, [r7, #20]
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800519a:	d81d      	bhi.n	80051d8 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	015a      	lsls	r2, r3, #5
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051b2:	d0ec      	beq.n	800518e <USB_HC_Halt+0x1a4>
 80051b4:	e011      	b.n	80051da <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	015a      	lsls	r2, r3, #5
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	4413      	add	r3, r2
 80051be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	0151      	lsls	r1, r2, #5
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	440a      	add	r2, r1
 80051cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051d4:	6013      	str	r3, [r2, #0]
 80051d6:	e000      	b.n	80051da <USB_HC_Halt+0x1f0>
          break;
 80051d8:	bf00      	nop
    }
  }

  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	371c      	adds	r7, #28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	460b      	mov	r3, r1
 80051f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80051f8:	78fb      	ldrb	r3, [r7, #3]
 80051fa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80051fc:	2301      	movs	r3, #1
 80051fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	04da      	lsls	r2, r3, #19
 8005204:	4b15      	ldr	r3, [pc, #84]	; (800525c <USB_DoPing+0x74>)
 8005206:	4013      	ands	r3, r2
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	0151      	lsls	r1, r2, #5
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	440a      	add	r2, r1
 8005210:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005214:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005218:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	015a      	lsls	r2, r3, #5
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	4413      	add	r3, r2
 8005222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005230:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005238:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	4413      	add	r3, r2
 8005242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005246:	461a      	mov	r2, r3
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	371c      	adds	r7, #28
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	1ff80000 	.word	0x1ff80000

08005260 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7ff f9a1 	bl	80045b8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005276:	2110      	movs	r1, #16
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f7ff f9d9 	bl	8004630 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7ff f9fc 	bl	800467c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005284:	2300      	movs	r3, #0
 8005286:	613b      	str	r3, [r7, #16]
 8005288:	e01f      	b.n	80052ca <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	4413      	add	r3, r2
 8005292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052a0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052a8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052b0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	015a      	lsls	r2, r3, #5
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	4413      	add	r3, r2
 80052ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052be:	461a      	mov	r2, r3
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	3301      	adds	r3, #1
 80052c8:	613b      	str	r3, [r7, #16]
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	2b0f      	cmp	r3, #15
 80052ce:	d9dc      	bls.n	800528a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80052d0:	2300      	movs	r3, #0
 80052d2:	613b      	str	r3, [r7, #16]
 80052d4:	e034      	b.n	8005340 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	015a      	lsls	r2, r3, #5
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	4413      	add	r3, r2
 80052de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052ec:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052f4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052fc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	015a      	lsls	r2, r3, #5
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	4413      	add	r3, r2
 8005306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800530a:	461a      	mov	r2, r3
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	3301      	adds	r3, #1
 8005314:	617b      	str	r3, [r7, #20]
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800531c:	d80c      	bhi.n	8005338 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	4413      	add	r3, r2
 8005326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005330:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005334:	d0ec      	beq.n	8005310 <USB_StopHost+0xb0>
 8005336:	e000      	b.n	800533a <USB_StopHost+0xda>
        break;
 8005338:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	3301      	adds	r3, #1
 800533e:	613b      	str	r3, [r7, #16]
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	2b0f      	cmp	r3, #15
 8005344:	d9c7      	bls.n	80052d6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800534c:	461a      	mov	r2, r3
 800534e:	f04f 33ff 	mov.w	r3, #4294967295
 8005352:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f04f 32ff 	mov.w	r2, #4294967295
 800535a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7ff f91a 	bl	8004596 <USB_EnableGlobalInt>

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3718      	adds	r7, #24
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800536c:	b590      	push	{r4, r7, lr}
 800536e:	b089      	sub	sp, #36	; 0x24
 8005370:	af04      	add	r7, sp, #16
 8005372:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005374:	2301      	movs	r3, #1
 8005376:	2202      	movs	r2, #2
 8005378:	2102      	movs	r1, #2
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 fc68 	bl	8005c50 <USBH_FindInterface>
 8005380:	4603      	mov	r3, r0
 8005382:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005384:	7bfb      	ldrb	r3, [r7, #15]
 8005386:	2bff      	cmp	r3, #255	; 0xff
 8005388:	d002      	beq.n	8005390 <USBH_CDC_InterfaceInit+0x24>
 800538a:	7bfb      	ldrb	r3, [r7, #15]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d901      	bls.n	8005394 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005390:	2302      	movs	r3, #2
 8005392:	e13d      	b.n	8005610 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005394:	7bfb      	ldrb	r3, [r7, #15]
 8005396:	4619      	mov	r1, r3
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 fc3d 	bl	8005c18 <USBH_SelectInterface>
 800539e:	4603      	mov	r3, r0
 80053a0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80053a2:	7bbb      	ldrb	r3, [r7, #14]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80053a8:	2302      	movs	r3, #2
 80053aa:	e131      	b.n	8005610 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80053b2:	2050      	movs	r0, #80	; 0x50
 80053b4:	f002 fa04 	bl	80077c0 <malloc>
 80053b8:	4603      	mov	r3, r0
 80053ba:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80053c2:	69db      	ldr	r3, [r3, #28]
 80053c4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80053cc:	2302      	movs	r3, #2
 80053ce:	e11f      	b.n	8005610 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80053d0:	2250      	movs	r2, #80	; 0x50
 80053d2:	2100      	movs	r1, #0
 80053d4:	68b8      	ldr	r0, [r7, #8]
 80053d6:	f002 fa03 	bl	80077e0 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80053da:	7bfb      	ldrb	r3, [r7, #15]
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	211a      	movs	r1, #26
 80053e0:	fb01 f303 	mul.w	r3, r1, r3
 80053e4:	4413      	add	r3, r2
 80053e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	b25b      	sxtb	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	da15      	bge.n	800541e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80053f2:	7bfb      	ldrb	r3, [r7, #15]
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	211a      	movs	r1, #26
 80053f8:	fb01 f303 	mul.w	r3, r1, r3
 80053fc:	4413      	add	r3, r2
 80053fe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005402:	781a      	ldrb	r2, [r3, #0]
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005408:	7bfb      	ldrb	r3, [r7, #15]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	211a      	movs	r1, #26
 800540e:	fb01 f303 	mul.w	r3, r1, r3
 8005412:	4413      	add	r3, r2
 8005414:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005418:	881a      	ldrh	r2, [r3, #0]
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	785b      	ldrb	r3, [r3, #1]
 8005422:	4619      	mov	r1, r3
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f001 fe36 	bl	8007096 <USBH_AllocPipe>
 800542a:	4603      	mov	r3, r0
 800542c:	461a      	mov	r2, r3
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	7819      	ldrb	r1, [r3, #0]
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	7858      	ldrb	r0, [r3, #1]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	8952      	ldrh	r2, [r2, #10]
 800544a:	9202      	str	r2, [sp, #8]
 800544c:	2203      	movs	r2, #3
 800544e:	9201      	str	r2, [sp, #4]
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	4623      	mov	r3, r4
 8005454:	4602      	mov	r2, r0
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f001 fdee 	bl	8007038 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2200      	movs	r2, #0
 8005462:	4619      	mov	r1, r3
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f002 f8fb 	bl	8007660 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800546a:	2300      	movs	r3, #0
 800546c:	2200      	movs	r2, #0
 800546e:	210a      	movs	r1, #10
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 fbed 	bl	8005c50 <USBH_FindInterface>
 8005476:	4603      	mov	r3, r0
 8005478:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800547a:	7bfb      	ldrb	r3, [r7, #15]
 800547c:	2bff      	cmp	r3, #255	; 0xff
 800547e:	d002      	beq.n	8005486 <USBH_CDC_InterfaceInit+0x11a>
 8005480:	7bfb      	ldrb	r3, [r7, #15]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d901      	bls.n	800548a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005486:	2302      	movs	r3, #2
 8005488:	e0c2      	b.n	8005610 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800548a:	7bfb      	ldrb	r3, [r7, #15]
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	211a      	movs	r1, #26
 8005490:	fb01 f303 	mul.w	r3, r1, r3
 8005494:	4413      	add	r3, r2
 8005496:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	b25b      	sxtb	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	da16      	bge.n	80054d0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80054a2:	7bfb      	ldrb	r3, [r7, #15]
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	211a      	movs	r1, #26
 80054a8:	fb01 f303 	mul.w	r3, r1, r3
 80054ac:	4413      	add	r3, r2
 80054ae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80054b2:	781a      	ldrb	r2, [r3, #0]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	211a      	movs	r1, #26
 80054be:	fb01 f303 	mul.w	r3, r1, r3
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80054c8:	881a      	ldrh	r2, [r3, #0]
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	835a      	strh	r2, [r3, #26]
 80054ce:	e015      	b.n	80054fc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80054d0:	7bfb      	ldrb	r3, [r7, #15]
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	211a      	movs	r1, #26
 80054d6:	fb01 f303 	mul.w	r3, r1, r3
 80054da:	4413      	add	r3, r2
 80054dc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80054e0:	781a      	ldrb	r2, [r3, #0]
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80054e6:	7bfb      	ldrb	r3, [r7, #15]
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	211a      	movs	r1, #26
 80054ec:	fb01 f303 	mul.w	r3, r1, r3
 80054f0:	4413      	add	r3, r2
 80054f2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80054f6:	881a      	ldrh	r2, [r3, #0]
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	211a      	movs	r1, #26
 8005502:	fb01 f303 	mul.w	r3, r1, r3
 8005506:	4413      	add	r3, r2
 8005508:	f203 3356 	addw	r3, r3, #854	; 0x356
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	b25b      	sxtb	r3, r3
 8005510:	2b00      	cmp	r3, #0
 8005512:	da16      	bge.n	8005542 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005514:	7bfb      	ldrb	r3, [r7, #15]
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	211a      	movs	r1, #26
 800551a:	fb01 f303 	mul.w	r3, r1, r3
 800551e:	4413      	add	r3, r2
 8005520:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005524:	781a      	ldrb	r2, [r3, #0]
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800552a:	7bfb      	ldrb	r3, [r7, #15]
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	211a      	movs	r1, #26
 8005530:	fb01 f303 	mul.w	r3, r1, r3
 8005534:	4413      	add	r3, r2
 8005536:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800553a:	881a      	ldrh	r2, [r3, #0]
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	835a      	strh	r2, [r3, #26]
 8005540:	e015      	b.n	800556e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005542:	7bfb      	ldrb	r3, [r7, #15]
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	211a      	movs	r1, #26
 8005548:	fb01 f303 	mul.w	r3, r1, r3
 800554c:	4413      	add	r3, r2
 800554e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005552:	781a      	ldrb	r2, [r3, #0]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005558:	7bfb      	ldrb	r3, [r7, #15]
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	211a      	movs	r1, #26
 800555e:	fb01 f303 	mul.w	r3, r1, r3
 8005562:	4413      	add	r3, r2
 8005564:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005568:	881a      	ldrh	r2, [r3, #0]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	7b9b      	ldrb	r3, [r3, #14]
 8005572:	4619      	mov	r1, r3
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f001 fd8e 	bl	8007096 <USBH_AllocPipe>
 800557a:	4603      	mov	r3, r0
 800557c:	461a      	mov	r2, r3
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	7bdb      	ldrb	r3, [r3, #15]
 8005586:	4619      	mov	r1, r3
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f001 fd84 	bl	8007096 <USBH_AllocPipe>
 800558e:	4603      	mov	r3, r0
 8005590:	461a      	mov	r2, r3
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	7b59      	ldrb	r1, [r3, #13]
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	7b98      	ldrb	r0, [r3, #14]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	8b12      	ldrh	r2, [r2, #24]
 80055ae:	9202      	str	r2, [sp, #8]
 80055b0:	2202      	movs	r2, #2
 80055b2:	9201      	str	r2, [sp, #4]
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	4623      	mov	r3, r4
 80055b8:	4602      	mov	r2, r0
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f001 fd3c 	bl	8007038 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	7b19      	ldrb	r1, [r3, #12]
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	7bd8      	ldrb	r0, [r3, #15]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	8b52      	ldrh	r2, [r2, #26]
 80055d8:	9202      	str	r2, [sp, #8]
 80055da:	2202      	movs	r2, #2
 80055dc:	9201      	str	r2, [sp, #4]
 80055de:	9300      	str	r3, [sp, #0]
 80055e0:	4623      	mov	r3, r4
 80055e2:	4602      	mov	r2, r0
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f001 fd27 	bl	8007038 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	7b5b      	ldrb	r3, [r3, #13]
 80055f6:	2200      	movs	r2, #0
 80055f8:	4619      	mov	r1, r3
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f002 f830 	bl	8007660 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	7b1b      	ldrb	r3, [r3, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	4619      	mov	r1, r3
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f002 f829 	bl	8007660 <USBH_LL_SetToggle>

  return USBH_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3714      	adds	r7, #20
 8005614:	46bd      	mov	sp, r7
 8005616:	bd90      	pop	{r4, r7, pc}

08005618 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005626:	69db      	ldr	r3, [r3, #28]
 8005628:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00e      	beq.n	8005650 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	4619      	mov	r1, r3
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f001 fd1c 	bl	8007076 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	4619      	mov	r1, r3
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f001 fd47 	bl	80070d8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	7b1b      	ldrb	r3, [r3, #12]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00e      	beq.n	8005676 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	7b1b      	ldrb	r3, [r3, #12]
 800565c:	4619      	mov	r1, r3
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f001 fd09 	bl	8007076 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	7b1b      	ldrb	r3, [r3, #12]
 8005668:	4619      	mov	r1, r3
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f001 fd34 	bl	80070d8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	7b5b      	ldrb	r3, [r3, #13]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00e      	beq.n	800569c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	7b5b      	ldrb	r3, [r3, #13]
 8005682:	4619      	mov	r1, r3
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f001 fcf6 	bl	8007076 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	7b5b      	ldrb	r3, [r3, #13]
 800568e:	4619      	mov	r1, r3
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f001 fd21 	bl	80070d8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80056a2:	69db      	ldr	r3, [r3, #28]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00b      	beq.n	80056c0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	4618      	mov	r0, r3
 80056b2:	f002 f88d 	bl	80077d0 <free>
    phost->pActiveClass->pData = 0U;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80056bc:	2200      	movs	r2, #0
 80056be:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b084      	sub	sp, #16
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	3340      	adds	r3, #64	; 0x40
 80056e0:	4619      	mov	r1, r3
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f8b1 	bl	800584a <GetLineCoding>
 80056e8:	4603      	mov	r3, r0
 80056ea:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80056ec:	7afb      	ldrb	r3, [r7, #11]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d105      	bne.n	80056fe <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80056f8:	2102      	movs	r1, #2
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80056fe:	7afb      	ldrb	r3, [r7, #11]
}
 8005700:	4618      	mov	r0, r3
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005710:	2301      	movs	r3, #1
 8005712:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005714:	2300      	movs	r3, #0
 8005716:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005728:	2b04      	cmp	r3, #4
 800572a:	d877      	bhi.n	800581c <USBH_CDC_Process+0x114>
 800572c:	a201      	add	r2, pc, #4	; (adr r2, 8005734 <USBH_CDC_Process+0x2c>)
 800572e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005732:	bf00      	nop
 8005734:	08005749 	.word	0x08005749
 8005738:	0800574f 	.word	0x0800574f
 800573c:	0800577f 	.word	0x0800577f
 8005740:	080057f3 	.word	0x080057f3
 8005744:	08005801 	.word	0x08005801
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005748:	2300      	movs	r3, #0
 800574a:	73fb      	strb	r3, [r7, #15]
      break;
 800574c:	e06d      	b.n	800582a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005752:	4619      	mov	r1, r3
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f897 	bl	8005888 <SetLineCoding>
 800575a:	4603      	mov	r3, r0
 800575c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800575e:	7bbb      	ldrb	r3, [r7, #14]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d104      	bne.n	800576e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	2202      	movs	r2, #2
 8005768:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800576c:	e058      	b.n	8005820 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800576e:	7bbb      	ldrb	r3, [r7, #14]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d055      	beq.n	8005820 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	2204      	movs	r2, #4
 8005778:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800577c:	e050      	b.n	8005820 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	3340      	adds	r3, #64	; 0x40
 8005782:	4619      	mov	r1, r3
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 f860 	bl	800584a <GetLineCoding>
 800578a:	4603      	mov	r3, r0
 800578c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800578e:	7bbb      	ldrb	r3, [r7, #14]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d126      	bne.n	80057e2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057a6:	791b      	ldrb	r3, [r3, #4]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d13b      	bne.n	8005824 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057b6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d133      	bne.n	8005824 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057c6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d12b      	bne.n	8005824 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057d4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d124      	bne.n	8005824 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f95a 	bl	8005a94 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80057e0:	e020      	b.n	8005824 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80057e2:	7bbb      	ldrb	r3, [r7, #14]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d01d      	beq.n	8005824 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	2204      	movs	r2, #4
 80057ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80057f0:	e018      	b.n	8005824 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f867 	bl	80058c6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 f8dc 	bl	80059b6 <CDC_ProcessReception>
      break;
 80057fe:	e014      	b.n	800582a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005800:	2100      	movs	r1, #0
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 ffe5 	bl	80067d2 <USBH_ClrFeature>
 8005808:	4603      	mov	r3, r0
 800580a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800580c:	7bbb      	ldrb	r3, [r7, #14]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10a      	bne.n	8005828 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800581a:	e005      	b.n	8005828 <USBH_CDC_Process+0x120>

    default:
      break;
 800581c:	bf00      	nop
 800581e:	e004      	b.n	800582a <USBH_CDC_Process+0x122>
      break;
 8005820:	bf00      	nop
 8005822:	e002      	b.n	800582a <USBH_CDC_Process+0x122>
      break;
 8005824:	bf00      	nop
 8005826:	e000      	b.n	800582a <USBH_CDC_Process+0x122>
      break;
 8005828:	bf00      	nop

  }

  return status;
 800582a:	7bfb      	ldrb	r3, [r7, #15]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b082      	sub	sp, #8
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	22a1      	movs	r2, #161	; 0xa1
 8005858:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2221      	movs	r2, #33	; 0x21
 800585e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2207      	movs	r2, #7
 8005870:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	2207      	movs	r2, #7
 8005876:	4619      	mov	r1, r3
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f001 f98a 	bl	8006b92 <USBH_CtlReq>
 800587e:	4603      	mov	r3, r0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3708      	adds	r7, #8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2221      	movs	r2, #33	; 0x21
 8005896:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2220      	movs	r2, #32
 800589c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2207      	movs	r2, #7
 80058ae:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	2207      	movs	r2, #7
 80058b4:	4619      	mov	r1, r3
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f001 f96b 	bl	8006b92 <USBH_CtlReq>
 80058bc:	4603      	mov	r3, r0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b086      	sub	sp, #24
 80058ca:	af02      	add	r7, sp, #8
 80058cc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80058d8:	2300      	movs	r3, #0
 80058da:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d002      	beq.n	80058ec <CDC_ProcessTransmission+0x26>
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d025      	beq.n	8005936 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 80058ea:	e060      	b.n	80059ae <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	8b12      	ldrh	r2, [r2, #24]
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d90c      	bls.n	8005912 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	69d9      	ldr	r1, [r3, #28]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	8b1a      	ldrh	r2, [r3, #24]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	7b58      	ldrb	r0, [r3, #13]
 8005904:	2301      	movs	r3, #1
 8005906:	9300      	str	r3, [sp, #0]
 8005908:	4603      	mov	r3, r0
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f001 fb51 	bl	8006fb2 <USBH_BulkSendData>
 8005910:	e00c      	b.n	800592c <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800591a:	b29a      	uxth	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	7b58      	ldrb	r0, [r3, #13]
 8005920:	2301      	movs	r3, #1
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	4603      	mov	r3, r0
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f001 fb43 	bl	8006fb2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005934:	e03b      	b.n	80059ae <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	7b5b      	ldrb	r3, [r3, #13]
 800593a:	4619      	mov	r1, r3
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f001 fe65 	bl	800760c <USBH_LL_GetURBState>
 8005942:	4603      	mov	r3, r0
 8005944:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005946:	7afb      	ldrb	r3, [r7, #11]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d128      	bne.n	800599e <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	8b12      	ldrh	r2, [r2, #24]
 8005954:	4293      	cmp	r3, r2
 8005956:	d90e      	bls.n	8005976 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	8b12      	ldrh	r2, [r2, #24]
 8005960:	1a9a      	subs	r2, r3, r2
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	69db      	ldr	r3, [r3, #28]
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	8b12      	ldrh	r2, [r2, #24]
 800596e:	441a      	add	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	61da      	str	r2, [r3, #28]
 8005974:	e002      	b.n	800597c <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005980:	2b00      	cmp	r3, #0
 8005982:	d004      	beq.n	800598e <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800598c:	e00e      	b.n	80059ac <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f868 	bl	8005a6c <USBH_CDC_TransmitCallback>
      break;
 800599c:	e006      	b.n	80059ac <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 800599e:	7afb      	ldrb	r3, [r7, #11]
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d103      	bne.n	80059ac <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80059ac:	bf00      	nop
  }
}
 80059ae:	bf00      	nop
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b086      	sub	sp, #24
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80059c8:	2300      	movs	r3, #0
 80059ca:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80059d2:	2b03      	cmp	r3, #3
 80059d4:	d002      	beq.n	80059dc <CDC_ProcessReception+0x26>
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	d00e      	beq.n	80059f8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80059da:	e043      	b.n	8005a64 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	6a19      	ldr	r1, [r3, #32]
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	8b5a      	ldrh	r2, [r3, #26]
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	7b1b      	ldrb	r3, [r3, #12]
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f001 fb07 	bl	8006ffc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	2204      	movs	r2, #4
 80059f2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80059f6:	e035      	b.n	8005a64 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	7b1b      	ldrb	r3, [r3, #12]
 80059fc:	4619      	mov	r1, r3
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f001 fe04 	bl	800760c <USBH_LL_GetURBState>
 8005a04:	4603      	mov	r3, r0
 8005a06:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005a08:	7cfb      	ldrb	r3, [r7, #19]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d129      	bne.n	8005a62 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	7b1b      	ldrb	r3, [r3, #12]
 8005a12:	4619      	mov	r1, r3
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f001 fd67 	bl	80074e8 <USBH_LL_GetLastXferSize>
 8005a1a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d016      	beq.n	8005a54 <CDC_ProcessReception+0x9e>
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	8b5b      	ldrh	r3, [r3, #26]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d910      	bls.n	8005a54 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	1ad2      	subs	r2, r2, r3
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	6a1a      	ldr	r2, [r3, #32]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	441a      	add	r2, r3
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	2203      	movs	r2, #3
 8005a4e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005a52:	e006      	b.n	8005a62 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f80f 	bl	8005a80 <USBH_CDC_ReceiveCallback>
      break;
 8005a62:	bf00      	nop
  }
}
 8005a64:	bf00      	nop
 8005a66:	3718      	adds	r7, #24
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d101      	bne.n	8005ac0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005abc:	2302      	movs	r3, #2
 8005abe:	e029      	b.n	8005b14 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	79fa      	ldrb	r2, [r7, #7]
 8005ac4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f000 f81f 	bl	8005b1c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d003      	beq.n	8005b0c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f001 fc39 	bl	8007384 <USBH_LL_Init>

  return USBH_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005b24:	2300      	movs	r3, #0
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005b28:	2300      	movs	r3, #0
 8005b2a:	60fb      	str	r3, [r7, #12]
 8005b2c:	e009      	b.n	8005b42 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	33e0      	adds	r3, #224	; 0xe0
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4413      	add	r3, r2
 8005b38:	2200      	movs	r2, #0
 8005b3a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	60fb      	str	r3, [r7, #12]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2b0e      	cmp	r3, #14
 8005b46:	d9f2      	bls.n	8005b2e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005b48:	2300      	movs	r3, #0
 8005b4a:	60fb      	str	r3, [r7, #12]
 8005b4c:	e009      	b.n	8005b62 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005b58:	2200      	movs	r2, #0
 8005b5a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	60fb      	str	r3, [r7, #12]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b68:	d3f1      	bcc.n	8005b4e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2240      	movs	r2, #64	; 0x40
 8005b8e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3714      	adds	r7, #20
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d016      	beq.n	8005c06 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10e      	bne.n	8005c00 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005be8:	1c59      	adds	r1, r3, #1
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	33de      	adds	r3, #222	; 0xde
 8005bf4:	6839      	ldr	r1, [r7, #0]
 8005bf6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	73fb      	strb	r3, [r7, #15]
 8005bfe:	e004      	b.n	8005c0a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005c00:	2302      	movs	r3, #2
 8005c02:	73fb      	strb	r3, [r7, #15]
 8005c04:	e001      	b.n	8005c0a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005c06:	2302      	movs	r3, #2
 8005c08:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3714      	adds	r7, #20
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	460b      	mov	r3, r1
 8005c22:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005c24:	2300      	movs	r3, #0
 8005c26:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005c2e:	78fa      	ldrb	r2, [r7, #3]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d204      	bcs.n	8005c3e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	78fa      	ldrb	r2, [r7, #3]
 8005c38:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005c3c:	e001      	b.n	8005c42 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005c3e:	2302      	movs	r3, #2
 8005c40:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b087      	sub	sp, #28
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	4608      	mov	r0, r1
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	4603      	mov	r3, r0
 8005c60:	70fb      	strb	r3, [r7, #3]
 8005c62:	460b      	mov	r3, r1
 8005c64:	70bb      	strb	r3, [r7, #2]
 8005c66:	4613      	mov	r3, r2
 8005c68:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005c78:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005c7a:	e025      	b.n	8005cc8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005c7c:	7dfb      	ldrb	r3, [r7, #23]
 8005c7e:	221a      	movs	r2, #26
 8005c80:	fb02 f303 	mul.w	r3, r2, r3
 8005c84:	3308      	adds	r3, #8
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	4413      	add	r3, r2
 8005c8a:	3302      	adds	r3, #2
 8005c8c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	795b      	ldrb	r3, [r3, #5]
 8005c92:	78fa      	ldrb	r2, [r7, #3]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d002      	beq.n	8005c9e <USBH_FindInterface+0x4e>
 8005c98:	78fb      	ldrb	r3, [r7, #3]
 8005c9a:	2bff      	cmp	r3, #255	; 0xff
 8005c9c:	d111      	bne.n	8005cc2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005ca2:	78ba      	ldrb	r2, [r7, #2]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d002      	beq.n	8005cae <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005ca8:	78bb      	ldrb	r3, [r7, #2]
 8005caa:	2bff      	cmp	r3, #255	; 0xff
 8005cac:	d109      	bne.n	8005cc2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005cb2:	787a      	ldrb	r2, [r7, #1]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d002      	beq.n	8005cbe <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005cb8:	787b      	ldrb	r3, [r7, #1]
 8005cba:	2bff      	cmp	r3, #255	; 0xff
 8005cbc:	d101      	bne.n	8005cc2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005cbe:	7dfb      	ldrb	r3, [r7, #23]
 8005cc0:	e006      	b.n	8005cd0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005cc2:	7dfb      	ldrb	r3, [r7, #23]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005cc8:	7dfb      	ldrb	r3, [r7, #23]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d9d6      	bls.n	8005c7c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005cce:	23ff      	movs	r3, #255	; 0xff
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	371c      	adds	r7, #28
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f001 fb89 	bl	80073fc <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8005cea:	2101      	movs	r1, #1
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f001 fca0 	bl	8007632 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3708      	adds	r7, #8
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b088      	sub	sp, #32
 8005d00:	af04      	add	r7, sp, #16
 8005d02:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005d04:	2302      	movs	r3, #2
 8005d06:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d102      	bne.n	8005d1e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2203      	movs	r2, #3
 8005d1c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b0b      	cmp	r3, #11
 8005d26:	f200 81b3 	bhi.w	8006090 <USBH_Process+0x394>
 8005d2a:	a201      	add	r2, pc, #4	; (adr r2, 8005d30 <USBH_Process+0x34>)
 8005d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d30:	08005d61 	.word	0x08005d61
 8005d34:	08005d93 	.word	0x08005d93
 8005d38:	08005dfb 	.word	0x08005dfb
 8005d3c:	0800602b 	.word	0x0800602b
 8005d40:	08006091 	.word	0x08006091
 8005d44:	08005e9f 	.word	0x08005e9f
 8005d48:	08005fd1 	.word	0x08005fd1
 8005d4c:	08005ed5 	.word	0x08005ed5
 8005d50:	08005ef5 	.word	0x08005ef5
 8005d54:	08005f15 	.word	0x08005f15
 8005d58:	08005f43 	.word	0x08005f43
 8005d5c:	08006013 	.word	0x08006013
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 8193 	beq.w	8006094 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005d74:	20c8      	movs	r0, #200	; 0xc8
 8005d76:	f001 fca6 	bl	80076c6 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f001 fb99 	bl	80074b2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005d90:	e180      	b.n	8006094 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d107      	bne.n	8005dac <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2202      	movs	r2, #2
 8005da8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005daa:	e182      	b.n	80060b2 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005db2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005db6:	d914      	bls.n	8005de2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005dce:	2b03      	cmp	r3, #3
 8005dd0:	d903      	bls.n	8005dda <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	220d      	movs	r2, #13
 8005dd6:	701a      	strb	r2, [r3, #0]
      break;
 8005dd8:	e16b      	b.n	80060b2 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	701a      	strb	r2, [r3, #0]
      break;
 8005de0:	e167      	b.n	80060b2 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005de8:	f103 020a 	add.w	r2, r3, #10
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8005df2:	200a      	movs	r0, #10
 8005df4:	f001 fc67 	bl	80076c6 <USBH_Delay>
      break;
 8005df8:	e15b      	b.n	80060b2 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d005      	beq.n	8005e10 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005e0a:	2104      	movs	r1, #4
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005e10:	2064      	movs	r0, #100	; 0x64
 8005e12:	f001 fc58 	bl	80076c6 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f001 fb26 	bl	8007468 <USBH_LL_GetSpeed>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	461a      	mov	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2205      	movs	r2, #5
 8005e2a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f001 f931 	bl	8007096 <USBH_AllocPipe>
 8005e34:	4603      	mov	r3, r0
 8005e36:	461a      	mov	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005e3c:	2180      	movs	r1, #128	; 0x80
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f001 f929 	bl	8007096 <USBH_AllocPipe>
 8005e44:	4603      	mov	r3, r0
 8005e46:	461a      	mov	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	7919      	ldrb	r1, [r3, #4]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005e60:	b292      	uxth	r2, r2
 8005e62:	9202      	str	r2, [sp, #8]
 8005e64:	2200      	movs	r2, #0
 8005e66:	9201      	str	r2, [sp, #4]
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2280      	movs	r2, #128	; 0x80
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f001 f8e2 	bl	8007038 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	7959      	ldrb	r1, [r3, #5]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005e88:	b292      	uxth	r2, r2
 8005e8a:	9202      	str	r2, [sp, #8]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	9201      	str	r2, [sp, #4]
 8005e90:	9300      	str	r3, [sp, #0]
 8005e92:	4603      	mov	r3, r0
 8005e94:	2200      	movs	r2, #0
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f001 f8ce 	bl	8007038 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005e9c:	e109      	b.n	80060b2 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 f90c 	bl	80060bc <USBH_HandleEnum>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8005ea8:	7bbb      	ldrb	r3, [r7, #14]
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f040 80f3 	bne.w	8006098 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d103      	bne.n	8005ecc <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2208      	movs	r2, #8
 8005ec8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005eca:	e0e5      	b.n	8006098 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2207      	movs	r2, #7
 8005ed0:	701a      	strb	r2, [r3, #0]
      break;
 8005ed2:	e0e1      	b.n	8006098 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f000 80de 	beq.w	800609c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005ee6:	2101      	movs	r1, #1
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2208      	movs	r2, #8
 8005ef0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005ef2:	e0d3      	b.n	800609c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	4619      	mov	r1, r3
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 fc20 	bl	8006744 <USBH_SetCfg>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f040 80ca 	bne.w	80060a0 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2209      	movs	r2, #9
 8005f10:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005f12:	e0c5      	b.n	80060a0 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8005f1a:	f003 0320 	and.w	r3, r3, #32
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00b      	beq.n	8005f3a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8005f22:	2101      	movs	r1, #1
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 fc30 	bl	800678a <USBH_SetFeature>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f040 80b9 	bne.w	80060a4 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	220a      	movs	r2, #10
 8005f36:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005f38:	e0b4      	b.n	80060a4 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	220a      	movs	r2, #10
 8005f3e:	701a      	strb	r2, [r3, #0]
      break;
 8005f40:	e0b0      	b.n	80060a4 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 80ad 	beq.w	80060a8 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005f56:	2300      	movs	r3, #0
 8005f58:	73fb      	strb	r3, [r7, #15]
 8005f5a:	e016      	b.n	8005f8a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005f5c:	7bfa      	ldrb	r2, [r7, #15]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	32de      	adds	r2, #222	; 0xde
 8005f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f66:	791a      	ldrb	r2, [r3, #4]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d108      	bne.n	8005f84 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8005f72:	7bfa      	ldrb	r2, [r7, #15]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	32de      	adds	r2, #222	; 0xde
 8005f78:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8005f82:	e005      	b.n	8005f90 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005f84:	7bfb      	ldrb	r3, [r7, #15]
 8005f86:	3301      	adds	r3, #1
 8005f88:	73fb      	strb	r3, [r7, #15]
 8005f8a:	7bfb      	ldrb	r3, [r7, #15]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d0e5      	beq.n	8005f5c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d016      	beq.n	8005fc8 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	4798      	blx	r3
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d109      	bne.n	8005fc0 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2206      	movs	r2, #6
 8005fb0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005fb8:	2103      	movs	r1, #3
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005fbe:	e073      	b.n	80060a8 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	220d      	movs	r2, #13
 8005fc4:	701a      	strb	r2, [r3, #0]
      break;
 8005fc6:	e06f      	b.n	80060a8 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	220d      	movs	r2, #13
 8005fcc:	701a      	strb	r2, [r3, #0]
      break;
 8005fce:	e06b      	b.n	80060a8 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d017      	beq.n	800600a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	4798      	blx	r3
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8005fea:	7bbb      	ldrb	r3, [r7, #14]
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d103      	bne.n	8005ffa <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	220b      	movs	r2, #11
 8005ff6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005ff8:	e058      	b.n	80060ac <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8005ffa:	7bbb      	ldrb	r3, [r7, #14]
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d154      	bne.n	80060ac <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	220d      	movs	r2, #13
 8006006:	701a      	strb	r2, [r3, #0]
      break;
 8006008:	e050      	b.n	80060ac <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	220d      	movs	r2, #13
 800600e:	701a      	strb	r2, [r3, #0]
      break;
 8006010:	e04c      	b.n	80060ac <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006018:	2b00      	cmp	r3, #0
 800601a:	d049      	beq.n	80060b0 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	4798      	blx	r3
      }
      break;
 8006028:	e042      	b.n	80060b0 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7ff fd72 	bl	8005b1c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800603e:	2b00      	cmp	r3, #0
 8006040:	d009      	beq.n	8006056 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800605c:	2b00      	cmp	r3, #0
 800605e:	d005      	beq.n	800606c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006066:	2105      	movs	r1, #5
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b01      	cmp	r3, #1
 8006076:	d107      	bne.n	8006088 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f7ff fe2b 	bl	8005cdc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006086:	e014      	b.n	80060b2 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f001 f9b7 	bl	80073fc <USBH_LL_Start>
      break;
 800608e:	e010      	b.n	80060b2 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006090:	bf00      	nop
 8006092:	e00e      	b.n	80060b2 <USBH_Process+0x3b6>
      break;
 8006094:	bf00      	nop
 8006096:	e00c      	b.n	80060b2 <USBH_Process+0x3b6>
      break;
 8006098:	bf00      	nop
 800609a:	e00a      	b.n	80060b2 <USBH_Process+0x3b6>
    break;
 800609c:	bf00      	nop
 800609e:	e008      	b.n	80060b2 <USBH_Process+0x3b6>
      break;
 80060a0:	bf00      	nop
 80060a2:	e006      	b.n	80060b2 <USBH_Process+0x3b6>
      break;
 80060a4:	bf00      	nop
 80060a6:	e004      	b.n	80060b2 <USBH_Process+0x3b6>
      break;
 80060a8:	bf00      	nop
 80060aa:	e002      	b.n	80060b2 <USBH_Process+0x3b6>
      break;
 80060ac:	bf00      	nop
 80060ae:	e000      	b.n	80060b2 <USBH_Process+0x3b6>
      break;
 80060b0:	bf00      	nop
  }
  return USBH_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3710      	adds	r7, #16
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b088      	sub	sp, #32
 80060c0:	af04      	add	r7, sp, #16
 80060c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80060c4:	2301      	movs	r3, #1
 80060c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80060c8:	2301      	movs	r3, #1
 80060ca:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	785b      	ldrb	r3, [r3, #1]
 80060d0:	2b07      	cmp	r3, #7
 80060d2:	f200 81c1 	bhi.w	8006458 <USBH_HandleEnum+0x39c>
 80060d6:	a201      	add	r2, pc, #4	; (adr r2, 80060dc <USBH_HandleEnum+0x20>)
 80060d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060dc:	080060fd 	.word	0x080060fd
 80060e0:	080061bb 	.word	0x080061bb
 80060e4:	08006225 	.word	0x08006225
 80060e8:	080062b3 	.word	0x080062b3
 80060ec:	0800631d 	.word	0x0800631d
 80060f0:	0800638d 	.word	0x0800638d
 80060f4:	080063d3 	.word	0x080063d3
 80060f8:	08006419 	.word	0x08006419
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80060fc:	2108      	movs	r1, #8
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 fa50 	bl	80065a4 <USBH_Get_DevDesc>
 8006104:	4603      	mov	r3, r0
 8006106:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006108:	7bbb      	ldrb	r3, [r7, #14]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d130      	bne.n	8006170 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	7919      	ldrb	r1, [r3, #4]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006132:	b292      	uxth	r2, r2
 8006134:	9202      	str	r2, [sp, #8]
 8006136:	2200      	movs	r2, #0
 8006138:	9201      	str	r2, [sp, #4]
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	4603      	mov	r3, r0
 800613e:	2280      	movs	r2, #128	; 0x80
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 ff79 	bl	8007038 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	7959      	ldrb	r1, [r3, #5]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800615a:	b292      	uxth	r2, r2
 800615c:	9202      	str	r2, [sp, #8]
 800615e:	2200      	movs	r2, #0
 8006160:	9201      	str	r2, [sp, #4]
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	4603      	mov	r3, r0
 8006166:	2200      	movs	r2, #0
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 ff65 	bl	8007038 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800616e:	e175      	b.n	800645c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006170:	7bbb      	ldrb	r3, [r7, #14]
 8006172:	2b03      	cmp	r3, #3
 8006174:	f040 8172 	bne.w	800645c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800617e:	3301      	adds	r3, #1
 8006180:	b2da      	uxtb	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800618e:	2b03      	cmp	r3, #3
 8006190:	d903      	bls.n	800619a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	220d      	movs	r2, #13
 8006196:	701a      	strb	r2, [r3, #0]
      break;
 8006198:	e160      	b.n	800645c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	795b      	ldrb	r3, [r3, #5]
 800619e:	4619      	mov	r1, r3
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 ff99 	bl	80070d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	791b      	ldrb	r3, [r3, #4]
 80061aa:	4619      	mov	r1, r3
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 ff93 	bl	80070d8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	701a      	strb	r2, [r3, #0]
      break;
 80061b8:	e150      	b.n	800645c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80061ba:	2112      	movs	r1, #18
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f9f1 	bl	80065a4 <USBH_Get_DevDesc>
 80061c2:	4603      	mov	r3, r0
 80061c4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80061c6:	7bbb      	ldrb	r3, [r7, #14]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d103      	bne.n	80061d4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2202      	movs	r2, #2
 80061d0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80061d2:	e145      	b.n	8006460 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80061d4:	7bbb      	ldrb	r3, [r7, #14]
 80061d6:	2b03      	cmp	r3, #3
 80061d8:	f040 8142 	bne.w	8006460 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80061e2:	3301      	adds	r3, #1
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80061f2:	2b03      	cmp	r3, #3
 80061f4:	d903      	bls.n	80061fe <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	220d      	movs	r2, #13
 80061fa:	701a      	strb	r2, [r3, #0]
      break;
 80061fc:	e130      	b.n	8006460 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	795b      	ldrb	r3, [r3, #5]
 8006202:	4619      	mov	r1, r3
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 ff67 	bl	80070d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	791b      	ldrb	r3, [r3, #4]
 800620e:	4619      	mov	r1, r3
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 ff61 	bl	80070d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	701a      	strb	r2, [r3, #0]
      break;
 8006222:	e11d      	b.n	8006460 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006224:	2101      	movs	r1, #1
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 fa68 	bl	80066fc <USBH_SetAddress>
 800622c:	4603      	mov	r3, r0
 800622e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006230:	7bbb      	ldrb	r3, [r7, #14]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d132      	bne.n	800629c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006236:	2002      	movs	r0, #2
 8006238:	f001 fa45 	bl	80076c6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2203      	movs	r2, #3
 8006248:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	7919      	ldrb	r1, [r3, #4]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800625e:	b292      	uxth	r2, r2
 8006260:	9202      	str	r2, [sp, #8]
 8006262:	2200      	movs	r2, #0
 8006264:	9201      	str	r2, [sp, #4]
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	4603      	mov	r3, r0
 800626a:	2280      	movs	r2, #128	; 0x80
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 fee3 	bl	8007038 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	7959      	ldrb	r1, [r3, #5]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006286:	b292      	uxth	r2, r2
 8006288:	9202      	str	r2, [sp, #8]
 800628a:	2200      	movs	r2, #0
 800628c:	9201      	str	r2, [sp, #4]
 800628e:	9300      	str	r3, [sp, #0]
 8006290:	4603      	mov	r3, r0
 8006292:	2200      	movs	r2, #0
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 fecf 	bl	8007038 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800629a:	e0e3      	b.n	8006464 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800629c:	7bbb      	ldrb	r3, [r7, #14]
 800629e:	2b03      	cmp	r3, #3
 80062a0:	f040 80e0 	bne.w	8006464 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	220d      	movs	r2, #13
 80062a8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	705a      	strb	r2, [r3, #1]
      break;
 80062b0:	e0d8      	b.n	8006464 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80062b2:	2109      	movs	r1, #9
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f99d 	bl	80065f4 <USBH_Get_CfgDesc>
 80062ba:	4603      	mov	r3, r0
 80062bc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80062be:	7bbb      	ldrb	r3, [r7, #14]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d103      	bne.n	80062cc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2204      	movs	r2, #4
 80062c8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80062ca:	e0cd      	b.n	8006468 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80062cc:	7bbb      	ldrb	r3, [r7, #14]
 80062ce:	2b03      	cmp	r3, #3
 80062d0:	f040 80ca 	bne.w	8006468 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80062da:	3301      	adds	r3, #1
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80062ea:	2b03      	cmp	r3, #3
 80062ec:	d903      	bls.n	80062f6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	220d      	movs	r2, #13
 80062f2:	701a      	strb	r2, [r3, #0]
      break;
 80062f4:	e0b8      	b.n	8006468 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	795b      	ldrb	r3, [r3, #5]
 80062fa:	4619      	mov	r1, r3
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 feeb 	bl	80070d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	791b      	ldrb	r3, [r3, #4]
 8006306:	4619      	mov	r1, r3
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 fee5 	bl	80070d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	701a      	strb	r2, [r3, #0]
      break;
 800631a:	e0a5      	b.n	8006468 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006322:	4619      	mov	r1, r3
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 f965 	bl	80065f4 <USBH_Get_CfgDesc>
 800632a:	4603      	mov	r3, r0
 800632c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800632e:	7bbb      	ldrb	r3, [r7, #14]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d103      	bne.n	800633c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2205      	movs	r2, #5
 8006338:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800633a:	e097      	b.n	800646c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800633c:	7bbb      	ldrb	r3, [r7, #14]
 800633e:	2b03      	cmp	r3, #3
 8006340:	f040 8094 	bne.w	800646c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800634a:	3301      	adds	r3, #1
 800634c:	b2da      	uxtb	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800635a:	2b03      	cmp	r3, #3
 800635c:	d903      	bls.n	8006366 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	220d      	movs	r2, #13
 8006362:	701a      	strb	r2, [r3, #0]
      break;
 8006364:	e082      	b.n	800646c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	795b      	ldrb	r3, [r3, #5]
 800636a:	4619      	mov	r1, r3
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 feb3 	bl	80070d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	791b      	ldrb	r3, [r3, #4]
 8006376:	4619      	mov	r1, r3
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 fead 	bl	80070d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	701a      	strb	r2, [r3, #0]
      break;
 800638a:	e06f      	b.n	800646c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006392:	2b00      	cmp	r3, #0
 8006394:	d019      	beq.n	80063ca <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80063a2:	23ff      	movs	r3, #255	; 0xff
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 f949 	bl	800663c <USBH_Get_StringDesc>
 80063aa:	4603      	mov	r3, r0
 80063ac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80063ae:	7bbb      	ldrb	r3, [r7, #14]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d103      	bne.n	80063bc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2206      	movs	r2, #6
 80063b8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80063ba:	e059      	b.n	8006470 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80063bc:	7bbb      	ldrb	r3, [r7, #14]
 80063be:	2b03      	cmp	r3, #3
 80063c0:	d156      	bne.n	8006470 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2206      	movs	r2, #6
 80063c6:	705a      	strb	r2, [r3, #1]
      break;
 80063c8:	e052      	b.n	8006470 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2206      	movs	r2, #6
 80063ce:	705a      	strb	r2, [r3, #1]
      break;
 80063d0:	e04e      	b.n	8006470 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d019      	beq.n	8006410 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80063e8:	23ff      	movs	r3, #255	; 0xff
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f926 	bl	800663c <USBH_Get_StringDesc>
 80063f0:	4603      	mov	r3, r0
 80063f2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80063f4:	7bbb      	ldrb	r3, [r7, #14]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d103      	bne.n	8006402 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2207      	movs	r2, #7
 80063fe:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006400:	e038      	b.n	8006474 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006402:	7bbb      	ldrb	r3, [r7, #14]
 8006404:	2b03      	cmp	r3, #3
 8006406:	d135      	bne.n	8006474 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2207      	movs	r2, #7
 800640c:	705a      	strb	r2, [r3, #1]
      break;
 800640e:	e031      	b.n	8006474 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2207      	movs	r2, #7
 8006414:	705a      	strb	r2, [r3, #1]
      break;
 8006416:	e02d      	b.n	8006474 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800641e:	2b00      	cmp	r3, #0
 8006420:	d017      	beq.n	8006452 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800642e:	23ff      	movs	r3, #255	; 0xff
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 f903 	bl	800663c <USBH_Get_StringDesc>
 8006436:	4603      	mov	r3, r0
 8006438:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800643a:	7bbb      	ldrb	r3, [r7, #14]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d102      	bne.n	8006446 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006440:	2300      	movs	r3, #0
 8006442:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006444:	e018      	b.n	8006478 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006446:	7bbb      	ldrb	r3, [r7, #14]
 8006448:	2b03      	cmp	r3, #3
 800644a:	d115      	bne.n	8006478 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800644c:	2300      	movs	r3, #0
 800644e:	73fb      	strb	r3, [r7, #15]
      break;
 8006450:	e012      	b.n	8006478 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006452:	2300      	movs	r3, #0
 8006454:	73fb      	strb	r3, [r7, #15]
      break;
 8006456:	e00f      	b.n	8006478 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006458:	bf00      	nop
 800645a:	e00e      	b.n	800647a <USBH_HandleEnum+0x3be>
      break;
 800645c:	bf00      	nop
 800645e:	e00c      	b.n	800647a <USBH_HandleEnum+0x3be>
      break;
 8006460:	bf00      	nop
 8006462:	e00a      	b.n	800647a <USBH_HandleEnum+0x3be>
      break;
 8006464:	bf00      	nop
 8006466:	e008      	b.n	800647a <USBH_HandleEnum+0x3be>
      break;
 8006468:	bf00      	nop
 800646a:	e006      	b.n	800647a <USBH_HandleEnum+0x3be>
      break;
 800646c:	bf00      	nop
 800646e:	e004      	b.n	800647a <USBH_HandleEnum+0x3be>
      break;
 8006470:	bf00      	nop
 8006472:	e002      	b.n	800647a <USBH_HandleEnum+0x3be>
      break;
 8006474:	bf00      	nop
 8006476:	e000      	b.n	800647a <USBH_HandleEnum+0x3be>
      break;
 8006478:	bf00      	nop
  }
  return Status;
 800647a:	7bfb      	ldrb	r3, [r7, #15]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	683a      	ldr	r2, [r7, #0]
 8006492:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006496:	bf00      	nop
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr

080064a2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b082      	sub	sp, #8
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80064b0:	1c5a      	adds	r2, r3, #1
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f804 	bl	80064c6 <USBH_HandleSof>
}
 80064be:	bf00      	nop
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b082      	sub	sp, #8
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b0b      	cmp	r3, #11
 80064d6:	d10a      	bne.n	80064ee <USBH_HandleSof+0x28>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d005      	beq.n	80064ee <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	4798      	blx	r3
  }
}
 80064ee:	bf00      	nop
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b083      	sub	sp, #12
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8006506:	bf00      	nop
}
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006512:	b480      	push	{r7}
 8006514:	b083      	sub	sp, #12
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006522:	bf00      	nop
}
 8006524:	370c      	adds	r7, #12
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800652e:	b480      	push	{r7}
 8006530:	b083      	sub	sp, #12
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 ff58 	bl	8007432 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	791b      	ldrb	r3, [r3, #4]
 8006586:	4619      	mov	r1, r3
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 fda5 	bl	80070d8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	795b      	ldrb	r3, [r3, #5]
 8006592:	4619      	mov	r1, r3
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 fd9f 	bl	80070d8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3708      	adds	r7, #8
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b086      	sub	sp, #24
 80065a8:	af02      	add	r7, sp, #8
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	460b      	mov	r3, r1
 80065ae:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80065b6:	78fb      	ldrb	r3, [r7, #3]
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	9300      	str	r3, [sp, #0]
 80065bc:	4613      	mov	r3, r2
 80065be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065c2:	2100      	movs	r1, #0
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f864 	bl	8006692 <USBH_GetDescriptor>
 80065ca:	4603      	mov	r3, r0
 80065cc:	73fb      	strb	r3, [r7, #15]
 80065ce:	7bfb      	ldrb	r3, [r7, #15]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d10a      	bne.n	80065ea <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f203 3026 	addw	r0, r3, #806	; 0x326
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80065e0:	78fa      	ldrb	r2, [r7, #3]
 80065e2:	b292      	uxth	r2, r2
 80065e4:	4619      	mov	r1, r3
 80065e6:	f000 f918 	bl	800681a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80065ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b086      	sub	sp, #24
 80065f8:	af02      	add	r7, sp, #8
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	460b      	mov	r3, r1
 80065fe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	331c      	adds	r3, #28
 8006604:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006606:	887b      	ldrh	r3, [r7, #2]
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006610:	2100      	movs	r1, #0
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f83d 	bl	8006692 <USBH_GetDescriptor>
 8006618:	4603      	mov	r3, r0
 800661a:	72fb      	strb	r3, [r7, #11]
 800661c:	7afb      	ldrb	r3, [r7, #11]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d107      	bne.n	8006632 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006628:	887a      	ldrh	r2, [r7, #2]
 800662a:	68f9      	ldr	r1, [r7, #12]
 800662c:	4618      	mov	r0, r3
 800662e:	f000 f964 	bl	80068fa <USBH_ParseCfgDesc>
  }

  return status;
 8006632:	7afb      	ldrb	r3, [r7, #11]
}
 8006634:	4618      	mov	r0, r3
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b088      	sub	sp, #32
 8006640:	af02      	add	r7, sp, #8
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	607a      	str	r2, [r7, #4]
 8006646:	461a      	mov	r2, r3
 8006648:	460b      	mov	r3, r1
 800664a:	72fb      	strb	r3, [r7, #11]
 800664c:	4613      	mov	r3, r2
 800664e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8006650:	7afb      	ldrb	r3, [r7, #11]
 8006652:	b29b      	uxth	r3, r3
 8006654:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006658:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006660:	893b      	ldrh	r3, [r7, #8]
 8006662:	9300      	str	r3, [sp, #0]
 8006664:	460b      	mov	r3, r1
 8006666:	2100      	movs	r1, #0
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f000 f812 	bl	8006692 <USBH_GetDescriptor>
 800666e:	4603      	mov	r3, r0
 8006670:	75fb      	strb	r3, [r7, #23]
 8006672:	7dfb      	ldrb	r3, [r7, #23]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d107      	bne.n	8006688 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800667e:	893a      	ldrh	r2, [r7, #8]
 8006680:	6879      	ldr	r1, [r7, #4]
 8006682:	4618      	mov	r0, r3
 8006684:	f000 fa37 	bl	8006af6 <USBH_ParseStringDesc>
  }

  return status;
 8006688:	7dfb      	ldrb	r3, [r7, #23]
}
 800668a:	4618      	mov	r0, r3
 800668c:	3718      	adds	r7, #24
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b084      	sub	sp, #16
 8006696:	af00      	add	r7, sp, #0
 8006698:	60f8      	str	r0, [r7, #12]
 800669a:	607b      	str	r3, [r7, #4]
 800669c:	460b      	mov	r3, r1
 800669e:	72fb      	strb	r3, [r7, #11]
 80066a0:	4613      	mov	r3, r2
 80066a2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	789b      	ldrb	r3, [r3, #2]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d11c      	bne.n	80066e6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80066ac:	7afb      	ldrb	r3, [r7, #11]
 80066ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80066b2:	b2da      	uxtb	r2, r3
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2206      	movs	r2, #6
 80066bc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	893a      	ldrh	r2, [r7, #8]
 80066c2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80066c4:	893b      	ldrh	r3, [r7, #8]
 80066c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80066ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066ce:	d104      	bne.n	80066da <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f240 4209 	movw	r2, #1033	; 0x409
 80066d6:	829a      	strh	r2, [r3, #20]
 80066d8:	e002      	b.n	80066e0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	8b3a      	ldrh	r2, [r7, #24]
 80066e4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80066e6:	8b3b      	ldrh	r3, [r7, #24]
 80066e8:	461a      	mov	r2, r3
 80066ea:	6879      	ldr	r1, [r7, #4]
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f000 fa50 	bl	8006b92 <USBH_CtlReq>
 80066f2:	4603      	mov	r3, r0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	460b      	mov	r3, r1
 8006706:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	789b      	ldrb	r3, [r3, #2]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d10f      	bne.n	8006730 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2205      	movs	r2, #5
 800671a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800671c:	78fb      	ldrb	r3, [r7, #3]
 800671e:	b29a      	uxth	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006730:	2200      	movs	r2, #0
 8006732:	2100      	movs	r1, #0
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fa2c 	bl	8006b92 <USBH_CtlReq>
 800673a:	4603      	mov	r3, r0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	460b      	mov	r3, r1
 800674e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	789b      	ldrb	r3, [r3, #2]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d10e      	bne.n	8006776 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2209      	movs	r2, #9
 8006762:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	887a      	ldrh	r2, [r7, #2]
 8006768:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006776:	2200      	movs	r2, #0
 8006778:	2100      	movs	r1, #0
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fa09 	bl	8006b92 <USBH_CtlReq>
 8006780:	4603      	mov	r3, r0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b082      	sub	sp, #8
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
 8006792:	460b      	mov	r3, r1
 8006794:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	789b      	ldrb	r3, [r3, #2]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d10f      	bne.n	80067be <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2203      	movs	r2, #3
 80067a8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80067aa:	78fb      	ldrb	r3, [r7, #3]
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80067be:	2200      	movs	r2, #0
 80067c0:	2100      	movs	r1, #0
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f9e5 	bl	8006b92 <USBH_CtlReq>
 80067c8:	4603      	mov	r3, r0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3708      	adds	r7, #8
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b082      	sub	sp, #8
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	460b      	mov	r3, r1
 80067dc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	789b      	ldrb	r3, [r3, #2]
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d10f      	bne.n	8006806 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2202      	movs	r2, #2
 80067ea:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80067f8:	78fb      	ldrb	r3, [r7, #3]
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006806:	2200      	movs	r2, #0
 8006808:	2100      	movs	r1, #0
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f9c1 	bl	8006b92 <USBH_CtlReq>
 8006810:	4603      	mov	r3, r0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3708      	adds	r7, #8
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800681a:	b480      	push	{r7}
 800681c:	b085      	sub	sp, #20
 800681e:	af00      	add	r7, sp, #0
 8006820:	60f8      	str	r0, [r7, #12]
 8006822:	60b9      	str	r1, [r7, #8]
 8006824:	4613      	mov	r3, r2
 8006826:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	781a      	ldrb	r2, [r3, #0]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	785a      	ldrb	r2, [r3, #1]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	3302      	adds	r3, #2
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	b29a      	uxth	r2, r3
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	3303      	adds	r3, #3
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	b29b      	uxth	r3, r3
 8006848:	021b      	lsls	r3, r3, #8
 800684a:	b29b      	uxth	r3, r3
 800684c:	4313      	orrs	r3, r2
 800684e:	b29a      	uxth	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	791a      	ldrb	r2, [r3, #4]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	795a      	ldrb	r2, [r3, #5]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	799a      	ldrb	r2, [r3, #6]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	79da      	ldrb	r2, [r3, #7]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006874:	88fb      	ldrh	r3, [r7, #6]
 8006876:	2b08      	cmp	r3, #8
 8006878:	d939      	bls.n	80068ee <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	3308      	adds	r3, #8
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	b29a      	uxth	r2, r3
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	3309      	adds	r3, #9
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	b29b      	uxth	r3, r3
 800688a:	021b      	lsls	r3, r3, #8
 800688c:	b29b      	uxth	r3, r3
 800688e:	4313      	orrs	r3, r2
 8006890:	b29a      	uxth	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	330a      	adds	r3, #10
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	b29a      	uxth	r2, r3
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	330b      	adds	r3, #11
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	021b      	lsls	r3, r3, #8
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	4313      	orrs	r3, r2
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	330c      	adds	r3, #12
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	330d      	adds	r3, #13
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	021b      	lsls	r3, r3, #8
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	4313      	orrs	r3, r2
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	7b9a      	ldrb	r2, [r3, #14]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	7bda      	ldrb	r2, [r3, #15]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	7c1a      	ldrb	r2, [r3, #16]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	7c5a      	ldrb	r2, [r3, #17]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	745a      	strb	r2, [r3, #17]
  }
}
 80068ee:	bf00      	nop
 80068f0:	3714      	adds	r7, #20
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr

080068fa <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b08a      	sub	sp, #40	; 0x28
 80068fe:	af00      	add	r7, sp, #0
 8006900:	60f8      	str	r0, [r7, #12]
 8006902:	60b9      	str	r1, [r7, #8]
 8006904:	4613      	mov	r3, r2
 8006906:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800690c:	2300      	movs	r3, #0
 800690e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006912:	2300      	movs	r3, #0
 8006914:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	781a      	ldrb	r2, [r3, #0]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	785a      	ldrb	r2, [r3, #1]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	3302      	adds	r3, #2
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	b29a      	uxth	r2, r3
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	3303      	adds	r3, #3
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	b29b      	uxth	r3, r3
 800693c:	021b      	lsls	r3, r3, #8
 800693e:	b29b      	uxth	r3, r3
 8006940:	4313      	orrs	r3, r2
 8006942:	b29a      	uxth	r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	791a      	ldrb	r2, [r3, #4]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	795a      	ldrb	r2, [r3, #5]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	799a      	ldrb	r2, [r3, #6]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	79da      	ldrb	r2, [r3, #7]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	7a1a      	ldrb	r2, [r3, #8]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006970:	88fb      	ldrh	r3, [r7, #6]
 8006972:	2b09      	cmp	r3, #9
 8006974:	d95f      	bls.n	8006a36 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006976:	2309      	movs	r3, #9
 8006978:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800697a:	2300      	movs	r3, #0
 800697c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800697e:	e051      	b.n	8006a24 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006980:	f107 0316 	add.w	r3, r7, #22
 8006984:	4619      	mov	r1, r3
 8006986:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006988:	f000 f8e8 	bl	8006b5c <USBH_GetNextDesc>
 800698c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	785b      	ldrb	r3, [r3, #1]
 8006992:	2b04      	cmp	r3, #4
 8006994:	d146      	bne.n	8006a24 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006996:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800699a:	221a      	movs	r2, #26
 800699c:	fb02 f303 	mul.w	r3, r2, r3
 80069a0:	3308      	adds	r3, #8
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	4413      	add	r3, r2
 80069a6:	3302      	adds	r3, #2
 80069a8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80069aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069ac:	69f8      	ldr	r0, [r7, #28]
 80069ae:	f000 f846 	bl	8006a3e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80069b2:	2300      	movs	r3, #0
 80069b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80069b8:	2300      	movs	r3, #0
 80069ba:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80069bc:	e022      	b.n	8006a04 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80069be:	f107 0316 	add.w	r3, r7, #22
 80069c2:	4619      	mov	r1, r3
 80069c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069c6:	f000 f8c9 	bl	8006b5c <USBH_GetNextDesc>
 80069ca:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80069cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ce:	785b      	ldrb	r3, [r3, #1]
 80069d0:	2b05      	cmp	r3, #5
 80069d2:	d117      	bne.n	8006a04 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80069d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069d8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80069dc:	3201      	adds	r2, #1
 80069de:	00d2      	lsls	r2, r2, #3
 80069e0:	211a      	movs	r1, #26
 80069e2:	fb01 f303 	mul.w	r3, r1, r3
 80069e6:	4413      	add	r3, r2
 80069e8:	3308      	adds	r3, #8
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	4413      	add	r3, r2
 80069ee:	3304      	adds	r3, #4
 80069f0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80069f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069f4:	69b8      	ldr	r0, [r7, #24]
 80069f6:	f000 f851 	bl	8006a9c <USBH_ParseEPDesc>
            ep_ix++;
 80069fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80069fe:	3301      	adds	r3, #1
 8006a00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	791b      	ldrb	r3, [r3, #4]
 8006a08:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d204      	bcs.n	8006a1a <USBH_ParseCfgDesc+0x120>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	885a      	ldrh	r2, [r3, #2]
 8006a14:	8afb      	ldrh	r3, [r7, #22]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d8d1      	bhi.n	80069be <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006a1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a1e:	3301      	adds	r3, #1
 8006a20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006a24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d804      	bhi.n	8006a36 <USBH_ParseCfgDesc+0x13c>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	885a      	ldrh	r2, [r3, #2]
 8006a30:	8afb      	ldrh	r3, [r7, #22]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d8a4      	bhi.n	8006980 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006a36:	bf00      	nop
 8006a38:	3728      	adds	r7, #40	; 0x28
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b083      	sub	sp, #12
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
 8006a46:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	781a      	ldrb	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	785a      	ldrb	r2, [r3, #1]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	789a      	ldrb	r2, [r3, #2]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	78da      	ldrb	r2, [r3, #3]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	791a      	ldrb	r2, [r3, #4]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	795a      	ldrb	r2, [r3, #5]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	799a      	ldrb	r2, [r3, #6]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	79da      	ldrb	r2, [r3, #7]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	7a1a      	ldrb	r2, [r3, #8]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	721a      	strb	r2, [r3, #8]
}
 8006a90:	bf00      	nop
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	781a      	ldrb	r2, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	785a      	ldrb	r2, [r3, #1]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	789a      	ldrb	r2, [r3, #2]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	78da      	ldrb	r2, [r3, #3]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	3304      	adds	r3, #4
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	3305      	adds	r3, #5
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	021b      	lsls	r3, r3, #8
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	4313      	orrs	r3, r2
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	799a      	ldrb	r2, [r3, #6]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	719a      	strb	r2, [r3, #6]
}
 8006aea:	bf00      	nop
 8006aec:	370c      	adds	r7, #12
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr

08006af6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006af6:	b480      	push	{r7}
 8006af8:	b087      	sub	sp, #28
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	60f8      	str	r0, [r7, #12]
 8006afe:	60b9      	str	r1, [r7, #8]
 8006b00:	4613      	mov	r3, r2
 8006b02:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	3301      	adds	r3, #1
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	2b03      	cmp	r3, #3
 8006b0c:	d120      	bne.n	8006b50 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	1e9a      	subs	r2, r3, #2
 8006b14:	88fb      	ldrh	r3, [r7, #6]
 8006b16:	4293      	cmp	r3, r2
 8006b18:	bf28      	it	cs
 8006b1a:	4613      	movcs	r3, r2
 8006b1c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	3302      	adds	r3, #2
 8006b22:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006b24:	2300      	movs	r3, #0
 8006b26:	82fb      	strh	r3, [r7, #22]
 8006b28:	e00b      	b.n	8006b42 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006b2a:	8afb      	ldrh	r3, [r7, #22]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	4413      	add	r3, r2
 8006b30:	781a      	ldrb	r2, [r3, #0]
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006b3c:	8afb      	ldrh	r3, [r7, #22]
 8006b3e:	3302      	adds	r3, #2
 8006b40:	82fb      	strh	r3, [r7, #22]
 8006b42:	8afa      	ldrh	r2, [r7, #22]
 8006b44:	8abb      	ldrh	r3, [r7, #20]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d3ef      	bcc.n	8006b2a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	701a      	strb	r2, [r3, #0]
  }
}
 8006b50:	bf00      	nop
 8006b52:	371c      	adds	r7, #28
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	881a      	ldrh	r2, [r3, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	4413      	add	r3, r2
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4413      	add	r3, r2
 8006b82:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006b84:	68fb      	ldr	r3, [r7, #12]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3714      	adds	r7, #20
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b086      	sub	sp, #24
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	60f8      	str	r0, [r7, #12]
 8006b9a:	60b9      	str	r1, [r7, #8]
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	789b      	ldrb	r3, [r3, #2]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d002      	beq.n	8006bb2 <USBH_CtlReq+0x20>
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d00f      	beq.n	8006bd0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006bb0:	e027      	b.n	8006c02 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	88fa      	ldrh	r2, [r7, #6]
 8006bbc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	75fb      	strb	r3, [r7, #23]
      break;
 8006bce:	e018      	b.n	8006c02 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f000 f81b 	bl	8006c0c <USBH_HandleControl>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006bda:	7dfb      	ldrb	r3, [r7, #23]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d002      	beq.n	8006be6 <USBH_CtlReq+0x54>
 8006be0:	7dfb      	ldrb	r3, [r7, #23]
 8006be2:	2b03      	cmp	r3, #3
 8006be4:	d106      	bne.n	8006bf4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2201      	movs	r2, #1
 8006bea:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	761a      	strb	r2, [r3, #24]
      break;
 8006bf2:	e005      	b.n	8006c00 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006bf4:	7dfb      	ldrb	r3, [r7, #23]
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d102      	bne.n	8006c00 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	709a      	strb	r2, [r3, #2]
      break;
 8006c00:	bf00      	nop
  }
  return status;
 8006c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3718      	adds	r7, #24
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af02      	add	r7, sp, #8
 8006c12:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006c14:	2301      	movs	r3, #1
 8006c16:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	7e1b      	ldrb	r3, [r3, #24]
 8006c20:	3b01      	subs	r3, #1
 8006c22:	2b0a      	cmp	r3, #10
 8006c24:	f200 8158 	bhi.w	8006ed8 <USBH_HandleControl+0x2cc>
 8006c28:	a201      	add	r2, pc, #4	; (adr r2, 8006c30 <USBH_HandleControl+0x24>)
 8006c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2e:	bf00      	nop
 8006c30:	08006c5d 	.word	0x08006c5d
 8006c34:	08006c77 	.word	0x08006c77
 8006c38:	08006ce1 	.word	0x08006ce1
 8006c3c:	08006d07 	.word	0x08006d07
 8006c40:	08006d3f 	.word	0x08006d3f
 8006c44:	08006d6b 	.word	0x08006d6b
 8006c48:	08006dbd 	.word	0x08006dbd
 8006c4c:	08006ddf 	.word	0x08006ddf
 8006c50:	08006e1b 	.word	0x08006e1b
 8006c54:	08006e43 	.word	0x08006e43
 8006c58:	08006e81 	.word	0x08006e81
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f103 0110 	add.w	r1, r3, #16
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	795b      	ldrb	r3, [r3, #5]
 8006c66:	461a      	mov	r2, r3
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f945 	bl	8006ef8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2202      	movs	r2, #2
 8006c72:	761a      	strb	r2, [r3, #24]
      break;
 8006c74:	e13b      	b.n	8006eee <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	795b      	ldrb	r3, [r3, #5]
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 fcc5 	bl	800760c <USBH_LL_GetURBState>
 8006c82:	4603      	mov	r3, r0
 8006c84:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006c86:	7bbb      	ldrb	r3, [r7, #14]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d11e      	bne.n	8006cca <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	7c1b      	ldrb	r3, [r3, #16]
 8006c90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c94:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	8adb      	ldrh	r3, [r3, #22]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00a      	beq.n	8006cb4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006c9e:	7b7b      	ldrb	r3, [r7, #13]
 8006ca0:	2b80      	cmp	r3, #128	; 0x80
 8006ca2:	d103      	bne.n	8006cac <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2203      	movs	r2, #3
 8006ca8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006caa:	e117      	b.n	8006edc <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2205      	movs	r2, #5
 8006cb0:	761a      	strb	r2, [r3, #24]
      break;
 8006cb2:	e113      	b.n	8006edc <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8006cb4:	7b7b      	ldrb	r3, [r7, #13]
 8006cb6:	2b80      	cmp	r3, #128	; 0x80
 8006cb8:	d103      	bne.n	8006cc2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2209      	movs	r2, #9
 8006cbe:	761a      	strb	r2, [r3, #24]
      break;
 8006cc0:	e10c      	b.n	8006edc <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2207      	movs	r2, #7
 8006cc6:	761a      	strb	r2, [r3, #24]
      break;
 8006cc8:	e108      	b.n	8006edc <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006cca:	7bbb      	ldrb	r3, [r7, #14]
 8006ccc:	2b04      	cmp	r3, #4
 8006cce:	d003      	beq.n	8006cd8 <USBH_HandleControl+0xcc>
 8006cd0:	7bbb      	ldrb	r3, [r7, #14]
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	f040 8102 	bne.w	8006edc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	220b      	movs	r2, #11
 8006cdc:	761a      	strb	r2, [r3, #24]
      break;
 8006cde:	e0fd      	b.n	8006edc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6899      	ldr	r1, [r3, #8]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	899a      	ldrh	r2, [r3, #12]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	791b      	ldrb	r3, [r3, #4]
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 f93c 	bl	8006f76 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2204      	movs	r2, #4
 8006d02:	761a      	strb	r2, [r3, #24]
      break;
 8006d04:	e0f3      	b.n	8006eee <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	791b      	ldrb	r3, [r3, #4]
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 fc7d 	bl	800760c <USBH_LL_GetURBState>
 8006d12:	4603      	mov	r3, r0
 8006d14:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006d16:	7bbb      	ldrb	r3, [r7, #14]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d102      	bne.n	8006d22 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2209      	movs	r2, #9
 8006d20:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006d22:	7bbb      	ldrb	r3, [r7, #14]
 8006d24:	2b05      	cmp	r3, #5
 8006d26:	d102      	bne.n	8006d2e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006d2c:	e0d8      	b.n	8006ee0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006d2e:	7bbb      	ldrb	r3, [r7, #14]
 8006d30:	2b04      	cmp	r3, #4
 8006d32:	f040 80d5 	bne.w	8006ee0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	220b      	movs	r2, #11
 8006d3a:	761a      	strb	r2, [r3, #24]
      break;
 8006d3c:	e0d0      	b.n	8006ee0 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6899      	ldr	r1, [r3, #8]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	899a      	ldrh	r2, [r3, #12]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	7958      	ldrb	r0, [r3, #5]
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	4603      	mov	r3, r0
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f8eb 	bl	8006f2c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2206      	movs	r2, #6
 8006d66:	761a      	strb	r2, [r3, #24]
      break;
 8006d68:	e0c1      	b.n	8006eee <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	795b      	ldrb	r3, [r3, #5]
 8006d6e:	4619      	mov	r1, r3
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fc4b 	bl	800760c <USBH_LL_GetURBState>
 8006d76:	4603      	mov	r3, r0
 8006d78:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006d7a:	7bbb      	ldrb	r3, [r7, #14]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d103      	bne.n	8006d88 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2207      	movs	r2, #7
 8006d84:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006d86:	e0ad      	b.n	8006ee4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8006d88:	7bbb      	ldrb	r3, [r7, #14]
 8006d8a:	2b05      	cmp	r3, #5
 8006d8c:	d105      	bne.n	8006d9a <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	220c      	movs	r2, #12
 8006d92:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006d94:	2303      	movs	r3, #3
 8006d96:	73fb      	strb	r3, [r7, #15]
      break;
 8006d98:	e0a4      	b.n	8006ee4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006d9a:	7bbb      	ldrb	r3, [r7, #14]
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d103      	bne.n	8006da8 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2205      	movs	r2, #5
 8006da4:	761a      	strb	r2, [r3, #24]
      break;
 8006da6:	e09d      	b.n	8006ee4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8006da8:	7bbb      	ldrb	r3, [r7, #14]
 8006daa:	2b04      	cmp	r3, #4
 8006dac:	f040 809a 	bne.w	8006ee4 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	220b      	movs	r2, #11
 8006db4:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006db6:	2302      	movs	r3, #2
 8006db8:	73fb      	strb	r3, [r7, #15]
      break;
 8006dba:	e093      	b.n	8006ee4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	791b      	ldrb	r3, [r3, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	2100      	movs	r1, #0
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f8d6 	bl	8006f76 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2208      	movs	r2, #8
 8006dda:	761a      	strb	r2, [r3, #24]

      break;
 8006ddc:	e087      	b.n	8006eee <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	791b      	ldrb	r3, [r3, #4]
 8006de2:	4619      	mov	r1, r3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fc11 	bl	800760c <USBH_LL_GetURBState>
 8006dea:	4603      	mov	r3, r0
 8006dec:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006dee:	7bbb      	ldrb	r3, [r7, #14]
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d105      	bne.n	8006e00 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	220d      	movs	r2, #13
 8006df8:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006dfe:	e073      	b.n	8006ee8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8006e00:	7bbb      	ldrb	r3, [r7, #14]
 8006e02:	2b04      	cmp	r3, #4
 8006e04:	d103      	bne.n	8006e0e <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	220b      	movs	r2, #11
 8006e0a:	761a      	strb	r2, [r3, #24]
      break;
 8006e0c:	e06c      	b.n	8006ee8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8006e0e:	7bbb      	ldrb	r3, [r7, #14]
 8006e10:	2b05      	cmp	r3, #5
 8006e12:	d169      	bne.n	8006ee8 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8006e14:	2303      	movs	r3, #3
 8006e16:	73fb      	strb	r3, [r7, #15]
      break;
 8006e18:	e066      	b.n	8006ee8 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	795a      	ldrb	r2, [r3, #5]
 8006e1e:	2301      	movs	r3, #1
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	4613      	mov	r3, r2
 8006e24:	2200      	movs	r2, #0
 8006e26:	2100      	movs	r1, #0
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 f87f 	bl	8006f2c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	220a      	movs	r2, #10
 8006e3e:	761a      	strb	r2, [r3, #24]
      break;
 8006e40:	e055      	b.n	8006eee <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	795b      	ldrb	r3, [r3, #5]
 8006e46:	4619      	mov	r1, r3
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 fbdf 	bl	800760c <USBH_LL_GetURBState>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006e52:	7bbb      	ldrb	r3, [r7, #14]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d105      	bne.n	8006e64 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	220d      	movs	r2, #13
 8006e60:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006e62:	e043      	b.n	8006eec <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006e64:	7bbb      	ldrb	r3, [r7, #14]
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d103      	bne.n	8006e72 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2209      	movs	r2, #9
 8006e6e:	761a      	strb	r2, [r3, #24]
      break;
 8006e70:	e03c      	b.n	8006eec <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8006e72:	7bbb      	ldrb	r3, [r7, #14]
 8006e74:	2b04      	cmp	r3, #4
 8006e76:	d139      	bne.n	8006eec <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	220b      	movs	r2, #11
 8006e7c:	761a      	strb	r2, [r3, #24]
      break;
 8006e7e:	e035      	b.n	8006eec <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	7e5b      	ldrb	r3, [r3, #25]
 8006e84:	3301      	adds	r3, #1
 8006e86:	b2da      	uxtb	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	765a      	strb	r2, [r3, #25]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	7e5b      	ldrb	r3, [r3, #25]
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d806      	bhi.n	8006ea2 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006ea0:	e025      	b.n	8006eee <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ea8:	2106      	movs	r1, #6
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	795b      	ldrb	r3, [r3, #5]
 8006eb8:	4619      	mov	r1, r3
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f90c 	bl	80070d8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	791b      	ldrb	r3, [r3, #4]
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f906 	bl	80070d8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8006ed2:	2302      	movs	r3, #2
 8006ed4:	73fb      	strb	r3, [r7, #15]
      break;
 8006ed6:	e00a      	b.n	8006eee <USBH_HandleControl+0x2e2>

    default:
      break;
 8006ed8:	bf00      	nop
 8006eda:	e008      	b.n	8006eee <USBH_HandleControl+0x2e2>
      break;
 8006edc:	bf00      	nop
 8006ede:	e006      	b.n	8006eee <USBH_HandleControl+0x2e2>
      break;
 8006ee0:	bf00      	nop
 8006ee2:	e004      	b.n	8006eee <USBH_HandleControl+0x2e2>
      break;
 8006ee4:	bf00      	nop
 8006ee6:	e002      	b.n	8006eee <USBH_HandleControl+0x2e2>
      break;
 8006ee8:	bf00      	nop
 8006eea:	e000      	b.n	8006eee <USBH_HandleControl+0x2e2>
      break;
 8006eec:	bf00      	nop
  }

  return status;
 8006eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b088      	sub	sp, #32
 8006efc:	af04      	add	r7, sp, #16
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	4613      	mov	r3, r2
 8006f04:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006f06:	79f9      	ldrb	r1, [r7, #7]
 8006f08:	2300      	movs	r3, #0
 8006f0a:	9303      	str	r3, [sp, #12]
 8006f0c:	2308      	movs	r3, #8
 8006f0e:	9302      	str	r3, [sp, #8]
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	9301      	str	r3, [sp, #4]
 8006f14:	2300      	movs	r3, #0
 8006f16:	9300      	str	r3, [sp, #0]
 8006f18:	2300      	movs	r3, #0
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f000 fb44 	bl	80075aa <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b088      	sub	sp, #32
 8006f30:	af04      	add	r7, sp, #16
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	4611      	mov	r1, r2
 8006f38:	461a      	mov	r2, r3
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	80fb      	strh	r3, [r7, #6]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d001      	beq.n	8006f50 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006f50:	7979      	ldrb	r1, [r7, #5]
 8006f52:	7e3b      	ldrb	r3, [r7, #24]
 8006f54:	9303      	str	r3, [sp, #12]
 8006f56:	88fb      	ldrh	r3, [r7, #6]
 8006f58:	9302      	str	r3, [sp, #8]
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	9301      	str	r3, [sp, #4]
 8006f5e:	2301      	movs	r3, #1
 8006f60:	9300      	str	r3, [sp, #0]
 8006f62:	2300      	movs	r3, #0
 8006f64:	2200      	movs	r2, #0
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f000 fb1f 	bl	80075aa <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b088      	sub	sp, #32
 8006f7a:	af04      	add	r7, sp, #16
 8006f7c:	60f8      	str	r0, [r7, #12]
 8006f7e:	60b9      	str	r1, [r7, #8]
 8006f80:	4611      	mov	r1, r2
 8006f82:	461a      	mov	r2, r3
 8006f84:	460b      	mov	r3, r1
 8006f86:	80fb      	strh	r3, [r7, #6]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006f8c:	7979      	ldrb	r1, [r7, #5]
 8006f8e:	2300      	movs	r3, #0
 8006f90:	9303      	str	r3, [sp, #12]
 8006f92:	88fb      	ldrh	r3, [r7, #6]
 8006f94:	9302      	str	r3, [sp, #8]
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	9301      	str	r3, [sp, #4]
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	9300      	str	r3, [sp, #0]
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f000 fb01 	bl	80075aa <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8006fa8:	2300      	movs	r3, #0

}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b088      	sub	sp, #32
 8006fb6:	af04      	add	r7, sp, #16
 8006fb8:	60f8      	str	r0, [r7, #12]
 8006fba:	60b9      	str	r1, [r7, #8]
 8006fbc:	4611      	mov	r1, r2
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	80fb      	strh	r3, [r7, #6]
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006fd6:	7979      	ldrb	r1, [r7, #5]
 8006fd8:	7e3b      	ldrb	r3, [r7, #24]
 8006fda:	9303      	str	r3, [sp, #12]
 8006fdc:	88fb      	ldrh	r3, [r7, #6]
 8006fde:	9302      	str	r3, [sp, #8]
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	9301      	str	r3, [sp, #4]
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	9300      	str	r3, [sp, #0]
 8006fe8:	2302      	movs	r3, #2
 8006fea:	2200      	movs	r2, #0
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f000 fadc 	bl	80075aa <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b088      	sub	sp, #32
 8007000:	af04      	add	r7, sp, #16
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	4611      	mov	r1, r2
 8007008:	461a      	mov	r2, r3
 800700a:	460b      	mov	r3, r1
 800700c:	80fb      	strh	r3, [r7, #6]
 800700e:	4613      	mov	r3, r2
 8007010:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007012:	7979      	ldrb	r1, [r7, #5]
 8007014:	2300      	movs	r3, #0
 8007016:	9303      	str	r3, [sp, #12]
 8007018:	88fb      	ldrh	r3, [r7, #6]
 800701a:	9302      	str	r3, [sp, #8]
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	9301      	str	r3, [sp, #4]
 8007020:	2301      	movs	r3, #1
 8007022:	9300      	str	r3, [sp, #0]
 8007024:	2302      	movs	r3, #2
 8007026:	2201      	movs	r2, #1
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	f000 fabe 	bl	80075aa <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b086      	sub	sp, #24
 800703c:	af04      	add	r7, sp, #16
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	4608      	mov	r0, r1
 8007042:	4611      	mov	r1, r2
 8007044:	461a      	mov	r2, r3
 8007046:	4603      	mov	r3, r0
 8007048:	70fb      	strb	r3, [r7, #3]
 800704a:	460b      	mov	r3, r1
 800704c:	70bb      	strb	r3, [r7, #2]
 800704e:	4613      	mov	r3, r2
 8007050:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007052:	7878      	ldrb	r0, [r7, #1]
 8007054:	78ba      	ldrb	r2, [r7, #2]
 8007056:	78f9      	ldrb	r1, [r7, #3]
 8007058:	8b3b      	ldrh	r3, [r7, #24]
 800705a:	9302      	str	r3, [sp, #8]
 800705c:	7d3b      	ldrb	r3, [r7, #20]
 800705e:	9301      	str	r3, [sp, #4]
 8007060:	7c3b      	ldrb	r3, [r7, #16]
 8007062:	9300      	str	r3, [sp, #0]
 8007064:	4603      	mov	r3, r0
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 fa51 	bl	800750e <USBH_LL_OpenPipe>

  return USBH_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3708      	adds	r7, #8
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b082      	sub	sp, #8
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
 800707e:	460b      	mov	r3, r1
 8007080:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007082:	78fb      	ldrb	r3, [r7, #3]
 8007084:	4619      	mov	r1, r3
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 fa70 	bl	800756c <USBH_LL_ClosePipe>

  return USBH_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3708      	adds	r7, #8
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b084      	sub	sp, #16
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
 800709e:	460b      	mov	r3, r1
 80070a0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f836 	bl	8007114 <USBH_GetFreePipe>
 80070a8:	4603      	mov	r3, r0
 80070aa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80070ac:	89fb      	ldrh	r3, [r7, #14]
 80070ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d00a      	beq.n	80070cc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80070b6:	78fa      	ldrb	r2, [r7, #3]
 80070b8:	89fb      	ldrh	r3, [r7, #14]
 80070ba:	f003 030f 	and.w	r3, r3, #15
 80070be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070c2:	6879      	ldr	r1, [r7, #4]
 80070c4:	33e0      	adds	r3, #224	; 0xe0
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	440b      	add	r3, r1
 80070ca:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80070cc:	89fb      	ldrh	r3, [r7, #14]
 80070ce:	b2db      	uxtb	r3, r3
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	460b      	mov	r3, r1
 80070e2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80070e4:	78fb      	ldrb	r3, [r7, #3]
 80070e6:	2b0a      	cmp	r3, #10
 80070e8:	d80d      	bhi.n	8007106 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80070ea:	78fb      	ldrb	r3, [r7, #3]
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	33e0      	adds	r3, #224	; 0xe0
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	4413      	add	r3, r2
 80070f4:	685a      	ldr	r2, [r3, #4]
 80070f6:	78fb      	ldrb	r3, [r7, #3]
 80070f8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80070fc:	6879      	ldr	r1, [r7, #4]
 80070fe:	33e0      	adds	r3, #224	; 0xe0
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	440b      	add	r3, r1
 8007104:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800711c:	2300      	movs	r3, #0
 800711e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007120:	2300      	movs	r3, #0
 8007122:	73fb      	strb	r3, [r7, #15]
 8007124:	e00f      	b.n	8007146 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007126:	7bfb      	ldrb	r3, [r7, #15]
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	33e0      	adds	r3, #224	; 0xe0
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	4413      	add	r3, r2
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d102      	bne.n	8007140 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800713a:	7bfb      	ldrb	r3, [r7, #15]
 800713c:	b29b      	uxth	r3, r3
 800713e:	e007      	b.n	8007150 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007140:	7bfb      	ldrb	r3, [r7, #15]
 8007142:	3301      	adds	r3, #1
 8007144:	73fb      	strb	r3, [r7, #15]
 8007146:	7bfb      	ldrb	r3, [r7, #15]
 8007148:	2b0a      	cmp	r3, #10
 800714a:	d9ec      	bls.n	8007126 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800714c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007150:	4618      	mov	r0, r3
 8007152:	3714      	adds	r7, #20
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007160:	2201      	movs	r2, #1
 8007162:	490e      	ldr	r1, [pc, #56]	; (800719c <MX_USB_HOST_Init+0x40>)
 8007164:	480e      	ldr	r0, [pc, #56]	; (80071a0 <MX_USB_HOST_Init+0x44>)
 8007166:	f7fe fc9f 	bl	8005aa8 <USBH_Init>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d001      	beq.n	8007174 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007170:	f7f9 fbd2 	bl	8000918 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007174:	490b      	ldr	r1, [pc, #44]	; (80071a4 <MX_USB_HOST_Init+0x48>)
 8007176:	480a      	ldr	r0, [pc, #40]	; (80071a0 <MX_USB_HOST_Init+0x44>)
 8007178:	f7fe fd24 	bl	8005bc4 <USBH_RegisterClass>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d001      	beq.n	8007186 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007182:	f7f9 fbc9 	bl	8000918 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007186:	4806      	ldr	r0, [pc, #24]	; (80071a0 <MX_USB_HOST_Init+0x44>)
 8007188:	f7fe fda8 	bl	8005cdc <USBH_Start>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d001      	beq.n	8007196 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007192:	f7f9 fbc1 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007196:	bf00      	nop
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	080071bd 	.word	0x080071bd
 80071a0:	200001b8 	.word	0x200001b8
 80071a4:	2000000c 	.word	0x2000000c

080071a8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80071ac:	4802      	ldr	r0, [pc, #8]	; (80071b8 <MX_USB_HOST_Process+0x10>)
 80071ae:	f7fe fda5 	bl	8005cfc <USBH_Process>
}
 80071b2:	bf00      	nop
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	200001b8 	.word	0x200001b8

080071bc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	460b      	mov	r3, r1
 80071c6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80071c8:	78fb      	ldrb	r3, [r7, #3]
 80071ca:	3b01      	subs	r3, #1
 80071cc:	2b04      	cmp	r3, #4
 80071ce:	d819      	bhi.n	8007204 <USBH_UserProcess+0x48>
 80071d0:	a201      	add	r2, pc, #4	; (adr r2, 80071d8 <USBH_UserProcess+0x1c>)
 80071d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d6:	bf00      	nop
 80071d8:	08007205 	.word	0x08007205
 80071dc:	080071f5 	.word	0x080071f5
 80071e0:	08007205 	.word	0x08007205
 80071e4:	080071fd 	.word	0x080071fd
 80071e8:	080071ed 	.word	0x080071ed
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80071ec:	4b09      	ldr	r3, [pc, #36]	; (8007214 <USBH_UserProcess+0x58>)
 80071ee:	2203      	movs	r2, #3
 80071f0:	701a      	strb	r2, [r3, #0]
  break;
 80071f2:	e008      	b.n	8007206 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80071f4:	4b07      	ldr	r3, [pc, #28]	; (8007214 <USBH_UserProcess+0x58>)
 80071f6:	2202      	movs	r2, #2
 80071f8:	701a      	strb	r2, [r3, #0]
  break;
 80071fa:	e004      	b.n	8007206 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80071fc:	4b05      	ldr	r3, [pc, #20]	; (8007214 <USBH_UserProcess+0x58>)
 80071fe:	2201      	movs	r2, #1
 8007200:	701a      	strb	r2, [r3, #0]
  break;
 8007202:	e000      	b.n	8007206 <USBH_UserProcess+0x4a>

  default:
  break;
 8007204:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007206:	bf00      	nop
 8007208:	370c      	adds	r7, #12
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	200000b4 	.word	0x200000b4

08007218 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b08a      	sub	sp, #40	; 0x28
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007220:	f107 0314 	add.w	r3, r7, #20
 8007224:	2200      	movs	r2, #0
 8007226:	601a      	str	r2, [r3, #0]
 8007228:	605a      	str	r2, [r3, #4]
 800722a:	609a      	str	r2, [r3, #8]
 800722c:	60da      	str	r2, [r3, #12]
 800722e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007238:	d147      	bne.n	80072ca <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800723a:	2300      	movs	r3, #0
 800723c:	613b      	str	r3, [r7, #16]
 800723e:	4b25      	ldr	r3, [pc, #148]	; (80072d4 <HAL_HCD_MspInit+0xbc>)
 8007240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007242:	4a24      	ldr	r2, [pc, #144]	; (80072d4 <HAL_HCD_MspInit+0xbc>)
 8007244:	f043 0301 	orr.w	r3, r3, #1
 8007248:	6313      	str	r3, [r2, #48]	; 0x30
 800724a:	4b22      	ldr	r3, [pc, #136]	; (80072d4 <HAL_HCD_MspInit+0xbc>)
 800724c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	613b      	str	r3, [r7, #16]
 8007254:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007256:	f44f 7300 	mov.w	r3, #512	; 0x200
 800725a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800725c:	2300      	movs	r3, #0
 800725e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007260:	2300      	movs	r3, #0
 8007262:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007264:	f107 0314 	add.w	r3, r7, #20
 8007268:	4619      	mov	r1, r3
 800726a:	481b      	ldr	r0, [pc, #108]	; (80072d8 <HAL_HCD_MspInit+0xc0>)
 800726c:	f7f9 fec6 	bl	8000ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007270:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007276:	2302      	movs	r3, #2
 8007278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800727a:	2300      	movs	r3, #0
 800727c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800727e:	2300      	movs	r3, #0
 8007280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007282:	230a      	movs	r3, #10
 8007284:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007286:	f107 0314 	add.w	r3, r7, #20
 800728a:	4619      	mov	r1, r3
 800728c:	4812      	ldr	r0, [pc, #72]	; (80072d8 <HAL_HCD_MspInit+0xc0>)
 800728e:	f7f9 feb5 	bl	8000ffc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007292:	4b10      	ldr	r3, [pc, #64]	; (80072d4 <HAL_HCD_MspInit+0xbc>)
 8007294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007296:	4a0f      	ldr	r2, [pc, #60]	; (80072d4 <HAL_HCD_MspInit+0xbc>)
 8007298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800729c:	6353      	str	r3, [r2, #52]	; 0x34
 800729e:	2300      	movs	r3, #0
 80072a0:	60fb      	str	r3, [r7, #12]
 80072a2:	4b0c      	ldr	r3, [pc, #48]	; (80072d4 <HAL_HCD_MspInit+0xbc>)
 80072a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072a6:	4a0b      	ldr	r2, [pc, #44]	; (80072d4 <HAL_HCD_MspInit+0xbc>)
 80072a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072ac:	6453      	str	r3, [r2, #68]	; 0x44
 80072ae:	4b09      	ldr	r3, [pc, #36]	; (80072d4 <HAL_HCD_MspInit+0xbc>)
 80072b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072b6:	60fb      	str	r3, [r7, #12]
 80072b8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80072ba:	2200      	movs	r2, #0
 80072bc:	2100      	movs	r1, #0
 80072be:	2043      	movs	r0, #67	; 0x43
 80072c0:	f7f9 fe65 	bl	8000f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80072c4:	2043      	movs	r0, #67	; 0x43
 80072c6:	f7f9 fe7e 	bl	8000fc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80072ca:	bf00      	nop
 80072cc:	3728      	adds	r7, #40	; 0x28
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	40023800 	.word	0x40023800
 80072d8:	40020000 	.word	0x40020000

080072dc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7ff f8d9 	bl	80064a2 <USBH_LL_IncTimer>
}
 80072f0:	bf00      	nop
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007306:	4618      	mov	r0, r3
 8007308:	f7ff f911 	bl	800652e <USBH_LL_Connect>
}
 800730c:	bf00      	nop
 800730e:	3708      	adds	r7, #8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007322:	4618      	mov	r0, r3
 8007324:	f7ff f91a 	bl	800655c <USBH_LL_Disconnect>
}
 8007328:	bf00      	nop
 800732a:	3708      	adds	r7, #8
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	460b      	mov	r3, r1
 800733a:	70fb      	strb	r3, [r7, #3]
 800733c:	4613      	mov	r3, r2
 800733e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800735a:	4618      	mov	r0, r3
 800735c:	f7ff f8cb 	bl	80064f6 <USBH_LL_PortEnabled>
} 
 8007360:	bf00      	nop
 8007362:	3708      	adds	r7, #8
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007376:	4618      	mov	r0, r3
 8007378:	f7ff f8cb 	bl	8006512 <USBH_LL_PortDisabled>
} 
 800737c:	bf00      	nop
 800737e:	3708      	adds	r7, #8
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007392:	2b01      	cmp	r3, #1
 8007394:	d12a      	bne.n	80073ec <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007396:	4a18      	ldr	r2, [pc, #96]	; (80073f8 <USBH_LL_Init+0x74>)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4a15      	ldr	r2, [pc, #84]	; (80073f8 <USBH_LL_Init+0x74>)
 80073a2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80073a6:	4b14      	ldr	r3, [pc, #80]	; (80073f8 <USBH_LL_Init+0x74>)
 80073a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80073ac:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80073ae:	4b12      	ldr	r3, [pc, #72]	; (80073f8 <USBH_LL_Init+0x74>)
 80073b0:	2208      	movs	r2, #8
 80073b2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80073b4:	4b10      	ldr	r3, [pc, #64]	; (80073f8 <USBH_LL_Init+0x74>)
 80073b6:	2201      	movs	r2, #1
 80073b8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80073ba:	4b0f      	ldr	r3, [pc, #60]	; (80073f8 <USBH_LL_Init+0x74>)
 80073bc:	2200      	movs	r2, #0
 80073be:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80073c0:	4b0d      	ldr	r3, [pc, #52]	; (80073f8 <USBH_LL_Init+0x74>)
 80073c2:	2202      	movs	r2, #2
 80073c4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80073c6:	4b0c      	ldr	r3, [pc, #48]	; (80073f8 <USBH_LL_Init+0x74>)
 80073c8:	2200      	movs	r2, #0
 80073ca:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80073cc:	480a      	ldr	r0, [pc, #40]	; (80073f8 <USBH_LL_Init+0x74>)
 80073ce:	f7f9 ffc8 	bl	8001362 <HAL_HCD_Init>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d001      	beq.n	80073dc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80073d8:	f7f9 fa9e 	bl	8000918 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80073dc:	4806      	ldr	r0, [pc, #24]	; (80073f8 <USBH_LL_Init+0x74>)
 80073de:	f7fa fbcb 	bl	8001b78 <HAL_HCD_GetCurrentFrame>
 80073e2:	4603      	mov	r3, r0
 80073e4:	4619      	mov	r1, r3
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f7ff f84c 	bl	8006484 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3708      	adds	r7, #8
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	20000590 	.word	0x20000590

080073fc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007404:	2300      	movs	r3, #0
 8007406:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007408:	2300      	movs	r3, #0
 800740a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007412:	4618      	mov	r0, r3
 8007414:	f7fa fb38 	bl	8001a88 <HAL_HCD_Start>
 8007418:	4603      	mov	r3, r0
 800741a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800741c:	7bfb      	ldrb	r3, [r7, #15]
 800741e:	4618      	mov	r0, r3
 8007420:	f000 f95c 	bl	80076dc <USBH_Get_USB_Status>
 8007424:	4603      	mov	r3, r0
 8007426:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007428:	7bbb      	ldrb	r3, [r7, #14]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b084      	sub	sp, #16
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800743a:	2300      	movs	r3, #0
 800743c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800743e:	2300      	movs	r3, #0
 8007440:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007448:	4618      	mov	r0, r3
 800744a:	f7fa fb40 	bl	8001ace <HAL_HCD_Stop>
 800744e:	4603      	mov	r3, r0
 8007450:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007452:	7bfb      	ldrb	r3, [r7, #15]
 8007454:	4618      	mov	r0, r3
 8007456:	f000 f941 	bl	80076dc <USBH_Get_USB_Status>
 800745a:	4603      	mov	r3, r0
 800745c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800745e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007460:	4618      	mov	r0, r3
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007470:	2301      	movs	r3, #1
 8007472:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800747a:	4618      	mov	r0, r3
 800747c:	f7fa fb8a 	bl	8001b94 <HAL_HCD_GetCurrentSpeed>
 8007480:	4603      	mov	r3, r0
 8007482:	2b01      	cmp	r3, #1
 8007484:	d007      	beq.n	8007496 <USBH_LL_GetSpeed+0x2e>
 8007486:	2b01      	cmp	r3, #1
 8007488:	d302      	bcc.n	8007490 <USBH_LL_GetSpeed+0x28>
 800748a:	2b02      	cmp	r3, #2
 800748c:	d006      	beq.n	800749c <USBH_LL_GetSpeed+0x34>
 800748e:	e008      	b.n	80074a2 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007490:	2300      	movs	r3, #0
 8007492:	73fb      	strb	r3, [r7, #15]
    break;
 8007494:	e008      	b.n	80074a8 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007496:	2301      	movs	r3, #1
 8007498:	73fb      	strb	r3, [r7, #15]
    break;
 800749a:	e005      	b.n	80074a8 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800749c:	2302      	movs	r3, #2
 800749e:	73fb      	strb	r3, [r7, #15]
    break;
 80074a0:	e002      	b.n	80074a8 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80074a2:	2301      	movs	r3, #1
 80074a4:	73fb      	strb	r3, [r7, #15]
    break;
 80074a6:	bf00      	nop
  }
  return  speed;
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b084      	sub	sp, #16
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074ba:	2300      	movs	r3, #0
 80074bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80074be:	2300      	movs	r3, #0
 80074c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80074c8:	4618      	mov	r0, r3
 80074ca:	f7fa fb1d 	bl	8001b08 <HAL_HCD_ResetPort>
 80074ce:	4603      	mov	r3, r0
 80074d0:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 80074d2:	7bfb      	ldrb	r3, [r7, #15]
 80074d4:	4618      	mov	r0, r3
 80074d6:	f000 f901 	bl	80076dc <USBH_Get_USB_Status>
 80074da:	4603      	mov	r3, r0
 80074dc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80074de:	7bbb      	ldrb	r3, [r7, #14]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	460b      	mov	r3, r1
 80074f2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80074fa:	78fa      	ldrb	r2, [r7, #3]
 80074fc:	4611      	mov	r1, r2
 80074fe:	4618      	mov	r0, r3
 8007500:	f7fa fb25 	bl	8001b4e <HAL_HCD_HC_GetXferCount>
 8007504:	4603      	mov	r3, r0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3708      	adds	r7, #8
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800750e:	b590      	push	{r4, r7, lr}
 8007510:	b089      	sub	sp, #36	; 0x24
 8007512:	af04      	add	r7, sp, #16
 8007514:	6078      	str	r0, [r7, #4]
 8007516:	4608      	mov	r0, r1
 8007518:	4611      	mov	r1, r2
 800751a:	461a      	mov	r2, r3
 800751c:	4603      	mov	r3, r0
 800751e:	70fb      	strb	r3, [r7, #3]
 8007520:	460b      	mov	r3, r1
 8007522:	70bb      	strb	r3, [r7, #2]
 8007524:	4613      	mov	r3, r2
 8007526:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007528:	2300      	movs	r3, #0
 800752a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800752c:	2300      	movs	r3, #0
 800752e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007536:	787c      	ldrb	r4, [r7, #1]
 8007538:	78ba      	ldrb	r2, [r7, #2]
 800753a:	78f9      	ldrb	r1, [r7, #3]
 800753c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800753e:	9302      	str	r3, [sp, #8]
 8007540:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007544:	9301      	str	r3, [sp, #4]
 8007546:	f897 3020 	ldrb.w	r3, [r7, #32]
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	4623      	mov	r3, r4
 800754e:	f7f9 ff6a 	bl	8001426 <HAL_HCD_HC_Init>
 8007552:	4603      	mov	r3, r0
 8007554:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007556:	7bfb      	ldrb	r3, [r7, #15]
 8007558:	4618      	mov	r0, r3
 800755a:	f000 f8bf 	bl	80076dc <USBH_Get_USB_Status>
 800755e:	4603      	mov	r3, r0
 8007560:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007562:	7bbb      	ldrb	r3, [r7, #14]
}
 8007564:	4618      	mov	r0, r3
 8007566:	3714      	adds	r7, #20
 8007568:	46bd      	mov	sp, r7
 800756a:	bd90      	pop	{r4, r7, pc}

0800756c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	460b      	mov	r3, r1
 8007576:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007578:	2300      	movs	r3, #0
 800757a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800757c:	2300      	movs	r3, #0
 800757e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007586:	78fa      	ldrb	r2, [r7, #3]
 8007588:	4611      	mov	r1, r2
 800758a:	4618      	mov	r0, r3
 800758c:	f7f9 ffe3 	bl	8001556 <HAL_HCD_HC_Halt>
 8007590:	4603      	mov	r3, r0
 8007592:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007594:	7bfb      	ldrb	r3, [r7, #15]
 8007596:	4618      	mov	r0, r3
 8007598:	f000 f8a0 	bl	80076dc <USBH_Get_USB_Status>
 800759c:	4603      	mov	r3, r0
 800759e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80075a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80075aa:	b590      	push	{r4, r7, lr}
 80075ac:	b089      	sub	sp, #36	; 0x24
 80075ae:	af04      	add	r7, sp, #16
 80075b0:	6078      	str	r0, [r7, #4]
 80075b2:	4608      	mov	r0, r1
 80075b4:	4611      	mov	r1, r2
 80075b6:	461a      	mov	r2, r3
 80075b8:	4603      	mov	r3, r0
 80075ba:	70fb      	strb	r3, [r7, #3]
 80075bc:	460b      	mov	r3, r1
 80075be:	70bb      	strb	r3, [r7, #2]
 80075c0:	4613      	mov	r3, r2
 80075c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075c4:	2300      	movs	r3, #0
 80075c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80075c8:	2300      	movs	r3, #0
 80075ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80075d2:	787c      	ldrb	r4, [r7, #1]
 80075d4:	78ba      	ldrb	r2, [r7, #2]
 80075d6:	78f9      	ldrb	r1, [r7, #3]
 80075d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80075dc:	9303      	str	r3, [sp, #12]
 80075de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80075e0:	9302      	str	r3, [sp, #8]
 80075e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e4:	9301      	str	r3, [sp, #4]
 80075e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80075ea:	9300      	str	r3, [sp, #0]
 80075ec:	4623      	mov	r3, r4
 80075ee:	f7f9 ffd5 	bl	800159c <HAL_HCD_HC_SubmitRequest>
 80075f2:	4603      	mov	r3, r0
 80075f4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80075f6:	7bfb      	ldrb	r3, [r7, #15]
 80075f8:	4618      	mov	r0, r3
 80075fa:	f000 f86f 	bl	80076dc <USBH_Get_USB_Status>
 80075fe:	4603      	mov	r3, r0
 8007600:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007602:	7bbb      	ldrb	r3, [r7, #14]
}
 8007604:	4618      	mov	r0, r3
 8007606:	3714      	adds	r7, #20
 8007608:	46bd      	mov	sp, r7
 800760a:	bd90      	pop	{r4, r7, pc}

0800760c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	460b      	mov	r3, r1
 8007616:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800761e:	78fa      	ldrb	r2, [r7, #3]
 8007620:	4611      	mov	r1, r2
 8007622:	4618      	mov	r0, r3
 8007624:	f7fa fa7e 	bl	8001b24 <HAL_HCD_HC_GetURBState>
 8007628:	4603      	mov	r3, r0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3708      	adds	r7, #8
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b082      	sub	sp, #8
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
 800763a:	460b      	mov	r3, r1
 800763c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007644:	2b01      	cmp	r3, #1
 8007646:	d103      	bne.n	8007650 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007648:	78fb      	ldrb	r3, [r7, #3]
 800764a:	4618      	mov	r0, r3
 800764c:	f000 f872 	bl	8007734 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007650:	20c8      	movs	r0, #200	; 0xc8
 8007652:	f7f9 fb9f 	bl	8000d94 <HAL_Delay>
  return USBH_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	460b      	mov	r3, r1
 800766a:	70fb      	strb	r3, [r7, #3]
 800766c:	4613      	mov	r3, r2
 800766e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007676:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007678:	78fa      	ldrb	r2, [r7, #3]
 800767a:	68f9      	ldr	r1, [r7, #12]
 800767c:	4613      	mov	r3, r2
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	4413      	add	r3, r2
 8007682:	00db      	lsls	r3, r3, #3
 8007684:	440b      	add	r3, r1
 8007686:	333b      	adds	r3, #59	; 0x3b
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00a      	beq.n	80076a4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800768e:	78fa      	ldrb	r2, [r7, #3]
 8007690:	68f9      	ldr	r1, [r7, #12]
 8007692:	4613      	mov	r3, r2
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	4413      	add	r3, r2
 8007698:	00db      	lsls	r3, r3, #3
 800769a:	440b      	add	r3, r1
 800769c:	3350      	adds	r3, #80	; 0x50
 800769e:	78ba      	ldrb	r2, [r7, #2]
 80076a0:	701a      	strb	r2, [r3, #0]
 80076a2:	e009      	b.n	80076b8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80076a4:	78fa      	ldrb	r2, [r7, #3]
 80076a6:	68f9      	ldr	r1, [r7, #12]
 80076a8:	4613      	mov	r3, r2
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4413      	add	r3, r2
 80076ae:	00db      	lsls	r3, r3, #3
 80076b0:	440b      	add	r3, r1
 80076b2:	3351      	adds	r3, #81	; 0x51
 80076b4:	78ba      	ldrb	r2, [r7, #2]
 80076b6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3714      	adds	r7, #20
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b082      	sub	sp, #8
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f7f9 fb60 	bl	8000d94 <HAL_Delay>
}
 80076d4:	bf00      	nop
 80076d6:	3708      	adds	r7, #8
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	4603      	mov	r3, r0
 80076e4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80076e6:	2300      	movs	r3, #0
 80076e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80076ea:	79fb      	ldrb	r3, [r7, #7]
 80076ec:	2b03      	cmp	r3, #3
 80076ee:	d817      	bhi.n	8007720 <USBH_Get_USB_Status+0x44>
 80076f0:	a201      	add	r2, pc, #4	; (adr r2, 80076f8 <USBH_Get_USB_Status+0x1c>)
 80076f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f6:	bf00      	nop
 80076f8:	08007709 	.word	0x08007709
 80076fc:	0800770f 	.word	0x0800770f
 8007700:	08007715 	.word	0x08007715
 8007704:	0800771b 	.word	0x0800771b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007708:	2300      	movs	r3, #0
 800770a:	73fb      	strb	r3, [r7, #15]
    break;
 800770c:	e00b      	b.n	8007726 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800770e:	2302      	movs	r3, #2
 8007710:	73fb      	strb	r3, [r7, #15]
    break;
 8007712:	e008      	b.n	8007726 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007714:	2301      	movs	r3, #1
 8007716:	73fb      	strb	r3, [r7, #15]
    break;
 8007718:	e005      	b.n	8007726 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800771a:	2302      	movs	r3, #2
 800771c:	73fb      	strb	r3, [r7, #15]
    break;
 800771e:	e002      	b.n	8007726 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007720:	2302      	movs	r3, #2
 8007722:	73fb      	strb	r3, [r7, #15]
    break;
 8007724:	bf00      	nop
  }
  return usb_status;
 8007726:	7bfb      	ldrb	r3, [r7, #15]
}
 8007728:	4618      	mov	r0, r3
 800772a:	3714      	adds	r7, #20
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	4603      	mov	r3, r0
 800773c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800773e:	79fb      	ldrb	r3, [r7, #7]
 8007740:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007742:	79fb      	ldrb	r3, [r7, #7]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d102      	bne.n	800774e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8007748:	2301      	movs	r3, #1
 800774a:	73fb      	strb	r3, [r7, #15]
 800774c:	e001      	b.n	8007752 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800774e:	2300      	movs	r3, #0
 8007750:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007752:	7bfb      	ldrb	r3, [r7, #15]
 8007754:	461a      	mov	r2, r3
 8007756:	2101      	movs	r1, #1
 8007758:	4803      	ldr	r0, [pc, #12]	; (8007768 <MX_DriverVbusFS+0x34>)
 800775a:	f7f9 fde9 	bl	8001330 <HAL_GPIO_WritePin>
}
 800775e:	bf00      	nop
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	40020800 	.word	0x40020800

0800776c <__errno>:
 800776c:	4b01      	ldr	r3, [pc, #4]	; (8007774 <__errno+0x8>)
 800776e:	6818      	ldr	r0, [r3, #0]
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	2000002c 	.word	0x2000002c

08007778 <__libc_init_array>:
 8007778:	b570      	push	{r4, r5, r6, lr}
 800777a:	4e0d      	ldr	r6, [pc, #52]	; (80077b0 <__libc_init_array+0x38>)
 800777c:	4c0d      	ldr	r4, [pc, #52]	; (80077b4 <__libc_init_array+0x3c>)
 800777e:	1ba4      	subs	r4, r4, r6
 8007780:	10a4      	asrs	r4, r4, #2
 8007782:	2500      	movs	r5, #0
 8007784:	42a5      	cmp	r5, r4
 8007786:	d109      	bne.n	800779c <__libc_init_array+0x24>
 8007788:	4e0b      	ldr	r6, [pc, #44]	; (80077b8 <__libc_init_array+0x40>)
 800778a:	4c0c      	ldr	r4, [pc, #48]	; (80077bc <__libc_init_array+0x44>)
 800778c:	f000 f8ea 	bl	8007964 <_init>
 8007790:	1ba4      	subs	r4, r4, r6
 8007792:	10a4      	asrs	r4, r4, #2
 8007794:	2500      	movs	r5, #0
 8007796:	42a5      	cmp	r5, r4
 8007798:	d105      	bne.n	80077a6 <__libc_init_array+0x2e>
 800779a:	bd70      	pop	{r4, r5, r6, pc}
 800779c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077a0:	4798      	blx	r3
 80077a2:	3501      	adds	r5, #1
 80077a4:	e7ee      	b.n	8007784 <__libc_init_array+0xc>
 80077a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077aa:	4798      	blx	r3
 80077ac:	3501      	adds	r5, #1
 80077ae:	e7f2      	b.n	8007796 <__libc_init_array+0x1e>
 80077b0:	080079a0 	.word	0x080079a0
 80077b4:	080079a0 	.word	0x080079a0
 80077b8:	080079a0 	.word	0x080079a0
 80077bc:	080079a4 	.word	0x080079a4

080077c0 <malloc>:
 80077c0:	4b02      	ldr	r3, [pc, #8]	; (80077cc <malloc+0xc>)
 80077c2:	4601      	mov	r1, r0
 80077c4:	6818      	ldr	r0, [r3, #0]
 80077c6:	f000 b861 	b.w	800788c <_malloc_r>
 80077ca:	bf00      	nop
 80077cc:	2000002c 	.word	0x2000002c

080077d0 <free>:
 80077d0:	4b02      	ldr	r3, [pc, #8]	; (80077dc <free+0xc>)
 80077d2:	4601      	mov	r1, r0
 80077d4:	6818      	ldr	r0, [r3, #0]
 80077d6:	f000 b80b 	b.w	80077f0 <_free_r>
 80077da:	bf00      	nop
 80077dc:	2000002c 	.word	0x2000002c

080077e0 <memset>:
 80077e0:	4402      	add	r2, r0
 80077e2:	4603      	mov	r3, r0
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d100      	bne.n	80077ea <memset+0xa>
 80077e8:	4770      	bx	lr
 80077ea:	f803 1b01 	strb.w	r1, [r3], #1
 80077ee:	e7f9      	b.n	80077e4 <memset+0x4>

080077f0 <_free_r>:
 80077f0:	b538      	push	{r3, r4, r5, lr}
 80077f2:	4605      	mov	r5, r0
 80077f4:	2900      	cmp	r1, #0
 80077f6:	d045      	beq.n	8007884 <_free_r+0x94>
 80077f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077fc:	1f0c      	subs	r4, r1, #4
 80077fe:	2b00      	cmp	r3, #0
 8007800:	bfb8      	it	lt
 8007802:	18e4      	addlt	r4, r4, r3
 8007804:	f000 f8ac 	bl	8007960 <__malloc_lock>
 8007808:	4a1f      	ldr	r2, [pc, #124]	; (8007888 <_free_r+0x98>)
 800780a:	6813      	ldr	r3, [r2, #0]
 800780c:	4610      	mov	r0, r2
 800780e:	b933      	cbnz	r3, 800781e <_free_r+0x2e>
 8007810:	6063      	str	r3, [r4, #4]
 8007812:	6014      	str	r4, [r2, #0]
 8007814:	4628      	mov	r0, r5
 8007816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800781a:	f000 b8a2 	b.w	8007962 <__malloc_unlock>
 800781e:	42a3      	cmp	r3, r4
 8007820:	d90c      	bls.n	800783c <_free_r+0x4c>
 8007822:	6821      	ldr	r1, [r4, #0]
 8007824:	1862      	adds	r2, r4, r1
 8007826:	4293      	cmp	r3, r2
 8007828:	bf04      	itt	eq
 800782a:	681a      	ldreq	r2, [r3, #0]
 800782c:	685b      	ldreq	r3, [r3, #4]
 800782e:	6063      	str	r3, [r4, #4]
 8007830:	bf04      	itt	eq
 8007832:	1852      	addeq	r2, r2, r1
 8007834:	6022      	streq	r2, [r4, #0]
 8007836:	6004      	str	r4, [r0, #0]
 8007838:	e7ec      	b.n	8007814 <_free_r+0x24>
 800783a:	4613      	mov	r3, r2
 800783c:	685a      	ldr	r2, [r3, #4]
 800783e:	b10a      	cbz	r2, 8007844 <_free_r+0x54>
 8007840:	42a2      	cmp	r2, r4
 8007842:	d9fa      	bls.n	800783a <_free_r+0x4a>
 8007844:	6819      	ldr	r1, [r3, #0]
 8007846:	1858      	adds	r0, r3, r1
 8007848:	42a0      	cmp	r0, r4
 800784a:	d10b      	bne.n	8007864 <_free_r+0x74>
 800784c:	6820      	ldr	r0, [r4, #0]
 800784e:	4401      	add	r1, r0
 8007850:	1858      	adds	r0, r3, r1
 8007852:	4282      	cmp	r2, r0
 8007854:	6019      	str	r1, [r3, #0]
 8007856:	d1dd      	bne.n	8007814 <_free_r+0x24>
 8007858:	6810      	ldr	r0, [r2, #0]
 800785a:	6852      	ldr	r2, [r2, #4]
 800785c:	605a      	str	r2, [r3, #4]
 800785e:	4401      	add	r1, r0
 8007860:	6019      	str	r1, [r3, #0]
 8007862:	e7d7      	b.n	8007814 <_free_r+0x24>
 8007864:	d902      	bls.n	800786c <_free_r+0x7c>
 8007866:	230c      	movs	r3, #12
 8007868:	602b      	str	r3, [r5, #0]
 800786a:	e7d3      	b.n	8007814 <_free_r+0x24>
 800786c:	6820      	ldr	r0, [r4, #0]
 800786e:	1821      	adds	r1, r4, r0
 8007870:	428a      	cmp	r2, r1
 8007872:	bf04      	itt	eq
 8007874:	6811      	ldreq	r1, [r2, #0]
 8007876:	6852      	ldreq	r2, [r2, #4]
 8007878:	6062      	str	r2, [r4, #4]
 800787a:	bf04      	itt	eq
 800787c:	1809      	addeq	r1, r1, r0
 800787e:	6021      	streq	r1, [r4, #0]
 8007880:	605c      	str	r4, [r3, #4]
 8007882:	e7c7      	b.n	8007814 <_free_r+0x24>
 8007884:	bd38      	pop	{r3, r4, r5, pc}
 8007886:	bf00      	nop
 8007888:	200000b8 	.word	0x200000b8

0800788c <_malloc_r>:
 800788c:	b570      	push	{r4, r5, r6, lr}
 800788e:	1ccd      	adds	r5, r1, #3
 8007890:	f025 0503 	bic.w	r5, r5, #3
 8007894:	3508      	adds	r5, #8
 8007896:	2d0c      	cmp	r5, #12
 8007898:	bf38      	it	cc
 800789a:	250c      	movcc	r5, #12
 800789c:	2d00      	cmp	r5, #0
 800789e:	4606      	mov	r6, r0
 80078a0:	db01      	blt.n	80078a6 <_malloc_r+0x1a>
 80078a2:	42a9      	cmp	r1, r5
 80078a4:	d903      	bls.n	80078ae <_malloc_r+0x22>
 80078a6:	230c      	movs	r3, #12
 80078a8:	6033      	str	r3, [r6, #0]
 80078aa:	2000      	movs	r0, #0
 80078ac:	bd70      	pop	{r4, r5, r6, pc}
 80078ae:	f000 f857 	bl	8007960 <__malloc_lock>
 80078b2:	4a21      	ldr	r2, [pc, #132]	; (8007938 <_malloc_r+0xac>)
 80078b4:	6814      	ldr	r4, [r2, #0]
 80078b6:	4621      	mov	r1, r4
 80078b8:	b991      	cbnz	r1, 80078e0 <_malloc_r+0x54>
 80078ba:	4c20      	ldr	r4, [pc, #128]	; (800793c <_malloc_r+0xb0>)
 80078bc:	6823      	ldr	r3, [r4, #0]
 80078be:	b91b      	cbnz	r3, 80078c8 <_malloc_r+0x3c>
 80078c0:	4630      	mov	r0, r6
 80078c2:	f000 f83d 	bl	8007940 <_sbrk_r>
 80078c6:	6020      	str	r0, [r4, #0]
 80078c8:	4629      	mov	r1, r5
 80078ca:	4630      	mov	r0, r6
 80078cc:	f000 f838 	bl	8007940 <_sbrk_r>
 80078d0:	1c43      	adds	r3, r0, #1
 80078d2:	d124      	bne.n	800791e <_malloc_r+0x92>
 80078d4:	230c      	movs	r3, #12
 80078d6:	6033      	str	r3, [r6, #0]
 80078d8:	4630      	mov	r0, r6
 80078da:	f000 f842 	bl	8007962 <__malloc_unlock>
 80078de:	e7e4      	b.n	80078aa <_malloc_r+0x1e>
 80078e0:	680b      	ldr	r3, [r1, #0]
 80078e2:	1b5b      	subs	r3, r3, r5
 80078e4:	d418      	bmi.n	8007918 <_malloc_r+0x8c>
 80078e6:	2b0b      	cmp	r3, #11
 80078e8:	d90f      	bls.n	800790a <_malloc_r+0x7e>
 80078ea:	600b      	str	r3, [r1, #0]
 80078ec:	50cd      	str	r5, [r1, r3]
 80078ee:	18cc      	adds	r4, r1, r3
 80078f0:	4630      	mov	r0, r6
 80078f2:	f000 f836 	bl	8007962 <__malloc_unlock>
 80078f6:	f104 000b 	add.w	r0, r4, #11
 80078fa:	1d23      	adds	r3, r4, #4
 80078fc:	f020 0007 	bic.w	r0, r0, #7
 8007900:	1ac3      	subs	r3, r0, r3
 8007902:	d0d3      	beq.n	80078ac <_malloc_r+0x20>
 8007904:	425a      	negs	r2, r3
 8007906:	50e2      	str	r2, [r4, r3]
 8007908:	e7d0      	b.n	80078ac <_malloc_r+0x20>
 800790a:	428c      	cmp	r4, r1
 800790c:	684b      	ldr	r3, [r1, #4]
 800790e:	bf16      	itet	ne
 8007910:	6063      	strne	r3, [r4, #4]
 8007912:	6013      	streq	r3, [r2, #0]
 8007914:	460c      	movne	r4, r1
 8007916:	e7eb      	b.n	80078f0 <_malloc_r+0x64>
 8007918:	460c      	mov	r4, r1
 800791a:	6849      	ldr	r1, [r1, #4]
 800791c:	e7cc      	b.n	80078b8 <_malloc_r+0x2c>
 800791e:	1cc4      	adds	r4, r0, #3
 8007920:	f024 0403 	bic.w	r4, r4, #3
 8007924:	42a0      	cmp	r0, r4
 8007926:	d005      	beq.n	8007934 <_malloc_r+0xa8>
 8007928:	1a21      	subs	r1, r4, r0
 800792a:	4630      	mov	r0, r6
 800792c:	f000 f808 	bl	8007940 <_sbrk_r>
 8007930:	3001      	adds	r0, #1
 8007932:	d0cf      	beq.n	80078d4 <_malloc_r+0x48>
 8007934:	6025      	str	r5, [r4, #0]
 8007936:	e7db      	b.n	80078f0 <_malloc_r+0x64>
 8007938:	200000b8 	.word	0x200000b8
 800793c:	200000bc 	.word	0x200000bc

08007940 <_sbrk_r>:
 8007940:	b538      	push	{r3, r4, r5, lr}
 8007942:	4c06      	ldr	r4, [pc, #24]	; (800795c <_sbrk_r+0x1c>)
 8007944:	2300      	movs	r3, #0
 8007946:	4605      	mov	r5, r0
 8007948:	4608      	mov	r0, r1
 800794a:	6023      	str	r3, [r4, #0]
 800794c:	f7f9 f944 	bl	8000bd8 <_sbrk>
 8007950:	1c43      	adds	r3, r0, #1
 8007952:	d102      	bne.n	800795a <_sbrk_r+0x1a>
 8007954:	6823      	ldr	r3, [r4, #0]
 8007956:	b103      	cbz	r3, 800795a <_sbrk_r+0x1a>
 8007958:	602b      	str	r3, [r5, #0]
 800795a:	bd38      	pop	{r3, r4, r5, pc}
 800795c:	20000854 	.word	0x20000854

08007960 <__malloc_lock>:
 8007960:	4770      	bx	lr

08007962 <__malloc_unlock>:
 8007962:	4770      	bx	lr

08007964 <_init>:
 8007964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007966:	bf00      	nop
 8007968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800796a:	bc08      	pop	{r3}
 800796c:	469e      	mov	lr, r3
 800796e:	4770      	bx	lr

08007970 <_fini>:
 8007970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007972:	bf00      	nop
 8007974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007976:	bc08      	pop	{r3}
 8007978:	469e      	mov	lr, r3
 800797a:	4770      	bx	lr
